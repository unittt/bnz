//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class AudioRecordWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(AudioRecord), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("StartRecord", StartRecord);
		L.RegFunction("EndRecord", EndRecord);
		L.RegFunction("SaveToAmr", SaveToAmr);
		L.RegFunction("SaveToWav", SaveToWav);
        L.RegFunction("GetRecordVolume", GetRecordVolume);
		L.RegFunction("PlayAmr", PlayAmr);
        L.RegFunction("GetClipAmr", GetClipAmr);
        L.RegVar("Instance", get_Instance, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StartRecord(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			AudioRecord obj = (AudioRecord)ToLua.CheckObject(L, 1, typeof(AudioRecord));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			AudioRecordError o = obj.StartRecord(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EndRecord(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			AudioRecord obj = (AudioRecord)ToLua.CheckObject(L, 1, typeof(AudioRecord));
			AudioRecordError o = obj.EndRecord();
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SaveToAmr(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			AudioRecord obj = (AudioRecord)ToLua.CheckObject(L, 1, typeof(AudioRecord));
			string arg0 = ToLua.CheckString(L, 2);
			bool o = obj.SaveToAmr(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SaveToWav(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			AudioRecord obj = (AudioRecord)ToLua.CheckObject(L, 1, typeof(AudioRecord));
			string arg0 = ToLua.CheckString(L, 2);
			bool o = obj.SaveToWav(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int GetRecordVolume(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			AudioRecord obj = (AudioRecord)ToLua.CheckObject(L, 1, typeof(AudioRecord));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
            float o = obj.GetRecordVolume(arg0);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlayAmr(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			AudioRecord obj = (AudioRecord)ToLua.CheckObject(L, 1, typeof(AudioRecord));
			string arg0 = ToLua.CheckString(L, 2);
			AudioRecordError o = obj.PlayAmr(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int GetClipAmr(IntPtr L)
    {
        try
        {
            ToLua.CheckArgsCount(L, 2);
            AudioRecord obj = (AudioRecord)ToLua.CheckObject(L, 1, typeof(AudioRecord));
            string arg0 = ToLua.CheckString(L, 2);
            UnityEngine.AudioClip arg1 = null;
            AudioRecordError o = obj.GetClipAmr(arg0, out arg1);
            ToLua.Push(L, o);
            ToLua.Push(L, arg1);
            return 2;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int get_Instance(IntPtr L)
    {
        try
        {
            ToLua.Push(L, AudioRecord.Instance);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }
}

