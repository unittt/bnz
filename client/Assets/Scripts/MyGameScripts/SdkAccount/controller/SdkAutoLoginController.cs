// **********************************************************************
// Copyright (c) 2016 Baoyugame. All rights reserved.
// Author : Xianjian
// Desc	: Auto generated by MarsZ. update this if need.
// **********************************************************************

using UnityEngine;
using SdkAccountDto;

/// <summary>
/// This is the controller class for module SdkAutoLoginView, use this to control the ui or view , such as it's init , update or dispose.
/// @Xianjian
/// </summary>
public class SdkAutoLoginController : MonoViewController<SdkAutoLoginView>
{
    private AccountDto _autoLoginDto;
    protected override void InitView()
    {
        var accountList = SdkAccountModel.Instance.GetLastAccount();
        if (accountList.Count <= 0)
        {
            OnSwitchAccount();
            return;
        }

        _autoLoginDto = accountList[0];
        View.AccountLabel.text = "正在登录：" + _autoLoginDto.name;
        StartLoginCoolDown();
    }

    //倒计时结束后，进入自动登录
    public void StartLoginCoolDown()
    {
        DoAutoLogin();
        //JSTimer.Instance.SetupCoolDown("SdkAutoLoginController", 4f, null, DoAutoLogin);
    }

    protected override void RegisterEvent()
    {
        EventDelegate.Set(View.SwichAccountBtn.onClick, OnSwitchAccount);
    }

    private void DoAutoLogin()
    {
        SdkService.RequestSessionLogin(_autoLoginDto.Sid,
            _autoLoginDto.UID, SdkLoginMessage.Instance.GetUUID(), _autoLoginDto.type, 
            (dto) =>
            {
                if (BaseView.IsViewDestroy(View))
                    return;

                CloseView();

                SdkProxyModule.ClearModule();
                if (SdkService.CheckDtoValid(dto))
                {
                    AccountDto dAccount = new AccountDto(dto);
                    dAccount.type = _autoLoginDto.type;
                    SdkAccountModel.Instance.OnLoginSuccess(dAccount, true);
                }
                else
                {
                    //会话失效
                    if (dto != null && dto.code == ResponseDto.ACCOUNT_SESSION_EXPIRED)
                    {
                        SdkAccountModel.Instance.OnSessionInvalid(_autoLoginDto.UID);
                        var accountList = SdkAccountModel.Instance.GetLastAccount();
                        if (accountList.Count <= 0)
                        {
                            SdkProxyModule.OpenLogin();
                            return;
                        }
                    }
                    SdkProxyModule.OpenModule<SdkQuickLoginController>(SdkQuickLoginView.NAME);
                }
            });
    }

    private void OnSwitchAccount()
    {
        CloseView();
        var accountList = SdkAccountModel.Instance.GetLastAccount();
        if (accountList.Count <= 0)
        {
            SdkProxyModule.OpenLogin();
            return;
        }

        SdkProxyModule.OpenModule<SdkQuickLoginController>(SdkQuickLoginView.NAME);
    }

    private void CloseView()
    {
        SdkProxyModule.CloseModuleNow(SdkAutoLoginView.NAME);
    }

    protected override void OnDispose()
    {
        JSTimer.Instance.CancelCd("SdkAutoLoginController");
    }
}