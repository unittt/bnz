// **********************************************************************
// Copyright (c) 2016 Baoyugame. All rights reserved.
// Author : Xianjian
// Created : 9/29/2016 5:57:30 PM
// Desc	: Auto generated by MarsZ. update this if need.
// **********************************************************************

using UnityEngine;

 /// <summary>
 /// This is the controller class for module RegisterConfirm, use this to control the ui or view , such as it's init , update or dispose.
 /// @Xianjian in 9/29/2016 5:57:30 PM
 /// </summary>
public class SdkRegisterConfirmController : MonoViewController<SdkRegisterConfirmView>
{
    private string _phone;
    public string Phone
    {
        set { _phone = value; }
        get { return _phone; }
    }

    public void InitData(string phone)
    {
        Phone = phone;
        StartCodeLimit();
    }

    protected override void RegisterEvent()
    {
        EventDelegate.Set(_view.BackBtn.onClick, () => { SdkProxyModule.CloseModuleSlow(SdkRegisterConfirmView.NAME); });
        EventDelegate.Set(_view.RegisterBtn.onClick, OnConfirm);
        EventDelegate.Set(_view.ReSendBtn.onClick, OnReSendCode);
    }


    public void OnConfirm()
    {
        string code = _view.CodeInput.value;
        string psd1 = _view.PasswordInput.value;
        string psd2 = _view.PasswordInput2.value;
        if (!SdkAccountModel.CheckVerifyCode(code) ||
            !SdkAccountModel.CheckPassword(psd1, psd2)
            )
        {
            return;
        }

        string password = MD5Hashing.HashString(psd1);
        SdkService.RequestRegister(_phone, password, SdkLoginMessage.Instance.GetUUID(),
            SdkAccountDto.AccountDto.AccountType.phone, code, (backcode) =>
            {
                if (backcode == 0)
                {
                    SdkProxyModule.OpenModule<SdkPlatformLoginController>(SdkPlatformLoginView.NAME);
                    GameDebuger.Log("注册成功");

                    string dataJson = "{}";
                    string json = "{\"type\":\"demiRegisterResult\",\"code\":\"0\",\"data\":" + dataJson + "}";
                    GameDebug.Log("demi register json=" + json);
                    SPSDK.OnSdkCallback(json);
                }
            });
    }

    public void OnReSendCode()
    {
        SdkService.RequestPhoneCode(_phone, (backcode) =>
        {
            if (backcode == 0)
            {
                if (BaseView.IsViewDestroy(View))
                    return;

                StartCodeLimit();
                GameDebuger.Log("重发验证码成功");
            }
        });
    }

    public void StartCodeLimit()
    {
        _view.ReSendBtn.GetComponent<BoxCollider>().enabled = false;
        _view.ReSendBtn.SetState(UIButtonColor.State.Disabled, true);

        CSTimer.Instance.SetupCoolDown("SdkRegisterCode", SdkAccountModel.CODE_LIMIT_SEC, OnLimitUpdate, OnLimitFinish);
    }

    public void OnLimitUpdate(float remainSec)
    {
        _view.SendCodeLbl.text = string.Format("{0}秒", Mathf.Ceil(remainSec));
    }

    public void OnLimitFinish()
    {
        _view.SendCodeLbl.text = "重发验证码";
        _view.ReSendBtn.GetComponent<BoxCollider>().enabled = true;
        _view.ReSendBtn.SetState(UIButtonColor.State.Normal, true);
    }

    protected override void OnDispose()
    {
        CSTimer.Instance.CancelCd("SdkRegisterCode");
    }
}
