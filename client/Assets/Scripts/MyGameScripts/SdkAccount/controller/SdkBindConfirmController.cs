// **********************************************************************
// Copyright (c) 2016 Baoyugame. All rights reserved.
// Author : Xianjian
// Created : 9/29/2016 5:18:22 PM
// Desc	: Auto generated by MarsZ. update this if need.
// **********************************************************************

using UnityEngine;
using SdkAccountDto;


/// <summary>
/// 绑定确认
/// </summary>
public class SdkBindConfirmController : MonoViewController<SdkBindConfirmView>
{
    private string _account;
    private AccountDto.AccountType _editType;

    /// <summary>
    /// 手机、邮箱绑定验证码确认,目前仅处理手机
    /// </summary>
    /// <param name="title"></param>
    /// <param name="success"></param>
    /// <param name="type"></param>
    public void InitData(string title, string account,
        AccountDto.AccountType type = AccountDto.AccountType.phone)
    { 
        _account = account;
        _editType = type;

        _view.TitleLabel.text = title;

        //通过短信界面打开
        StartCodeLimit();
    }

    protected override void RegisterEvent()
    {
        EventDelegate.Set(_view.BackBtn.onClick, () => { SdkProxyModule.CloseModuleSlow(SdkBindConfirmView.NAME); });
        EventDelegate.Set(_view.CommitBtn.onClick, CommitBtn);
        EventDelegate.Set(_view.ReSendCodeBtn.onClick, ResendCodeBtn);
    }

    public void CommitBtn()
    {
        string sid = SdkAccountModel.Instance.GetSid();
        if (string.IsNullOrEmpty(sid))
        {
            SdkProxyModule.ShowTips("未登录的情况下不能绑定");
            return;
        }

        string code = _view.CodeInput.value;
        string psd1 = _view.PasswordInput.value;
        string psd2 = _view.PasswordInput2.value;
        if (!SdkAccountModel.CheckVerifyCode(code) ||
            !SdkAccountModel.CheckPassword(psd1, psd2)
            )
        {
            return;
        }
        
        string password = MD5Hashing.HashString(psd1);
        SdkAccountModel.Instance.OnRequestBind(sid, _account, password, _editType, code);
    }

    public void ResendCodeBtn()
    {
        if(_editType == AccountDto.AccountType.phone)
        {
            SdkService.RequestPhoneCode(_account, (code) =>
            {
                if(code == 0)
                {
                    if (BaseView.IsViewDestroy(View))
                        return;

                    StartCodeLimit();
                    //SdkProxyModule.ShowTips("重新获取验证码成功");
                }
            });
        }
    }

    public void StartCodeLimit()
    {
        _view.ReSendCodeBtn.GetComponent<BoxCollider>().enabled = false;
        _view.ReSendCodeBtn.SetState(UIButtonColor.State.Disabled, true);

        CSTimer.Instance.SetupCoolDown("SdkBindCode", SdkAccountModel.CODE_LIMIT_SEC, OnLimitUpdate, OnLimitFinish);
    }

    public void OnLimitUpdate(float remainSec)
    {
        _view.SendCodeLbl.text = string.Format("{0}秒", Mathf.Ceil(remainSec));
    }

    public void OnLimitFinish()
    {
        _view.SendCodeLbl.text = "重发验证码";
        _view.ReSendCodeBtn.GetComponent<BoxCollider>().enabled = true;
        _view.ReSendCodeBtn.SetState(UIButtonColor.State.Normal, true);
    }

    protected override void OnDispose()
    {
        CSTimer.Instance.CancelCd("SdkBindCode");
    }
}
