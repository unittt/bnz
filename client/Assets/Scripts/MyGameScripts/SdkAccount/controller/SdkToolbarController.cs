// **********************************************************************
// Copyright (c) 2016 Baoyugame. All rights reserved.
// Author : Xianjian
// Created : 12/28/2016 11:55:58 AM
// Desc	: Auto generated by MarsZ. update this if need.
// **********************************************************************

using UnityEngine;
using System.Collections.Generic;
using System.Collections;

/// <summary>
/// This is the controller class for module SdkToolbar, use this to control the ui or view , such as it's init , update or dispose.
/// @Xianjian in 12/28/2016 11:55:58 AM
/// </summary>
public class SdkToolbarController : MonoViewController<SdkToolbar>
{
    #region interface functions

    public Vector3 dependBarPos;
    public Vector3 expendBarPos;

    private int _leftX;
    private int _rightX;
    private int _topY;
    private int _bottomY;
    private int _iconHalfWidth;
    private int _iconHalfHeight;

    //拖拽完检测
    private bool _checkDrag;
    //悬浮时，检测显示半圆,-1为不检测
    private int _checkHideSec = -1;
    private const int CHECKHIDE_TICK = 40;//4秒

    //打开界面后的一些显示准备，比如获取数据什么的
    public void Open()
    {
        View.transform.localPosition = dependBarPos;
        _checkHideSec = CHECKHIDE_TICK;//开始隐藏检测

        StartPositionCheckTimer();
    }

    //界面就绪后初始化，比如组件初始化
    protected override void InitView ()
    {
        float factor = UIRoot.GetPixelSizeAdjustment(this.gameObject);
        int width = (int)(Screen.width * factor);
        int height = (int)(Screen.height * factor);
        _leftX = -width / 2;
        _rightX = width / 2;
        _topY = height / 2;
        _bottomY = -height / 2;
        _iconHalfWidth = View.IconSprite.width / 2;
        _iconHalfHeight = View.IconSprite.height / 2;

        expendBarPos = new Vector3(_leftX + _iconHalfWidth + 140, _topY - _iconHalfHeight - 10, 0f);
        dependBarPos = new Vector3(_leftX + _iconHalfWidth, _topY - _iconHalfHeight - 10, 0f);
    }

    //添加事件监听
    protected override void RegisterEvent ()
    {
        EventDelegate.Set(View.AccountBtn.onClick, OnAccount);
        EventDelegate.Set(View.BackBtn.onClick, OnBack);
        //EventDelegate.Set(View.BBSBtn_UIButton.onClick, OpenBBS);

        EventDelegate.Set(View.IconTrigger.onClick, OnClickIcon);
        EventDelegate.Set(View.IconTrigger.onDragStart, OnIconDragStart);
        EventDelegate.Set(View.IconTrigger.onDragEnd, OnIconDragEnd);
    }

    //收到界面销毁后的回收处理，比如引用置空等
    protected override void OnDispose()
    {
        CSTimer.Instance.CancelTimer("sdktoolbarcheck");
    }
    
    private bool _isExpand;
    public void SetExpand(bool bExpand, System.Action onFinish=null)
    {
        if (_isExpand == bExpand)
        {
            if (onFinish != null)
                onFinish();
            return;
        }

        _isExpand = bExpand;

        if (bExpand)
        {
            View.IconDragObject.enabled = false;
            MoveToPoint(expendBarPos, () =>
            {
                ExpandBarToScale(new Vector3(1f, 1f, 1f), () =>
                {
                    ExpandOver();
                    if (onFinish != null)
                        onFinish();
                });
            });
        }
        else
        {
            ExpandBarToScale(new Vector3(0f, 1f, 1f), () =>
            {
                UnExpandOver();
                if (onFinish != null)
                    onFinish();
            });
        }
    }

    private bool _isExpandAni;
    private void ExpandBarToScale(Vector3 scale, System.Action onFinish)
    {
        _isExpandAni = true;
        var com = TweenScale.Begin(View.BarGo.gameObject, 0.5f, scale);
        com.method = UITweener.Method.Linear;
        EventDelegate.Set(com.onFinished, () =>
        {
            _isExpandAni = false;
            if (onFinish != null)
                onFinish();
        });
    }

    private bool _isMovingAni;
    private void MoveToPoint(Vector3 pos, System.Action onFinish=null)
    {
        _isMovingAni = true;

        //隐藏半透处理
        if (pos.x <= _leftX || pos.x >= _rightX)
            View.IconSprite.alpha = 0.5f;
        else
            View.IconSprite.alpha = 1f;

        var com = TweenPosition.Begin(View.gameObject, 0.5f, pos);
        com.method = UITweener.Method.Linear;
        EventDelegate.Set(com.onFinished, () =>
        {
            _isMovingAni = false;
            if (onFinish != null)
                onFinish();
        });
    }

    private void StartPositionCheckTimer()
    {
        CSTimer.Instance.SetupTimer("sdktoolbarcheck", PostionCheck);
    }

    private void StopPositionCheckTimer()
    {
        CSTimer.Instance.CancelTimer("sdktoolbarcheck");
    }

    private void PostionCheck()
    {
        if (!View.gameObject.activeSelf || _isExpand || IsAnimation())
            return;

        if (_checkDrag)
        {
            View.IconDragObject.CancelMovement();
            var pos = View.transform.localPosition;
            float destX;
            if (pos.x <= 0)
            {
                destX = _leftX + _iconHalfWidth;
            }
            else
            {
                destX = _rightX - _iconHalfWidth;
            }

            var destY = Mathf.Max(_bottomY + _iconHalfHeight, pos.y);
            destY = Mathf.Min(_topY - _iconHalfHeight, destY);

            var position = new Vector3(destX, destY, pos.z);
            dependBarPos = position;
            MoveToDepend();

            _checkDrag = false;
        }
        else if (_checkHideSec>=0)
        {
            if (_checkHideSec == 0)
            {
                var pos = View.transform.localPosition;
                float destX = pos.x;
                if (_leftX < pos.x && pos.x <= 0)
                {
                    destX = _leftX;
                }
                else if (0 < pos.x && pos.x < _rightX)
                {
                    destX = _rightX;
                }

                var hidePos = new Vector3(destX, pos.y, pos.z);
                MoveToPoint(hidePos);
            }
            _checkHideSec -= 1;
        }
    }

    #endregion

    #region Event Handlers

    private void MoveToDepend()
    {
        MoveToPoint(dependBarPos, () =>
        {
            _checkHideSec = CHECKHIDE_TICK;
        });
    }

    private void UnExpandOver()
    {
        View.IconDragObject.enabled = true;
        MoveToDepend();
    }

    private void ExpandOver()
    {
    }


    private bool CheckCanAction()
    {
        return !IsAnimation();
    }

    private bool IsAnimation()
    {
        return _isExpandAni || _isMovingAni || _isDraging;
    }

    private bool _isDraging;
    private void OnIconDragStart()
    {
        //可能是半透明情况下的拖动
        View.IconSprite.alpha = 1f;

        _isDraging = true;
    }

    private void OnIconDragEnd()
    {
        _isDraging = false;
        _checkDrag = true;
    }

    private void OnClickIcon()
    {
        if (!CheckCanAction())
            return;

        if (_isExpand)
        {
            //收起清理窗口
            SdkProxyModule.ClearModule();
        }

        SetExpand(!_isExpand);
    }

    private void OnAccount()
    {
        if (!CheckCanAction())
            return;

        if (SdkModuleMgr.Instance.IsModuleOpen(SdkGameCenterView.NAME))
        {
            SdkProxyModule.ClearModule();
        }
        else
        {
            SdkProxyModule.OpenGameCenter();
        }
    }

    private void OnBack()
    {
        if (!CheckCanAction())
            return;

        //收起清理窗口
        SdkProxyModule.ClearModule();
        SetExpand(false);
    }

    private void OpenBBS()
    {
        SdkProxyModule.OpenBBS();
    }

    #endregion
}
