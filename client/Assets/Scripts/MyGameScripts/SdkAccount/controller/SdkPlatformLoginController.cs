// **********************************************************************
// Copyright (c) 2016 Baoyugame. All rights reserved.
// Author : Xianjian
// Created : 9/29/2016 4:44:19 PM
// Desc	: Auto generated by MarsZ. update this if need.
// **********************************************************************

using UnityEngine;
using System.Collections.Generic;
using SdkAccountDto;

 /// <summary>
 /// This is the controller class for module PlatformLogin, use this to control the ui or view , such as it's init , update or dispose.
 /// @Xianjian in 9/29/2016 4:44:19 PM
 /// </summary>
public class SdkPlatformLoginController : MonoViewController<SdkPlatformLoginView>
{
    private List<SdkLastEnterAccountItemController> _lastItemList;

    protected override void InitView()
    {
        var lastEnterList = SdkAccountModel.Instance.GetLastEnterAccount();
        CreateLastListItem(lastEnterList.Count);
        RefreshAccount(lastEnterList);

#if UNITY_EDITOR || UNITY_STANDALONE_WIN
        View.AutoLoginCheckBox_UIToggle.value = false;
        View.AutoLoginCheckBox.SetActive(true);
#else
        View.AutoLoginCheckBox.SetActive(false);
#endif

    }

    protected override void RegisterEvent()
    {
        EventDelegate.Set(_view.BackBtn.onClick, () => { SdkProxyModule.CloseModuleSlow(SdkPlatformLoginView.NAME); });
        EventDelegate.Set(_view.RegisterBtn.onClick, OnRegister);
        EventDelegate.Set(_view.EnterBtn.onClick, OnEnterGame);
        EventDelegate.Set(_view.FindpasswordBtn.onClick, OnFindPassword);
        EventDelegate.Set(View.ExpandBtn.onClick, OnExpandBtn);

        UICamera.onClick += ClickEventHandler;
    }

    void ClickEventHandler(GameObject clickGo)
    {
        UIPanel panel = UIPanel.Find(clickGo.transform);
        if (panel != View.AccountGrid_UIPanel && clickGo != View.ExpandBtn.gameObject)
            SetAccountGridShow(false);
    }

    public void CreateLastListItem(int count = 3)
    {
        _lastItemList = new List<SdkLastEnterAccountItemController>();

        //xxj begin
        //GameObject prefab = AssetPipeline.ResourcePoolManager.Instance.LoadUI(SdkLastEnterAccountItem.NAME) as GameObject;
        //xxj end

        GameObject prefab = ResourceManager.Load(SdkLastEnterAccountItem.NAME) as GameObject;
        for (int i = 0; i < count; ++i)
        {
            var item = NGUITools.AddChild(_view.AccountGrid.gameObject, prefab);
            var com = new SdkLastEnterAccountItemController(item);
            com.InitItem(i, OnSelectItem, OnDeleteItem);
            _lastItemList.Add(com);
        }
    }

    public void RefreshAccount(List<string> lastList)
    {
        for (int i = 0; i < _lastItemList.Count; ++i)
        {
            var com = _lastItemList[i];
            if (i < lastList.Count)
            {
                com.RefreshShow(lastList[i]);
                com.gameObject.SetActive(true);
            }
            else com.gameObject.SetActive(false);
        }
    }


    public void OnSelectItem(int index)
    {
        var lastEnterList = SdkAccountModel.Instance.GetLastEnterAccount();
        View.AccoutInput.value = lastEnterList[index];
        SetAccountGridShow(false);
    }

    public void OnDeleteItem(int index)
    {
        SdkAccountModel.Instance.DelLastEnterAccount(index);
        SetAccountGridShow(false);

        var lastEnterList = SdkAccountModel.Instance.GetLastEnterAccount();
        RefreshAccount(lastEnterList);
    }

    private void SwitchAccountGridShow()
    {
        View.LastAccountGroupGo.SetActive(!View.LastAccountGroupGo.activeSelf);
    }

    private void SetAccountGridShow(bool bShow)
    {
        View.LastAccountGroupGo.SetActive(bShow);
    }


    public void OnFindPassword()
    {
        SdkProxyModule.OpenModule<SdkFindPasswordController>(SdkFindPasswordView.NAME);
    }

    public void OnRegister()
    {
        SdkProxyModule.OpenModule<SdkPlatformRegisterController>(SdkPlatformRegisterView.NAME);
    }

    public void OnEnterGame()
    {
        string account = _view.AccoutInput.value;
        string password = _view.PasswordInput.value;
        if(string.IsNullOrEmpty(account) || string.IsNullOrEmpty(password))
        {
            SdkProxyModule.ShowTips("账号或密码为空");
            return;
        }
        password = MD5Hashing.HashString(password);
        bool bSaveAccount = true;
        if (View.AutoLoginCheckBox.activeSelf)
        {
            bSaveAccount = View.AutoLoginCheckBox_UIToggle.value;
        }

        ServerManager.Instance.account = account;
        ServerManager.Instance.password = password;
        ServerManager.Instance.bSaveAccount = bSaveAccount;

        SdkAccountModel.Instance.DoLogin(account, password, AccountDto.AccountType.phone, bSaveAccount);
    }

     public void OnExpandBtn()
     {
        SwitchAccountGridShow();
     }

    protected override void OnDispose()
    {
        UICamera.onClick -= ClickEventHandler;
    }
}
