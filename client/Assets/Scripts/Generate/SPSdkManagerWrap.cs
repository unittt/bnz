//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class SPSdkManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(SPSdkManager), typeof(System.Object));
		L.RegFunction("IsDemiChannel", IsDemiChannel);
		L.RegFunction("CallbackInit", CallbackInit);
		L.RegFunction("CallbackLoginSuccess", CallbackLoginSuccess);
		L.RegFunction("CallbackLoginFail", CallbackLoginFail);
		L.RegFunction("CallbackLoginCancel", CallbackLoginCancel);
		L.RegFunction("CallbackLogout", CallbackLogout);
		L.RegFunction("CallbackNoExiterProvide", CallbackNoExiterProvide);
		L.RegFunction("CallbackExit", CallbackExit);
		L.RegFunction("CallbackPay", CallbackPay);
		L.RegFunction("Setup", Setup);
		L.RegFunction("Init", Init);
		L.RegFunction("Login", Login);
		L.RegFunction("Bind", Bind);
		L.RegFunction("IsSupportLogout", IsSupportLogout);
		L.RegFunction("Logout", Logout);
		L.RegFunction("DoInit", DoInit);
		L.RegFunction("DoLogin", DoLogin);
		L.RegFunction("DoLogout", DoLogout);
		L.RegFunction("DoExiter", DoExiter);
		L.RegFunction("DoExit", DoExit);
		L.RegFunction("DoReLogin", DoReLogin);
		L.RegFunction("TrackingioSetup", TrackingioSetup);
		L.RegFunction("TrackingioRegister", TrackingioRegister);
		L.RegFunction("TrackingioLogin", TrackingioLogin);
		L.RegFunction("GetAdAppIdForIOS", GetAdAppIdForIOS);
		L.RegFunction("GetAdActivityIdForIOS", GetAdActivityIdForIOS);
		L.RegFunction("GetTrackingIOAppId", GetTrackingIOAppId);
		L.RegFunction("SetDemiSdkUseNew", SetDemiSdkUseNew);
		L.RegFunction("SetDemiSdkCode", SetDemiSdkCode);
		L.RegFunction("SetDemiSdkCodePay", SetDemiSdkCodePay);
		L.RegFunction("DoDemiLoginForIOS", DoDemiLoginForIOS);
		L.RegFunction("DoDemiLoginForAndroid", DoDemiLoginForAndroid);
		L.RegFunction("Exit", Exit);
		L.RegFunction("Regster", Regster);
		L.RegFunction("UpdateUserInfo", UpdateUserInfo);
		L.RegFunction("SubmitRoleData", SubmitRoleData);
		L.RegFunction("GainGameCoin", GainGameCoin);
		L.RegFunction("ConsumeGameCoin", ConsumeGameCoin);
		L.RegFunction("GetChannel", GetChannel);
		L.RegFunction("GetSubChannel", GetSubChannel);
		L.RegFunction("GetPackId", GetPackId);
		L.RegFunction("GetMutilPackageId", GetMutilPackageId);
		L.RegFunction("IsSupportUserCenter", IsSupportUserCenter);
		L.RegFunction("EnterUserCenter", EnterUserCenter);
		L.RegFunction("IsSupportBBS", IsSupportBBS);
		L.RegFunction("EnterSdkBBS", EnterSdkBBS);
		L.RegFunction("IsShoumengChannel", IsShoumengChannel);
		L.RegFunction("IsShowMainUIBBSBtn", IsShowMainUIBBSBtn);
		L.RegFunction("IsSupportShowOrHideToolbar", IsSupportShowOrHideToolbar);
		L.RegFunction("ShowFloatToolBar", ShowFloatToolBar);
		L.RegFunction("HideFloatToolBar", HideFloatToolBar);
		L.RegFunction("DoPay", DoPay);
		L.RegFunction("IsKickClearSid", IsKickClearSid);
		L.RegFunction("DoIosWechatAliPay", DoIosWechatAliPay);
		L.RegFunction("CommitDoPay", CommitDoPay);
		L.RegFunction("LoadSPChannelConfig", LoadSPChannelConfig);
		L.RegFunction("GetChannelBundleId", GetChannelBundleId);
		L.RegFunction("ModifyTrackingIOHelperAppID", ModifyTrackingIOHelperAppID);
		L.RegFunction("IsHideAgreementTitle", IsHideAgreementTitle);
		L.RegFunction("IsUseDemiReyun", IsUseDemiReyun);
		L.RegFunction("New", _CreateSPSdkManager);
		L.RegVar("WaitingLoginResult", get_WaitingLoginResult, set_WaitingLoginResult);
		L.RegVar("Instance", get_Instance, null);
		L.RegVar("OnInitCallback", get_OnInitCallback, set_OnInitCallback);
		L.RegVar("OnLoginSuccess", get_OnLoginSuccess, set_OnLoginSuccess);
		L.RegVar("OnLoginFail", get_OnLoginFail, set_OnLoginFail);
		L.RegVar("OnLoginCancel", get_OnLoginCancel, set_OnLoginCancel);
		L.RegVar("OnReLogin", get_OnReLogin, set_OnReLogin);
		L.RegVar("OnLogoutNotify", get_OnLogoutNotify, set_OnLogoutNotify);
		L.RegVar("OnLogoutCallback", get_OnLogoutCallback, set_OnLogoutCallback);
		L.RegVar("OnExitCallback", get_OnExitCallback, set_OnExitCallback);
		L.RegVar("OnNoExiterProvideCallback", get_OnNoExiterProvideCallback, set_OnNoExiterProvideCallback);
		L.RegVar("OnPayCallback", get_OnPayCallback, set_OnPayCallback);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateSPSdkManager(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				SPSdkManager obj = new SPSdkManager();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: SPSdkManager.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsDemiChannel(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SPSdkManager obj = (SPSdkManager)ToLua.CheckObject(L, 1, typeof(SPSdkManager));
			bool o = obj.IsDemiChannel();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CallbackInit(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			SPSdkManager obj = (SPSdkManager)ToLua.CheckObject(L, 1, typeof(SPSdkManager));
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			obj.CallbackInit(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CallbackLoginSuccess(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			SPSdkManager obj = (SPSdkManager)ToLua.CheckObject(L, 1, typeof(SPSdkManager));
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			obj.CallbackLoginSuccess(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CallbackLoginFail(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SPSdkManager obj = (SPSdkManager)ToLua.CheckObject(L, 1, typeof(SPSdkManager));
			obj.CallbackLoginFail();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CallbackLoginCancel(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SPSdkManager obj = (SPSdkManager)ToLua.CheckObject(L, 1, typeof(SPSdkManager));
			obj.CallbackLoginCancel();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CallbackLogout(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			SPSdkManager obj = (SPSdkManager)ToLua.CheckObject(L, 1, typeof(SPSdkManager));
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.CallbackLogout(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CallbackNoExiterProvide(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SPSdkManager obj = (SPSdkManager)ToLua.CheckObject(L, 1, typeof(SPSdkManager));
			obj.CallbackNoExiterProvide();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CallbackExit(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			SPSdkManager obj = (SPSdkManager)ToLua.CheckObject(L, 1, typeof(SPSdkManager));
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.CallbackExit(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CallbackPay(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			SPSdkManager obj = (SPSdkManager)ToLua.CheckObject(L, 1, typeof(SPSdkManager));
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.CallbackPay(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Setup(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			SPSdkManager obj = (SPSdkManager)ToLua.CheckObject(L, 1, typeof(SPSdkManager));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.Setup(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Init(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SPSdkManager obj = (SPSdkManager)ToLua.CheckObject(L, 1, typeof(SPSdkManager));
			obj.Init();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Login(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SPSdkManager obj = (SPSdkManager)ToLua.CheckObject(L, 1, typeof(SPSdkManager));
			obj.Login();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Bind(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SPSdkManager obj = (SPSdkManager)ToLua.CheckObject(L, 1, typeof(SPSdkManager));
			obj.Bind();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsSupportLogout(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SPSdkManager obj = (SPSdkManager)ToLua.CheckObject(L, 1, typeof(SPSdkManager));
			bool o = obj.IsSupportLogout();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Logout(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			SPSdkManager obj = (SPSdkManager)ToLua.CheckObject(L, 1, typeof(SPSdkManager));
			System.Action<bool> arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Action<bool>)ToLua.CheckObject(L, 2, typeof(System.Action<bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Action<bool>), func) as System.Action<bool>;
			}

			obj.Logout(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DoInit(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SPSdkManager obj = (SPSdkManager)ToLua.CheckObject(L, 1, typeof(SPSdkManager));
			obj.DoInit();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DoLogin(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SPSdkManager obj = (SPSdkManager)ToLua.CheckObject(L, 1, typeof(SPSdkManager));
			obj.DoLogin();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DoLogout(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SPSdkManager obj = (SPSdkManager)ToLua.CheckObject(L, 1, typeof(SPSdkManager));
			obj.DoLogout();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DoExiter(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(SPSdkManager)))
			{
				SPSdkManager obj = (SPSdkManager)ToLua.ToObject(L, 1);
				obj.DoExiter();
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(SPSdkManager), typeof(System.Action<bool>), typeof(System.Action)))
			{
				SPSdkManager obj = (SPSdkManager)ToLua.ToObject(L, 1);
				System.Action<bool> arg0 = null;
				LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

				if (funcType2 != LuaTypes.LUA_TFUNCTION)
				{
					 arg0 = (System.Action<bool>)ToLua.ToObject(L, 2);
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 2);
					arg0 = DelegateFactory.CreateDelegate(typeof(System.Action<bool>), func) as System.Action<bool>;
				}

				System.Action arg1 = null;
				LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

				if (funcType3 != LuaTypes.LUA_TFUNCTION)
				{
					 arg1 = (System.Action)ToLua.ToObject(L, 3);
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 3);
					arg1 = DelegateFactory.CreateDelegate(typeof(System.Action), func) as System.Action;
				}

				obj.DoExiter(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: SPSdkManager.DoExiter");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DoExit(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SPSdkManager obj = (SPSdkManager)ToLua.CheckObject(L, 1, typeof(SPSdkManager));
			obj.DoExit();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DoReLogin(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SPSdkManager obj = (SPSdkManager)ToLua.CheckObject(L, 1, typeof(SPSdkManager));
			obj.DoReLogin();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TrackingioSetup(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SPSdkManager obj = (SPSdkManager)ToLua.CheckObject(L, 1, typeof(SPSdkManager));
			obj.TrackingioSetup();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TrackingioRegister(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			SPSdkManager obj = (SPSdkManager)ToLua.CheckObject(L, 1, typeof(SPSdkManager));
			string arg0 = ToLua.CheckString(L, 2);
			obj.TrackingioRegister(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TrackingioLogin(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			SPSdkManager obj = (SPSdkManager)ToLua.CheckObject(L, 1, typeof(SPSdkManager));
			string arg0 = ToLua.CheckString(L, 2);
			obj.TrackingioLogin(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAdAppIdForIOS(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SPSdkManager obj = (SPSdkManager)ToLua.CheckObject(L, 1, typeof(SPSdkManager));
			string o = obj.GetAdAppIdForIOS();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAdActivityIdForIOS(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SPSdkManager obj = (SPSdkManager)ToLua.CheckObject(L, 1, typeof(SPSdkManager));
			string o = obj.GetAdActivityIdForIOS();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTrackingIOAppId(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SPSdkManager obj = (SPSdkManager)ToLua.CheckObject(L, 1, typeof(SPSdkManager));
			string o = obj.GetTrackingIOAppId();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetDemiSdkUseNew(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			SPSdkManager obj = (SPSdkManager)ToLua.CheckObject(L, 1, typeof(SPSdkManager));
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.SetDemiSdkUseNew(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetDemiSdkCode(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			SPSdkManager obj = (SPSdkManager)ToLua.CheckObject(L, 1, typeof(SPSdkManager));
			string arg0 = ToLua.CheckString(L, 2);
			obj.SetDemiSdkCode(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetDemiSdkCodePay(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			SPSdkManager obj = (SPSdkManager)ToLua.CheckObject(L, 1, typeof(SPSdkManager));
			string arg0 = ToLua.CheckString(L, 2);
			obj.SetDemiSdkCodePay(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DoDemiLoginForIOS(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SPSdkManager obj = (SPSdkManager)ToLua.CheckObject(L, 1, typeof(SPSdkManager));
			obj.DoDemiLoginForIOS();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DoDemiLoginForAndroid(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SPSdkManager obj = (SPSdkManager)ToLua.CheckObject(L, 1, typeof(SPSdkManager));
			obj.DoDemiLoginForAndroid();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Exit(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SPSdkManager obj = (SPSdkManager)ToLua.CheckObject(L, 1, typeof(SPSdkManager));
			obj.Exit();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Regster(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			SPSdkManager obj = (SPSdkManager)ToLua.CheckObject(L, 1, typeof(SPSdkManager));
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			obj.Regster(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UpdateUserInfo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			SPSdkManager obj = (SPSdkManager)ToLua.CheckObject(L, 1, typeof(SPSdkManager));
			string arg0 = ToLua.CheckString(L, 2);
			obj.UpdateUserInfo(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SubmitRoleData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			SPSdkManager obj = (SPSdkManager)ToLua.CheckObject(L, 1, typeof(SPSdkManager));
			string arg0 = ToLua.CheckString(L, 2);
			obj.SubmitRoleData(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GainGameCoin(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 7);
			SPSdkManager obj = (SPSdkManager)ToLua.CheckObject(L, 1, typeof(SPSdkManager));
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			string arg2 = ToLua.CheckString(L, 4);
			string arg3 = ToLua.CheckString(L, 5);
			string arg4 = ToLua.CheckString(L, 6);
			string arg5 = ToLua.CheckString(L, 7);
			obj.GainGameCoin(arg0, arg1, arg2, arg3, arg4, arg5);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ConsumeGameCoin(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 7);
			SPSdkManager obj = (SPSdkManager)ToLua.CheckObject(L, 1, typeof(SPSdkManager));
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			string arg2 = ToLua.CheckString(L, 4);
			string arg3 = ToLua.CheckString(L, 5);
			string arg4 = ToLua.CheckString(L, 6);
			string arg5 = ToLua.CheckString(L, 7);
			obj.ConsumeGameCoin(arg0, arg1, arg2, arg3, arg4, arg5);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetChannel(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SPSdkManager obj = (SPSdkManager)ToLua.CheckObject(L, 1, typeof(SPSdkManager));
			string o = obj.GetChannel();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetSubChannel(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SPSdkManager obj = (SPSdkManager)ToLua.CheckObject(L, 1, typeof(SPSdkManager));
			string o = obj.GetSubChannel();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetPackId(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SPSdkManager obj = (SPSdkManager)ToLua.CheckObject(L, 1, typeof(SPSdkManager));
			string o = obj.GetPackId();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetMutilPackageId(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SPSdkManager obj = (SPSdkManager)ToLua.CheckObject(L, 1, typeof(SPSdkManager));
			string o = obj.GetMutilPackageId();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsSupportUserCenter(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SPSdkManager obj = (SPSdkManager)ToLua.CheckObject(L, 1, typeof(SPSdkManager));
			bool o = obj.IsSupportUserCenter();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EnterUserCenter(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SPSdkManager obj = (SPSdkManager)ToLua.CheckObject(L, 1, typeof(SPSdkManager));
			obj.EnterUserCenter();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsSupportBBS(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SPSdkManager obj = (SPSdkManager)ToLua.CheckObject(L, 1, typeof(SPSdkManager));
			bool o = obj.IsSupportBBS();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EnterSdkBBS(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SPSdkManager obj = (SPSdkManager)ToLua.CheckObject(L, 1, typeof(SPSdkManager));
			obj.EnterSdkBBS();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsShoumengChannel(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SPSdkManager obj = (SPSdkManager)ToLua.CheckObject(L, 1, typeof(SPSdkManager));
			bool o = obj.IsShoumengChannel();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsShowMainUIBBSBtn(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SPSdkManager obj = (SPSdkManager)ToLua.CheckObject(L, 1, typeof(SPSdkManager));
			bool o = obj.IsShowMainUIBBSBtn();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsSupportShowOrHideToolbar(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SPSdkManager obj = (SPSdkManager)ToLua.CheckObject(L, 1, typeof(SPSdkManager));
			bool o = obj.IsSupportShowOrHideToolbar();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ShowFloatToolBar(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SPSdkManager obj = (SPSdkManager)ToLua.CheckObject(L, 1, typeof(SPSdkManager));
			obj.ShowFloatToolBar();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int HideFloatToolBar(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SPSdkManager obj = (SPSdkManager)ToLua.CheckObject(L, 1, typeof(SPSdkManager));
			obj.HideFloatToolBar();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DoPay(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			SPSdkManager obj = (SPSdkManager)ToLua.CheckObject(L, 1, typeof(SPSdkManager));
			string arg0 = ToLua.CheckString(L, 2);
			System.Action<bool> arg1 = null;
			LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

			if (funcType3 != LuaTypes.LUA_TFUNCTION)
			{
				 arg1 = (System.Action<bool>)ToLua.CheckObject(L, 3, typeof(System.Action<bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 3);
				arg1 = DelegateFactory.CreateDelegate(typeof(System.Action<bool>), func) as System.Action<bool>;
			}

			obj.DoPay(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsKickClearSid(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SPSdkManager obj = (SPSdkManager)ToLua.CheckObject(L, 1, typeof(SPSdkManager));
			bool o = obj.IsKickClearSid();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DoIosWechatAliPay(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			SPSdkManager obj = (SPSdkManager)ToLua.CheckObject(L, 1, typeof(SPSdkManager));
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			System.Action<bool> arg2 = null;
			LuaTypes funcType4 = LuaDLL.lua_type(L, 4);

			if (funcType4 != LuaTypes.LUA_TFUNCTION)
			{
				 arg2 = (System.Action<bool>)ToLua.CheckObject(L, 4, typeof(System.Action<bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 4);
				arg2 = DelegateFactory.CreateDelegate(typeof(System.Action<bool>), func) as System.Action<bool>;
			}

			obj.DoIosWechatAliPay(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CommitDoPay(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			SPSdkManager obj = (SPSdkManager)ToLua.CheckObject(L, 1, typeof(SPSdkManager));
			string arg0 = ToLua.CheckString(L, 2);
			obj.CommitDoPay(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadSPChannelConfig(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Action<bool> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Action<bool>)ToLua.CheckObject(L, 1, typeof(System.Action<bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Action<bool>), func) as System.Action<bool>;
			}

			SPSdkManager.LoadSPChannelConfig(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetChannelBundleId(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			string o = SPSdkManager.GetChannelBundleId(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ModifyTrackingIOHelperAppID(IntPtr L)
	{
        try
        {
            ToLua.CheckArgsCount(L, 2);
            SPSdkManager obj = (SPSdkManager)ToLua.CheckObject(L, 1, typeof(SPSdkManager));
            int out_len = 0;
            string arg0 = (string)LuaDLL.luaL_checklstring(L, 2, out out_len);
            SPSdkManager.ModifyTrackingIOHelperAppID(arg0);
            return 0;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsHideAgreementTitle(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			bool o = SPSdkManager.IsHideAgreementTitle();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsUseDemiReyun(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SPSdkManager obj = (SPSdkManager)ToLua.CheckObject(L, 1, typeof(SPSdkManager));
			bool o = obj.IsUseDemiReyun();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_WaitingLoginResult(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SPSdkManager obj = (SPSdkManager)o;
			bool ret = obj.WaitingLoginResult;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index WaitingLoginResult on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Instance(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, SPSdkManager.Instance);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnInitCallback(IntPtr L)
	{
		ToLua.Push(L, new EventObject("SPSdkManager.OnInitCallback"));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnLoginSuccess(IntPtr L)
	{
		ToLua.Push(L, new EventObject("SPSdkManager.OnLoginSuccess"));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnLoginFail(IntPtr L)
	{
		ToLua.Push(L, new EventObject("SPSdkManager.OnLoginFail"));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnLoginCancel(IntPtr L)
	{
		ToLua.Push(L, new EventObject("SPSdkManager.OnLoginCancel"));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnReLogin(IntPtr L)
	{
		ToLua.Push(L, new EventObject("SPSdkManager.OnReLogin"));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnLogoutNotify(IntPtr L)
	{
		ToLua.Push(L, new EventObject("SPSdkManager.OnLogoutNotify"));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnLogoutCallback(IntPtr L)
	{
		ToLua.Push(L, new EventObject("SPSdkManager.OnLogoutCallback"));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnExitCallback(IntPtr L)
	{
		ToLua.Push(L, new EventObject("SPSdkManager.OnExitCallback"));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnNoExiterProvideCallback(IntPtr L)
	{
		ToLua.Push(L, new EventObject("SPSdkManager.OnNoExiterProvideCallback"));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnPayCallback(IntPtr L)
	{
		ToLua.Push(L, new EventObject("SPSdkManager.OnPayCallback"));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_WaitingLoginResult(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SPSdkManager obj = (SPSdkManager)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.WaitingLoginResult = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index WaitingLoginResult on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnInitCallback(IntPtr L)
	{
		try
		{
			SPSdkManager obj = (SPSdkManager)ToLua.CheckObject(L, 1, typeof(SPSdkManager));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'SPSdkManager.OnInitCallback' can only appear on the left hand side of += or -= when used outside of the type 'SPSdkManager'");
			}

			if (arg0.op == EventOp.Add)
			{
				System.Action<bool,string> ev = (System.Action<bool,string>)DelegateFactory.CreateDelegate(typeof(System.Action<bool,string>), arg0.func);
				obj.OnInitCallback += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				System.Action<bool,string> ev = (System.Action<bool,string>)LuaMisc.GetEventHandler(obj, typeof(SPSdkManager), "OnInitCallback");
				Delegate[] ds = ev.GetInvocationList();
				LuaState state = LuaState.Get(L);

				for (int i = 0; i < ds.Length; i++)
				{
					ev = (System.Action<bool,string>)ds[i];
					LuaDelegate ld = ev.Target as LuaDelegate;

					if (ld != null && ld.func == arg0.func)
					{
						obj.OnInitCallback -= ev;
						state.DelayDispose(ld.func);
						break;
					}
				}

				arg0.func.Dispose();
			}

			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnLoginSuccess(IntPtr L)
	{
		try
		{
			SPSdkManager obj = (SPSdkManager)ToLua.CheckObject(L, 1, typeof(SPSdkManager));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'SPSdkManager.OnLoginSuccess' can only appear on the left hand side of += or -= when used outside of the type 'SPSdkManager'");
			}

			if (arg0.op == EventOp.Add)
			{
				System.Action<bool,string> ev = (System.Action<bool,string>)DelegateFactory.CreateDelegate(typeof(System.Action<bool,string>), arg0.func);
				obj.OnLoginSuccess += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				System.Action<bool,string> ev = (System.Action<bool,string>)LuaMisc.GetEventHandler(obj, typeof(SPSdkManager), "OnLoginSuccess");
				Delegate[] ds = ev.GetInvocationList();
				LuaState state = LuaState.Get(L);

				for (int i = 0; i < ds.Length; i++)
				{
					ev = (System.Action<bool,string>)ds[i];
					LuaDelegate ld = ev.Target as LuaDelegate;

					if (ld != null && ld.func == arg0.func)
					{
						obj.OnLoginSuccess -= ev;
						state.DelayDispose(ld.func);
						break;
					}
				}

				arg0.func.Dispose();
			}

			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnLoginFail(IntPtr L)
	{
		try
		{
			SPSdkManager obj = (SPSdkManager)ToLua.CheckObject(L, 1, typeof(SPSdkManager));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'SPSdkManager.OnLoginFail' can only appear on the left hand side of += or -= when used outside of the type 'SPSdkManager'");
			}

			if (arg0.op == EventOp.Add)
			{
				System.Action ev = (System.Action)DelegateFactory.CreateDelegate(typeof(System.Action), arg0.func);
				obj.OnLoginFail += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				System.Action ev = (System.Action)LuaMisc.GetEventHandler(obj, typeof(SPSdkManager), "OnLoginFail");
				Delegate[] ds = ev.GetInvocationList();
				LuaState state = LuaState.Get(L);

				for (int i = 0; i < ds.Length; i++)
				{
					ev = (System.Action)ds[i];
					LuaDelegate ld = ev.Target as LuaDelegate;

					if (ld != null && ld.func == arg0.func)
					{
						obj.OnLoginFail -= ev;
						state.DelayDispose(ld.func);
						break;
					}
				}

				arg0.func.Dispose();
			}

			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnLoginCancel(IntPtr L)
	{
		try
		{
			SPSdkManager obj = (SPSdkManager)ToLua.CheckObject(L, 1, typeof(SPSdkManager));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'SPSdkManager.OnLoginCancel' can only appear on the left hand side of += or -= when used outside of the type 'SPSdkManager'");
			}

			if (arg0.op == EventOp.Add)
			{
				System.Action ev = (System.Action)DelegateFactory.CreateDelegate(typeof(System.Action), arg0.func);
				obj.OnLoginCancel += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				System.Action ev = (System.Action)LuaMisc.GetEventHandler(obj, typeof(SPSdkManager), "OnLoginCancel");
				Delegate[] ds = ev.GetInvocationList();
				LuaState state = LuaState.Get(L);

				for (int i = 0; i < ds.Length; i++)
				{
					ev = (System.Action)ds[i];
					LuaDelegate ld = ev.Target as LuaDelegate;

					if (ld != null && ld.func == arg0.func)
					{
						obj.OnLoginCancel -= ev;
						state.DelayDispose(ld.func);
						break;
					}
				}

				arg0.func.Dispose();
			}

			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnReLogin(IntPtr L)
	{
		try
		{
			SPSdkManager obj = (SPSdkManager)ToLua.CheckObject(L, 1, typeof(SPSdkManager));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'SPSdkManager.OnReLogin' can only appear on the left hand side of += or -= when used outside of the type 'SPSdkManager'");
			}

			if (arg0.op == EventOp.Add)
			{
				System.Action ev = (System.Action)DelegateFactory.CreateDelegate(typeof(System.Action), arg0.func);
				obj.OnReLogin += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				System.Action ev = (System.Action)LuaMisc.GetEventHandler(obj, typeof(SPSdkManager), "OnReLogin");
				Delegate[] ds = ev.GetInvocationList();
				LuaState state = LuaState.Get(L);

				for (int i = 0; i < ds.Length; i++)
				{
					ev = (System.Action)ds[i];
					LuaDelegate ld = ev.Target as LuaDelegate;

					if (ld != null && ld.func == arg0.func)
					{
						obj.OnReLogin -= ev;
						state.DelayDispose(ld.func);
						break;
					}
				}

				arg0.func.Dispose();
			}

			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnLogoutNotify(IntPtr L)
	{
		try
		{
			SPSdkManager obj = (SPSdkManager)ToLua.CheckObject(L, 1, typeof(SPSdkManager));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'SPSdkManager.OnLogoutNotify' can only appear on the left hand side of += or -= when used outside of the type 'SPSdkManager'");
			}

			if (arg0.op == EventOp.Add)
			{
				System.Action<bool> ev = (System.Action<bool>)DelegateFactory.CreateDelegate(typeof(System.Action<bool>), arg0.func);
				obj.OnLogoutNotify += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				System.Action<bool> ev = (System.Action<bool>)LuaMisc.GetEventHandler(obj, typeof(SPSdkManager), "OnLogoutNotify");
				Delegate[] ds = ev.GetInvocationList();
				LuaState state = LuaState.Get(L);

				for (int i = 0; i < ds.Length; i++)
				{
					ev = (System.Action<bool>)ds[i];
					LuaDelegate ld = ev.Target as LuaDelegate;

					if (ld != null && ld.func == arg0.func)
					{
						obj.OnLogoutNotify -= ev;
						state.DelayDispose(ld.func);
						break;
					}
				}

				arg0.func.Dispose();
			}

			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnLogoutCallback(IntPtr L)
	{
		try
		{
			SPSdkManager obj = (SPSdkManager)ToLua.CheckObject(L, 1, typeof(SPSdkManager));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'SPSdkManager.OnLogoutCallback' can only appear on the left hand side of += or -= when used outside of the type 'SPSdkManager'");
			}

			if (arg0.op == EventOp.Add)
			{
				System.Action<bool> ev = (System.Action<bool>)DelegateFactory.CreateDelegate(typeof(System.Action<bool>), arg0.func);
				obj.OnLogoutCallback += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				System.Action<bool> ev = (System.Action<bool>)LuaMisc.GetEventHandler(obj, typeof(SPSdkManager), "OnLogoutCallback");
				Delegate[] ds = ev.GetInvocationList();
				LuaState state = LuaState.Get(L);

				for (int i = 0; i < ds.Length; i++)
				{
					ev = (System.Action<bool>)ds[i];
					LuaDelegate ld = ev.Target as LuaDelegate;

					if (ld != null && ld.func == arg0.func)
					{
						obj.OnLogoutCallback -= ev;
						state.DelayDispose(ld.func);
						break;
					}
				}

				arg0.func.Dispose();
			}

			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnExitCallback(IntPtr L)
	{
		try
		{
			SPSdkManager obj = (SPSdkManager)ToLua.CheckObject(L, 1, typeof(SPSdkManager));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'SPSdkManager.OnExitCallback' can only appear on the left hand side of += or -= when used outside of the type 'SPSdkManager'");
			}

			if (arg0.op == EventOp.Add)
			{
				System.Action<bool> ev = (System.Action<bool>)DelegateFactory.CreateDelegate(typeof(System.Action<bool>), arg0.func);
				obj.OnExitCallback += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				System.Action<bool> ev = (System.Action<bool>)LuaMisc.GetEventHandler(obj, typeof(SPSdkManager), "OnExitCallback");
				Delegate[] ds = ev.GetInvocationList();
				LuaState state = LuaState.Get(L);

				for (int i = 0; i < ds.Length; i++)
				{
					ev = (System.Action<bool>)ds[i];
					LuaDelegate ld = ev.Target as LuaDelegate;

					if (ld != null && ld.func == arg0.func)
					{
						obj.OnExitCallback -= ev;
						state.DelayDispose(ld.func);
						break;
					}
				}

				arg0.func.Dispose();
			}

			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnNoExiterProvideCallback(IntPtr L)
	{
		try
		{
			SPSdkManager obj = (SPSdkManager)ToLua.CheckObject(L, 1, typeof(SPSdkManager));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'SPSdkManager.OnNoExiterProvideCallback' can only appear on the left hand side of += or -= when used outside of the type 'SPSdkManager'");
			}

			if (arg0.op == EventOp.Add)
			{
				System.Action ev = (System.Action)DelegateFactory.CreateDelegate(typeof(System.Action), arg0.func);
				obj.OnNoExiterProvideCallback += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				System.Action ev = (System.Action)LuaMisc.GetEventHandler(obj, typeof(SPSdkManager), "OnNoExiterProvideCallback");
				Delegate[] ds = ev.GetInvocationList();
				LuaState state = LuaState.Get(L);

				for (int i = 0; i < ds.Length; i++)
				{
					ev = (System.Action)ds[i];
					LuaDelegate ld = ev.Target as LuaDelegate;

					if (ld != null && ld.func == arg0.func)
					{
						obj.OnNoExiterProvideCallback -= ev;
						state.DelayDispose(ld.func);
						break;
					}
				}

				arg0.func.Dispose();
			}

			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnPayCallback(IntPtr L)
	{
		try
		{
			SPSdkManager obj = (SPSdkManager)ToLua.CheckObject(L, 1, typeof(SPSdkManager));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'SPSdkManager.OnPayCallback' can only appear on the left hand side of += or -= when used outside of the type 'SPSdkManager'");
			}

			if (arg0.op == EventOp.Add)
			{
				System.Action<bool> ev = (System.Action<bool>)DelegateFactory.CreateDelegate(typeof(System.Action<bool>), arg0.func);
				obj.OnPayCallback += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				System.Action<bool> ev = (System.Action<bool>)LuaMisc.GetEventHandler(obj, typeof(SPSdkManager), "OnPayCallback");
				Delegate[] ds = ev.GetInvocationList();
				LuaState state = LuaState.Get(L);

				for (int i = 0; i < ds.Length; i++)
				{
					ev = (System.Action<bool>)ds[i];
					LuaDelegate ld = ev.Target as LuaDelegate;

					if (ld != null && ld.func == arg0.func)
					{
						obj.OnPayCallback -= ev;
						state.DelayDispose(ld.func);
						break;
					}
				}

				arg0.func.Dispose();
			}

			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

