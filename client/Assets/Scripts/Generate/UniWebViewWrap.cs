//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UniWebViewWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UniWebView), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("SetUserAgent", SetUserAgent);
		L.RegFunction("ResetUserAgent", ResetUserAgent);
		L.RegFunction("Load", Load);
		L.RegFunction("LoadHTMLString", LoadHTMLString);
		L.RegFunction("Reload", Reload);
		L.RegFunction("Stop", Stop);
		L.RegFunction("Show", Show);
		L.RegFunction("Hide", Hide);
		L.RegFunction("EvaluatingJavaScript", EvaluatingJavaScript);
		L.RegFunction("AddJavaScript", AddJavaScript);
		L.RegFunction("CleanCache", CleanCache);
		L.RegFunction("CleanCookie", CleanCookie);
		L.RegFunction("SetBackgroundColor", SetBackgroundColor);
		L.RegFunction("ShowToolBar", ShowToolBar);
		L.RegFunction("HideToolBar", HideToolBar);
		L.RegFunction("SetShowSpinnerWhenLoading", SetShowSpinnerWhenLoading);
		L.RegFunction("SetSpinnerLabelText", SetSpinnerLabelText);
		L.RegFunction("SetUseWideViewPort", SetUseWideViewPort);
		L.RegFunction("SetUseLoadWithOverviewMode", SetUseLoadWithOverviewMode);
		L.RegFunction("CanGoBack", CanGoBack);
		L.RegFunction("CanGoForward", CanGoForward);
		L.RegFunction("GoBack", GoBack);
		L.RegFunction("GoForward", GoForward);
		L.RegFunction("AddPermissionRequestTrustSite", AddPermissionRequestTrustSite);
		L.RegFunction("AddUrlScheme", AddUrlScheme);
		L.RegFunction("RemoveUrlScheme", RemoveUrlScheme);
		L.RegFunction("SetHeaderField", SetHeaderField);
		L.RegFunction("SetVerticalScrollBarShow", SetVerticalScrollBarShow);
		L.RegFunction("SetHorizontalScrollBarShow", SetHorizontalScrollBarShow);
		L.RegVar("url", get_url, set_url);
		L.RegVar("loadOnStart", get_loadOnStart, set_loadOnStart);
		L.RegVar("autoShowWhenLoadComplete", get_autoShowWhenLoadComplete, set_autoShowWhenLoadComplete);
		L.RegVar("toolBarShow", get_toolBarShow, set_toolBarShow);
		L.RegVar("insets", get_insets, set_insets);
		L.RegVar("currentUrl", get_currentUrl, null);
		L.RegVar("backButtonEnable", get_backButtonEnable, set_backButtonEnable);
		L.RegVar("bouncesEnable", get_bouncesEnable, set_bouncesEnable);
		L.RegVar("zoomEnable", get_zoomEnable, set_zoomEnable);
		L.RegVar("userAgent", get_userAgent, null);
		L.RegVar("alpha", get_alpha, set_alpha);
		L.RegVar("immersiveMode", get_immersiveMode, set_immersiveMode);
		L.RegVar("OnLoadComplete", get_OnLoadComplete, set_OnLoadComplete);
		L.RegVar("OnLoadBegin", get_OnLoadBegin, set_OnLoadBegin);
		L.RegVar("OnReceivedMessage", get_OnReceivedMessage, set_OnReceivedMessage);
		L.RegVar("OnEvalJavaScriptFinished", get_OnEvalJavaScriptFinished, set_OnEvalJavaScriptFinished);
		L.RegVar("OnWebViewShouldClose", get_OnWebViewShouldClose, set_OnWebViewShouldClose);
		L.RegVar("OnReceivedKeyCode", get_OnReceivedKeyCode, set_OnReceivedKeyCode);
		L.RegVar("InsetsForScreenOreitation", get_InsetsForScreenOreitation, set_InsetsForScreenOreitation);
		L.RegFunction("InsetsForScreenOreitationDelegate", UniWebView_InsetsForScreenOreitationDelegate);
		L.RegFunction("ReceivedKeyCodeDelegate", UniWebView_ReceivedKeyCodeDelegate);
		L.RegFunction("WebViewShouldCloseDelegate", UniWebView_WebViewShouldCloseDelegate);
		L.RegFunction("EvalJavaScriptFinishedDelegate", UniWebView_EvalJavaScriptFinishedDelegate);
		L.RegFunction("ReceivedMessageDelegate", UniWebView_ReceivedMessageDelegate);
		L.RegFunction("LoadBeginDelegate", UniWebView_LoadBeginDelegate);
		L.RegFunction("LoadCompleteDelegate", UniWebView_LoadCompleteDelegate);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetUserAgent(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			UniWebView.SetUserAgent(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ResetUserAgent(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			UniWebView.ResetUserAgent();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Load(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(UniWebView)))
			{
				UniWebView obj = (UniWebView)ToLua.ToObject(L, 1);
				obj.Load();
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(UniWebView), typeof(string)))
			{
				UniWebView obj = (UniWebView)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				obj.Load(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UniWebView.Load");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadHTMLString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UniWebView obj = (UniWebView)ToLua.CheckObject(L, 1, typeof(UniWebView));
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			obj.LoadHTMLString(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Reload(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UniWebView obj = (UniWebView)ToLua.CheckObject(L, 1, typeof(UniWebView));
			obj.Reload();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Stop(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UniWebView obj = (UniWebView)ToLua.CheckObject(L, 1, typeof(UniWebView));
			obj.Stop();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Show(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 5);
			UniWebView obj = (UniWebView)ToLua.CheckObject(L, 1, typeof(UniWebView));
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			UniWebViewTransitionEdge arg1 = (UniWebViewTransitionEdge)(int)LuaDLL.lua_tonumber(L, 3);
			float arg2 = (float)LuaDLL.luaL_checknumber(L, 4);
			System.Action arg3 = null;
			LuaTypes funcType5 = LuaDLL.lua_type(L, 5);

			if (funcType5 != LuaTypes.LUA_TFUNCTION)
			{
				 arg3 = (System.Action)ToLua.CheckObject(L, 5, typeof(System.Action));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 5);
				arg3 = DelegateFactory.CreateDelegate(typeof(System.Action), func) as System.Action;
			}

			obj.Show(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Hide(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 5);
			UniWebView obj = (UniWebView)ToLua.CheckObject(L, 1, typeof(UniWebView));
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			UniWebViewTransitionEdge arg1 = (UniWebViewTransitionEdge)(int)LuaDLL.lua_tonumber(L, 3);
			float arg2 = (float)LuaDLL.luaL_checknumber(L, 4);
			System.Action arg3 = null;
			LuaTypes funcType5 = LuaDLL.lua_type(L, 5);

			if (funcType5 != LuaTypes.LUA_TFUNCTION)
			{
				 arg3 = (System.Action)ToLua.CheckObject(L, 5, typeof(System.Action));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 5);
				arg3 = DelegateFactory.CreateDelegate(typeof(System.Action), func) as System.Action;
			}

			obj.Hide(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EvaluatingJavaScript(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UniWebView obj = (UniWebView)ToLua.CheckObject(L, 1, typeof(UniWebView));
			string arg0 = ToLua.CheckString(L, 2);
			obj.EvaluatingJavaScript(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddJavaScript(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UniWebView obj = (UniWebView)ToLua.CheckObject(L, 1, typeof(UniWebView));
			string arg0 = ToLua.CheckString(L, 2);
			obj.AddJavaScript(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CleanCache(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UniWebView obj = (UniWebView)ToLua.CheckObject(L, 1, typeof(UniWebView));
			obj.CleanCache();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CleanCookie(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UniWebView obj = (UniWebView)ToLua.CheckObject(L, 1, typeof(UniWebView));
			string arg0 = ToLua.CheckString(L, 2);
			obj.CleanCookie(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetBackgroundColor(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UniWebView obj = (UniWebView)ToLua.CheckObject(L, 1, typeof(UniWebView));
			UnityEngine.Color arg0 = ToLua.ToColor(L, 2);
			obj.SetBackgroundColor(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ShowToolBar(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UniWebView obj = (UniWebView)ToLua.CheckObject(L, 1, typeof(UniWebView));
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.ShowToolBar(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int HideToolBar(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UniWebView obj = (UniWebView)ToLua.CheckObject(L, 1, typeof(UniWebView));
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.HideToolBar(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetShowSpinnerWhenLoading(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UniWebView obj = (UniWebView)ToLua.CheckObject(L, 1, typeof(UniWebView));
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.SetShowSpinnerWhenLoading(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetSpinnerLabelText(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UniWebView obj = (UniWebView)ToLua.CheckObject(L, 1, typeof(UniWebView));
			string arg0 = ToLua.CheckString(L, 2);
			obj.SetSpinnerLabelText(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetUseWideViewPort(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UniWebView obj = (UniWebView)ToLua.CheckObject(L, 1, typeof(UniWebView));
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.SetUseWideViewPort(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetUseLoadWithOverviewMode(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UniWebView obj = (UniWebView)ToLua.CheckObject(L, 1, typeof(UniWebView));
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.SetUseLoadWithOverviewMode(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CanGoBack(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UniWebView obj = (UniWebView)ToLua.CheckObject(L, 1, typeof(UniWebView));
			bool o = obj.CanGoBack();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CanGoForward(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UniWebView obj = (UniWebView)ToLua.CheckObject(L, 1, typeof(UniWebView));
			bool o = obj.CanGoForward();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GoBack(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UniWebView obj = (UniWebView)ToLua.CheckObject(L, 1, typeof(UniWebView));
			obj.GoBack();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GoForward(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UniWebView obj = (UniWebView)ToLua.CheckObject(L, 1, typeof(UniWebView));
			obj.GoForward();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddPermissionRequestTrustSite(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UniWebView obj = (UniWebView)ToLua.CheckObject(L, 1, typeof(UniWebView));
			string arg0 = ToLua.CheckString(L, 2);
			obj.AddPermissionRequestTrustSite(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddUrlScheme(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UniWebView obj = (UniWebView)ToLua.CheckObject(L, 1, typeof(UniWebView));
			string arg0 = ToLua.CheckString(L, 2);
			obj.AddUrlScheme(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveUrlScheme(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UniWebView obj = (UniWebView)ToLua.CheckObject(L, 1, typeof(UniWebView));
			string arg0 = ToLua.CheckString(L, 2);
			obj.RemoveUrlScheme(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetHeaderField(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UniWebView obj = (UniWebView)ToLua.CheckObject(L, 1, typeof(UniWebView));
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			obj.SetHeaderField(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetVerticalScrollBarShow(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UniWebView obj = (UniWebView)ToLua.CheckObject(L, 1, typeof(UniWebView));
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.SetVerticalScrollBarShow(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetHorizontalScrollBarShow(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UniWebView obj = (UniWebView)ToLua.CheckObject(L, 1, typeof(UniWebView));
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.SetHorizontalScrollBarShow(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_url(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UniWebView obj = (UniWebView)o;
			string ret = obj.url;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index url on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_loadOnStart(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UniWebView obj = (UniWebView)o;
			bool ret = obj.loadOnStart;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index loadOnStart on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_autoShowWhenLoadComplete(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UniWebView obj = (UniWebView)o;
			bool ret = obj.autoShowWhenLoadComplete;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index autoShowWhenLoadComplete on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_toolBarShow(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UniWebView obj = (UniWebView)o;
			bool ret = obj.toolBarShow;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index toolBarShow on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_insets(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UniWebView obj = (UniWebView)o;
			UniWebViewEdgeInsets ret = obj.insets;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index insets on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_currentUrl(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UniWebView obj = (UniWebView)o;
			string ret = obj.currentUrl;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index currentUrl on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_backButtonEnable(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UniWebView obj = (UniWebView)o;
			bool ret = obj.backButtonEnable;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index backButtonEnable on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_bouncesEnable(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UniWebView obj = (UniWebView)o;
			bool ret = obj.bouncesEnable;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index bouncesEnable on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_zoomEnable(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UniWebView obj = (UniWebView)o;
			bool ret = obj.zoomEnable;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index zoomEnable on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_userAgent(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UniWebView obj = (UniWebView)o;
			string ret = obj.userAgent;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index userAgent on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_alpha(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UniWebView obj = (UniWebView)o;
			float ret = obj.alpha;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index alpha on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_immersiveMode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UniWebView obj = (UniWebView)o;
			bool ret = obj.immersiveMode;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index immersiveMode on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnLoadComplete(IntPtr L)
	{
		ToLua.Push(L, new EventObject("UniWebView.OnLoadComplete"));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnLoadBegin(IntPtr L)
	{
		ToLua.Push(L, new EventObject("UniWebView.OnLoadBegin"));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnReceivedMessage(IntPtr L)
	{
		ToLua.Push(L, new EventObject("UniWebView.OnReceivedMessage"));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnEvalJavaScriptFinished(IntPtr L)
	{
		ToLua.Push(L, new EventObject("UniWebView.OnEvalJavaScriptFinished"));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnWebViewShouldClose(IntPtr L)
	{
		ToLua.Push(L, new EventObject("UniWebView.OnWebViewShouldClose"));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnReceivedKeyCode(IntPtr L)
	{
		ToLua.Push(L, new EventObject("UniWebView.OnReceivedKeyCode"));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_InsetsForScreenOreitation(IntPtr L)
	{
		ToLua.Push(L, new EventObject("UniWebView.InsetsForScreenOreitation"));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_url(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UniWebView obj = (UniWebView)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.url = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index url on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_loadOnStart(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UniWebView obj = (UniWebView)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.loadOnStart = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index loadOnStart on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_autoShowWhenLoadComplete(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UniWebView obj = (UniWebView)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.autoShowWhenLoadComplete = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index autoShowWhenLoadComplete on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_toolBarShow(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UniWebView obj = (UniWebView)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.toolBarShow = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index toolBarShow on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_insets(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UniWebView obj = (UniWebView)o;
			UniWebViewEdgeInsets arg0 = (UniWebViewEdgeInsets)ToLua.CheckObject(L, 2, typeof(UniWebViewEdgeInsets));
			obj.insets = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index insets on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_backButtonEnable(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UniWebView obj = (UniWebView)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.backButtonEnable = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index backButtonEnable on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_bouncesEnable(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UniWebView obj = (UniWebView)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.bouncesEnable = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index bouncesEnable on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_zoomEnable(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UniWebView obj = (UniWebView)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.zoomEnable = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index zoomEnable on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_alpha(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UniWebView obj = (UniWebView)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.alpha = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index alpha on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_immersiveMode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UniWebView obj = (UniWebView)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.immersiveMode = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index immersiveMode on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnLoadComplete(IntPtr L)
	{
		try
		{
			UniWebView obj = (UniWebView)ToLua.CheckObject(L, 1, typeof(UniWebView));
            LuaFunction func = ToLua.ToLuaFunction(L, 2);
            obj.OnLoadComplete += (UniWebView webView, bool success, string errorMessage) =>
            {
                if (func != null)
                {
                    func.Call(webView, success, errorMessage);
                    func.Dispose();
                }
            };

            //EventObject arg0 = null;

            //if (LuaDLL.lua_isuserdata(L, 2) != 0)
            //{
            //    arg0 = (EventObject)ToLua.ToObject(L, 2);
            //}
            //else
            //{
            //    return LuaDLL.luaL_throw(L, "The event 'UniWebView.OnLoadComplete' can only appear on the left hand side of += or -= when used outside of the type 'UniWebView'");
            //}

            //if (arg0.op == EventOp.Add)
            //{
            //    UniWebView.LoadCompleteDelegate ev = (UniWebView.LoadCompleteDelegate)DelegateFactory.CreateDelegate(typeof(UniWebView.LoadCompleteDelegate), arg0.func);
            //    obj.OnLoadComplete += ev;
            //}
            //else if (arg0.op == EventOp.Sub)
            //{
            //    UniWebView.LoadCompleteDelegate ev = (UniWebView.LoadCompleteDelegate)LuaMisc.GetEventHandler(obj, typeof(UniWebView), "OnLoadComplete");
            //    Delegate[] ds = ev.GetInvocationList();
            //    LuaState state = LuaState.Get(L);

            //    for (int i = 0; i < ds.Length; i++)
            //    {
            //        ev = (UniWebView.LoadCompleteDelegate)ds[i];
            //        LuaDelegate ld = ev.Target as LuaDelegate;

            //        if (ld != null && ld.func == arg0.func)
            //        {
            //            obj.OnLoadComplete -= ev;
            //            state.DelayDispose(ld.func);
            //            break;
            //        }
            //    }

            //    arg0.func.Dispose();
            //}

			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnLoadBegin(IntPtr L)
	{
		try
		{
			UniWebView obj = (UniWebView)ToLua.CheckObject(L, 1, typeof(UniWebView));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'UniWebView.OnLoadBegin' can only appear on the left hand side of += or -= when used outside of the type 'UniWebView'");
			}

			if (arg0.op == EventOp.Add)
			{
				UniWebView.LoadBeginDelegate ev = (UniWebView.LoadBeginDelegate)DelegateFactory.CreateDelegate(typeof(UniWebView.LoadBeginDelegate), arg0.func);
				obj.OnLoadBegin += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				UniWebView.LoadBeginDelegate ev = (UniWebView.LoadBeginDelegate)LuaMisc.GetEventHandler(obj, typeof(UniWebView), "OnLoadBegin");
				Delegate[] ds = ev.GetInvocationList();
				LuaState state = LuaState.Get(L);

				for (int i = 0; i < ds.Length; i++)
				{
					ev = (UniWebView.LoadBeginDelegate)ds[i];
					LuaDelegate ld = ev.Target as LuaDelegate;

					if (ld != null && ld.func == arg0.func)
					{
						obj.OnLoadBegin -= ev;
						state.DelayDispose(ld.func);
						break;
					}
				}

				arg0.func.Dispose();
			}

			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnReceivedMessage(IntPtr L)
	{
		try
		{
			UniWebView obj = (UniWebView)ToLua.CheckObject(L, 1, typeof(UniWebView));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'UniWebView.OnReceivedMessage' can only appear on the left hand side of += or -= when used outside of the type 'UniWebView'");
			}

			if (arg0.op == EventOp.Add)
			{
				UniWebView.ReceivedMessageDelegate ev = (UniWebView.ReceivedMessageDelegate)DelegateFactory.CreateDelegate(typeof(UniWebView.ReceivedMessageDelegate), arg0.func);
				obj.OnReceivedMessage += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				UniWebView.ReceivedMessageDelegate ev = (UniWebView.ReceivedMessageDelegate)LuaMisc.GetEventHandler(obj, typeof(UniWebView), "OnReceivedMessage");
				Delegate[] ds = ev.GetInvocationList();
				LuaState state = LuaState.Get(L);

				for (int i = 0; i < ds.Length; i++)
				{
					ev = (UniWebView.ReceivedMessageDelegate)ds[i];
					LuaDelegate ld = ev.Target as LuaDelegate;

					if (ld != null && ld.func == arg0.func)
					{
						obj.OnReceivedMessage -= ev;
						state.DelayDispose(ld.func);
						break;
					}
				}

				arg0.func.Dispose();
			}

			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnEvalJavaScriptFinished(IntPtr L)
	{
		try
		{
			UniWebView obj = (UniWebView)ToLua.CheckObject(L, 1, typeof(UniWebView));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'UniWebView.OnEvalJavaScriptFinished' can only appear on the left hand side of += or -= when used outside of the type 'UniWebView'");
			}

			if (arg0.op == EventOp.Add)
			{
				UniWebView.EvalJavaScriptFinishedDelegate ev = (UniWebView.EvalJavaScriptFinishedDelegate)DelegateFactory.CreateDelegate(typeof(UniWebView.EvalJavaScriptFinishedDelegate), arg0.func);
				obj.OnEvalJavaScriptFinished += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				UniWebView.EvalJavaScriptFinishedDelegate ev = (UniWebView.EvalJavaScriptFinishedDelegate)LuaMisc.GetEventHandler(obj, typeof(UniWebView), "OnEvalJavaScriptFinished");
				Delegate[] ds = ev.GetInvocationList();
				LuaState state = LuaState.Get(L);

				for (int i = 0; i < ds.Length; i++)
				{
					ev = (UniWebView.EvalJavaScriptFinishedDelegate)ds[i];
					LuaDelegate ld = ev.Target as LuaDelegate;

					if (ld != null && ld.func == arg0.func)
					{
						obj.OnEvalJavaScriptFinished -= ev;
						state.DelayDispose(ld.func);
						break;
					}
				}

				arg0.func.Dispose();
			}

			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnWebViewShouldClose(IntPtr L)
	{
		try
		{
			UniWebView obj = (UniWebView)ToLua.CheckObject(L, 1, typeof(UniWebView));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'UniWebView.OnWebViewShouldClose' can only appear on the left hand side of += or -= when used outside of the type 'UniWebView'");
			}

			if (arg0.op == EventOp.Add)
			{
				UniWebView.WebViewShouldCloseDelegate ev = (UniWebView.WebViewShouldCloseDelegate)DelegateFactory.CreateDelegate(typeof(UniWebView.WebViewShouldCloseDelegate), arg0.func);
				obj.OnWebViewShouldClose += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				UniWebView.WebViewShouldCloseDelegate ev = (UniWebView.WebViewShouldCloseDelegate)LuaMisc.GetEventHandler(obj, typeof(UniWebView), "OnWebViewShouldClose");
				Delegate[] ds = ev.GetInvocationList();
				LuaState state = LuaState.Get(L);

				for (int i = 0; i < ds.Length; i++)
				{
					ev = (UniWebView.WebViewShouldCloseDelegate)ds[i];
					LuaDelegate ld = ev.Target as LuaDelegate;

					if (ld != null && ld.func == arg0.func)
					{
						obj.OnWebViewShouldClose -= ev;
						state.DelayDispose(ld.func);
						break;
					}
				}

				arg0.func.Dispose();
			}

			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnReceivedKeyCode(IntPtr L)
	{
		try
		{
			UniWebView obj = (UniWebView)ToLua.CheckObject(L, 1, typeof(UniWebView));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'UniWebView.OnReceivedKeyCode' can only appear on the left hand side of += or -= when used outside of the type 'UniWebView'");
			}

			if (arg0.op == EventOp.Add)
			{
				UniWebView.ReceivedKeyCodeDelegate ev = (UniWebView.ReceivedKeyCodeDelegate)DelegateFactory.CreateDelegate(typeof(UniWebView.ReceivedKeyCodeDelegate), arg0.func);
				obj.OnReceivedKeyCode += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				UniWebView.ReceivedKeyCodeDelegate ev = (UniWebView.ReceivedKeyCodeDelegate)LuaMisc.GetEventHandler(obj, typeof(UniWebView), "OnReceivedKeyCode");
				Delegate[] ds = ev.GetInvocationList();
				LuaState state = LuaState.Get(L);

				for (int i = 0; i < ds.Length; i++)
				{
					ev = (UniWebView.ReceivedKeyCodeDelegate)ds[i];
					LuaDelegate ld = ev.Target as LuaDelegate;

					if (ld != null && ld.func == arg0.func)
					{
						obj.OnReceivedKeyCode -= ev;
						state.DelayDispose(ld.func);
						break;
					}
				}

				arg0.func.Dispose();
			}

			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_InsetsForScreenOreitation(IntPtr L)
	{
		try
		{
			UniWebView obj = (UniWebView)ToLua.CheckObject(L, 1, typeof(UniWebView));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'UniWebView.InsetsForScreenOreitation' can only appear on the left hand side of += or -= when used outside of the type 'UniWebView'");
			}

			if (arg0.op == EventOp.Add)
			{
				UniWebView.InsetsForScreenOreitationDelegate ev = (UniWebView.InsetsForScreenOreitationDelegate)DelegateFactory.CreateDelegate(typeof(UniWebView.InsetsForScreenOreitationDelegate), arg0.func);
				obj.InsetsForScreenOreitation += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				UniWebView.InsetsForScreenOreitationDelegate ev = (UniWebView.InsetsForScreenOreitationDelegate)LuaMisc.GetEventHandler(obj, typeof(UniWebView), "InsetsForScreenOreitation");
				Delegate[] ds = ev.GetInvocationList();
				LuaState state = LuaState.Get(L);

				for (int i = 0; i < ds.Length; i++)
				{
					ev = (UniWebView.InsetsForScreenOreitationDelegate)ds[i];
					LuaDelegate ld = ev.Target as LuaDelegate;

					if (ld != null && ld.func == arg0.func)
					{
						obj.InsetsForScreenOreitation -= ev;
						state.DelayDispose(ld.func);
						break;
					}
				}

				arg0.func.Dispose();
			}

			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UniWebView_InsetsForScreenOreitationDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(UniWebView.InsetsForScreenOreitationDelegate), func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(UniWebView.InsetsForScreenOreitationDelegate), func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UniWebView_ReceivedKeyCodeDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(UniWebView.ReceivedKeyCodeDelegate), func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(UniWebView.ReceivedKeyCodeDelegate), func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UniWebView_WebViewShouldCloseDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(UniWebView.WebViewShouldCloseDelegate), func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(UniWebView.WebViewShouldCloseDelegate), func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UniWebView_EvalJavaScriptFinishedDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(UniWebView.EvalJavaScriptFinishedDelegate), func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(UniWebView.EvalJavaScriptFinishedDelegate), func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UniWebView_ReceivedMessageDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(UniWebView.ReceivedMessageDelegate), func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(UniWebView.ReceivedMessageDelegate), func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UniWebView_LoadBeginDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(UniWebView.LoadBeginDelegate), func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(UniWebView.LoadBeginDelegate), func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UniWebView_LoadCompleteDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(UniWebView.LoadCompleteDelegate), func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(UniWebView.LoadCompleteDelegate), func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

