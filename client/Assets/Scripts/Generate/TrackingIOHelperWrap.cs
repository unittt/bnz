//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class TrackingIOHelperWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(TrackingIOHelper), typeof(System.Object));
		L.RegFunction("Setup", Setup);
		L.RegFunction("Dispose", Dispose);
		L.RegFunction("Register", _Register);
		L.RegFunction("Login", Login);
		L.RegFunction("SetryzfStart", SetryzfStart);
		L.RegFunction("Setryzf", Setryzf);
		L.RegFunction("New", _CreateTrackingIOHelper);
		L.RegVar("appKey", get_appKey, set_appKey);
		L.RegVar("appID", get_appID, set_appID);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateTrackingIOHelper(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				TrackingIOHelper obj = new TrackingIOHelper();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: TrackingIOHelper.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Setup(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			TrackingIOHelper.Setup();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Dispose(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			TrackingIOHelper.Dispose();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _Register(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			TrackingIOHelper.Register(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Login(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			TrackingIOHelper.Login(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetryzfStart(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 5);
			TrackingIOHelper obj = (TrackingIOHelper)ToLua.CheckObject(L, 1, typeof(TrackingIOHelper));
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			string arg2 = ToLua.CheckString(L, 4);
			float arg3 = (float)LuaDLL.luaL_checknumber(L, 5);
			obj.SetryzfStart(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Setryzf(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 5);
			TrackingIOHelper obj = (TrackingIOHelper)ToLua.CheckObject(L, 1, typeof(TrackingIOHelper));
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			string arg2 = ToLua.CheckString(L, 4);
			float arg3 = (float)LuaDLL.luaL_checknumber(L, 5);
			obj.Setryzf(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_appKey(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, TrackingIOHelper.appKey);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_appID(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, TrackingIOHelper.appID);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_appKey(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			TrackingIOHelper.appKey = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_appID(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			TrackingIOHelper.appID = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

