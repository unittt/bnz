//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class CameraPathAnimatorWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(CameraPathAnimator), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("Play", Play);
		L.RegFunction("Stop", Stop);
		L.RegFunction("Pause", Pause);
		L.RegFunction("Seek", Seek);
		L.RegFunction("Reverse", Reverse);
		L.RegFunction("GetAnimatedOrientation", GetAnimatedOrientation);
		L.RegVar("minimumCameraSpeed", get_minimumCameraSpeed, set_minimumCameraSpeed);
		L.RegVar("orientationTarget", get_orientationTarget, set_orientationTarget);
		L.RegVar("playOnStart", get_playOnStart, set_playOnStart);
		L.RegVar("animationObject", get_animationObject, set_animationObject);
		L.RegVar("animationMode", get_animationMode, set_animationMode);
		L.RegVar("orientationMode", get_orientationMode, set_orientationMode);
		L.RegVar("fixedOrientaion", get_fixedOrientaion, set_fixedOrientaion);
		L.RegVar("fixedPosition", get_fixedPosition, set_fixedPosition);
		L.RegVar("normalised", get_normalised, set_normalised);
		L.RegVar("editorPercentage", get_editorPercentage, set_editorPercentage);
		L.RegVar("nearestOffset", get_nearestOffset, set_nearestOffset);
		L.RegVar("startPercent", get_startPercent, set_startPercent);
		L.RegVar("animateFOV", get_animateFOV, set_animateFOV);
		L.RegVar("targetModeUp", get_targetModeUp, set_targetModeUp);
		L.RegVar("sensitivity", get_sensitivity, set_sensitivity);
		L.RegVar("minX", get_minX, set_minX);
		L.RegVar("maxX", get_maxX, set_maxX);
		L.RegVar("showPreview", get_showPreview, set_showPreview);
		L.RegVar("editorPreview", get_editorPreview, set_editorPreview);
		L.RegVar("showScenePreview", get_showScenePreview, set_showScenePreview);
		L.RegVar("animatedObjectStartPosition", get_animatedObjectStartPosition, set_animatedObjectStartPosition);
		L.RegVar("animatedObjectStartRotation", get_animatedObjectStartRotation, set_animatedObjectStartRotation);
		L.RegVar("AnimationObject", null, set_AnimationObject);
		L.RegVar("pathSpeed", get_pathSpeed, set_pathSpeed);
		L.RegVar("animationTime", get_animationTime, set_animationTime);
		L.RegVar("currentTime", get_currentTime, null);
		L.RegVar("isPlaying", get_isPlaying, null);
		L.RegVar("percentage", get_percentage, null);
		L.RegVar("pingPongGoingForward", get_pingPongGoingForward, null);
		L.RegVar("cameraPath", get_cameraPath, null);
		L.RegVar("isCamera", get_isCamera, null);
		L.RegVar("animateSceneObjectInEditor", get_animateSceneObjectInEditor, set_animateSceneObjectInEditor);
		L.RegVar("AnimationStartedEvent", get_AnimationStartedEvent, set_AnimationStartedEvent);
		L.RegVar("AnimationPausedEvent", get_AnimationPausedEvent, set_AnimationPausedEvent);
		L.RegVar("AnimationStoppedEvent", get_AnimationStoppedEvent, set_AnimationStoppedEvent);
		L.RegVar("AnimationFinishedEvent", get_AnimationFinishedEvent, set_AnimationFinishedEvent);
		L.RegVar("AnimationLoopedEvent", get_AnimationLoopedEvent, set_AnimationLoopedEvent);
		L.RegVar("AnimationPingPongEvent", get_AnimationPingPongEvent, set_AnimationPingPongEvent);
		L.RegVar("AnimationPointReachedEvent", get_AnimationPointReachedEvent, set_AnimationPointReachedEvent);
		L.RegVar("AnimationPointReachedWithNumberEvent", get_AnimationPointReachedWithNumberEvent, set_AnimationPointReachedWithNumberEvent);
		L.RegVar("AnimationCustomEvent", get_AnimationCustomEvent, set_AnimationCustomEvent);
		L.RegFunction("AnimationCustomEventHandler", CameraPathAnimator_AnimationCustomEventHandler);
		L.RegFunction("AnimationPointReachedWithNumberEventHandler", CameraPathAnimator_AnimationPointReachedWithNumberEventHandler);
		L.RegFunction("AnimationPointReachedEventHandler", CameraPathAnimator_AnimationPointReachedEventHandler);
		L.RegFunction("AnimationPingPongEventHandler", CameraPathAnimator_AnimationPingPongEventHandler);
		L.RegFunction("AnimationLoopedEventHandler", CameraPathAnimator_AnimationLoopedEventHandler);
		L.RegFunction("AnimationFinishedEventHandler", CameraPathAnimator_AnimationFinishedEventHandler);
		L.RegFunction("AnimationStoppedEventHandler", CameraPathAnimator_AnimationStoppedEventHandler);
		L.RegFunction("AnimationPausedEventHandler", CameraPathAnimator_AnimationPausedEventHandler);
		L.RegFunction("AnimationStartedEventHandler", CameraPathAnimator_AnimationStartedEventHandler);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Play(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			CameraPathAnimator obj = (CameraPathAnimator)ToLua.CheckObject(L, 1, typeof(CameraPathAnimator));
			obj.Play();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Stop(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			CameraPathAnimator obj = (CameraPathAnimator)ToLua.CheckObject(L, 1, typeof(CameraPathAnimator));
			obj.Stop();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Pause(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			CameraPathAnimator obj = (CameraPathAnimator)ToLua.CheckObject(L, 1, typeof(CameraPathAnimator));
			obj.Pause();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Seek(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			CameraPathAnimator obj = (CameraPathAnimator)ToLua.CheckObject(L, 1, typeof(CameraPathAnimator));
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.Seek(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Reverse(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			CameraPathAnimator obj = (CameraPathAnimator)ToLua.CheckObject(L, 1, typeof(CameraPathAnimator));
			obj.Reverse();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAnimatedOrientation(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			CameraPathAnimator obj = (CameraPathAnimator)ToLua.CheckObject(L, 1, typeof(CameraPathAnimator));
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
			UnityEngine.Quaternion o = obj.GetAnimatedOrientation(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_minimumCameraSpeed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CameraPathAnimator obj = (CameraPathAnimator)o;
			float ret = obj.minimumCameraSpeed;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index minimumCameraSpeed on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_orientationTarget(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CameraPathAnimator obj = (CameraPathAnimator)o;
			UnityEngine.Transform ret = obj.orientationTarget;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index orientationTarget on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_playOnStart(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CameraPathAnimator obj = (CameraPathAnimator)o;
			bool ret = obj.playOnStart;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index playOnStart on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_animationObject(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CameraPathAnimator obj = (CameraPathAnimator)o;
			UnityEngine.Transform ret = obj.animationObject;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index animationObject on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_animationMode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CameraPathAnimator obj = (CameraPathAnimator)o;
			CameraPathAnimator.animationModes ret = obj.animationMode;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index animationMode on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_orientationMode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CameraPathAnimator obj = (CameraPathAnimator)o;
			CameraPathAnimator.orientationModes ret = obj.orientationMode;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index orientationMode on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_fixedOrientaion(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CameraPathAnimator obj = (CameraPathAnimator)o;
			UnityEngine.Vector3 ret = obj.fixedOrientaion;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index fixedOrientaion on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_fixedPosition(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CameraPathAnimator obj = (CameraPathAnimator)o;
			UnityEngine.Vector3 ret = obj.fixedPosition;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index fixedPosition on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_normalised(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CameraPathAnimator obj = (CameraPathAnimator)o;
			bool ret = obj.normalised;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index normalised on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_editorPercentage(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CameraPathAnimator obj = (CameraPathAnimator)o;
			float ret = obj.editorPercentage;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index editorPercentage on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_nearestOffset(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CameraPathAnimator obj = (CameraPathAnimator)o;
			float ret = obj.nearestOffset;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index nearestOffset on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_startPercent(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CameraPathAnimator obj = (CameraPathAnimator)o;
			float ret = obj.startPercent;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index startPercent on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_animateFOV(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CameraPathAnimator obj = (CameraPathAnimator)o;
			bool ret = obj.animateFOV;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index animateFOV on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_targetModeUp(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CameraPathAnimator obj = (CameraPathAnimator)o;
			UnityEngine.Vector3 ret = obj.targetModeUp;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index targetModeUp on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_sensitivity(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CameraPathAnimator obj = (CameraPathAnimator)o;
			float ret = obj.sensitivity;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index sensitivity on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_minX(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CameraPathAnimator obj = (CameraPathAnimator)o;
			float ret = obj.minX;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index minX on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_maxX(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CameraPathAnimator obj = (CameraPathAnimator)o;
			float ret = obj.maxX;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index maxX on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_showPreview(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CameraPathAnimator obj = (CameraPathAnimator)o;
			bool ret = obj.showPreview;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index showPreview on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_editorPreview(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CameraPathAnimator obj = (CameraPathAnimator)o;
			UnityEngine.GameObject ret = obj.editorPreview;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index editorPreview on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_showScenePreview(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CameraPathAnimator obj = (CameraPathAnimator)o;
			bool ret = obj.showScenePreview;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index showScenePreview on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_animatedObjectStartPosition(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CameraPathAnimator obj = (CameraPathAnimator)o;
			UnityEngine.Vector3 ret = obj.animatedObjectStartPosition;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index animatedObjectStartPosition on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_animatedObjectStartRotation(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CameraPathAnimator obj = (CameraPathAnimator)o;
			UnityEngine.Quaternion ret = obj.animatedObjectStartRotation;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index animatedObjectStartRotation on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_pathSpeed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CameraPathAnimator obj = (CameraPathAnimator)o;
			float ret = obj.pathSpeed;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index pathSpeed on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_animationTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CameraPathAnimator obj = (CameraPathAnimator)o;
			float ret = obj.animationTime;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index animationTime on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_currentTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CameraPathAnimator obj = (CameraPathAnimator)o;
			float ret = obj.currentTime;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index currentTime on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isPlaying(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CameraPathAnimator obj = (CameraPathAnimator)o;
			bool ret = obj.isPlaying;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index isPlaying on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_percentage(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CameraPathAnimator obj = (CameraPathAnimator)o;
			float ret = obj.percentage;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index percentage on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_pingPongGoingForward(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CameraPathAnimator obj = (CameraPathAnimator)o;
			bool ret = obj.pingPongGoingForward;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index pingPongGoingForward on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_cameraPath(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CameraPathAnimator obj = (CameraPathAnimator)o;
			CameraPath ret = obj.cameraPath;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index cameraPath on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isCamera(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CameraPathAnimator obj = (CameraPathAnimator)o;
			bool ret = obj.isCamera;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index isCamera on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_animateSceneObjectInEditor(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CameraPathAnimator obj = (CameraPathAnimator)o;
			bool ret = obj.animateSceneObjectInEditor;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index animateSceneObjectInEditor on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AnimationStartedEvent(IntPtr L)
	{
		ToLua.Push(L, new EventObject("CameraPathAnimator.AnimationStartedEvent"));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AnimationPausedEvent(IntPtr L)
	{
		ToLua.Push(L, new EventObject("CameraPathAnimator.AnimationPausedEvent"));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AnimationStoppedEvent(IntPtr L)
	{
		ToLua.Push(L, new EventObject("CameraPathAnimator.AnimationStoppedEvent"));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AnimationFinishedEvent(IntPtr L)
	{
		ToLua.Push(L, new EventObject("CameraPathAnimator.AnimationFinishedEvent"));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AnimationLoopedEvent(IntPtr L)
	{
		ToLua.Push(L, new EventObject("CameraPathAnimator.AnimationLoopedEvent"));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AnimationPingPongEvent(IntPtr L)
	{
		ToLua.Push(L, new EventObject("CameraPathAnimator.AnimationPingPongEvent"));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AnimationPointReachedEvent(IntPtr L)
	{
		ToLua.Push(L, new EventObject("CameraPathAnimator.AnimationPointReachedEvent"));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AnimationPointReachedWithNumberEvent(IntPtr L)
	{
		ToLua.Push(L, new EventObject("CameraPathAnimator.AnimationPointReachedWithNumberEvent"));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AnimationCustomEvent(IntPtr L)
	{
		ToLua.Push(L, new EventObject("CameraPathAnimator.AnimationCustomEvent"));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_minimumCameraSpeed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CameraPathAnimator obj = (CameraPathAnimator)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.minimumCameraSpeed = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index minimumCameraSpeed on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_orientationTarget(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CameraPathAnimator obj = (CameraPathAnimator)o;
			UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.Transform));
			obj.orientationTarget = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index orientationTarget on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_playOnStart(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CameraPathAnimator obj = (CameraPathAnimator)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.playOnStart = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index playOnStart on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_animationObject(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CameraPathAnimator obj = (CameraPathAnimator)o;
			UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.Transform));
			obj.animationObject = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index animationObject on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_animationMode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CameraPathAnimator obj = (CameraPathAnimator)o;
			CameraPathAnimator.animationModes arg0 = (CameraPathAnimator.animationModes)(int)LuaDLL.lua_tonumber(L, 2);
			obj.animationMode = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index animationMode on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_orientationMode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CameraPathAnimator obj = (CameraPathAnimator)o;
			CameraPathAnimator.orientationModes arg0 = (CameraPathAnimator.orientationModes)(int)LuaDLL.lua_tonumber(L, 2);
			obj.orientationMode = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index orientationMode on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_fixedOrientaion(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CameraPathAnimator obj = (CameraPathAnimator)o;
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			obj.fixedOrientaion = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index fixedOrientaion on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_fixedPosition(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CameraPathAnimator obj = (CameraPathAnimator)o;
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			obj.fixedPosition = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index fixedPosition on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_normalised(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CameraPathAnimator obj = (CameraPathAnimator)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.normalised = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index normalised on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_editorPercentage(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CameraPathAnimator obj = (CameraPathAnimator)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.editorPercentage = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index editorPercentage on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_nearestOffset(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CameraPathAnimator obj = (CameraPathAnimator)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.nearestOffset = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index nearestOffset on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_startPercent(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CameraPathAnimator obj = (CameraPathAnimator)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.startPercent = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index startPercent on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_animateFOV(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CameraPathAnimator obj = (CameraPathAnimator)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.animateFOV = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index animateFOV on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_targetModeUp(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CameraPathAnimator obj = (CameraPathAnimator)o;
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			obj.targetModeUp = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index targetModeUp on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_sensitivity(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CameraPathAnimator obj = (CameraPathAnimator)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.sensitivity = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index sensitivity on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_minX(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CameraPathAnimator obj = (CameraPathAnimator)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.minX = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index minX on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_maxX(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CameraPathAnimator obj = (CameraPathAnimator)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.maxX = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index maxX on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_showPreview(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CameraPathAnimator obj = (CameraPathAnimator)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.showPreview = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index showPreview on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_editorPreview(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CameraPathAnimator obj = (CameraPathAnimator)o;
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.GameObject));
			obj.editorPreview = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index editorPreview on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_showScenePreview(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CameraPathAnimator obj = (CameraPathAnimator)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.showScenePreview = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index showScenePreview on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_animatedObjectStartPosition(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CameraPathAnimator obj = (CameraPathAnimator)o;
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			obj.animatedObjectStartPosition = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index animatedObjectStartPosition on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_animatedObjectStartRotation(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CameraPathAnimator obj = (CameraPathAnimator)o;
			UnityEngine.Quaternion arg0 = ToLua.ToQuaternion(L, 2);
			obj.animatedObjectStartRotation = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index animatedObjectStartRotation on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_AnimationObject(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CameraPathAnimator obj = (CameraPathAnimator)o;
			UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.Transform));
			obj.AnimationObject = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index AnimationObject on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_pathSpeed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CameraPathAnimator obj = (CameraPathAnimator)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.pathSpeed = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index pathSpeed on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_animationTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CameraPathAnimator obj = (CameraPathAnimator)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.animationTime = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index animationTime on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_animateSceneObjectInEditor(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CameraPathAnimator obj = (CameraPathAnimator)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.animateSceneObjectInEditor = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index animateSceneObjectInEditor on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_AnimationStartedEvent(IntPtr L)
	{
		try
		{
			CameraPathAnimator obj = (CameraPathAnimator)ToLua.CheckObject(L, 1, typeof(CameraPathAnimator));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'CameraPathAnimator.AnimationStartedEvent' can only appear on the left hand side of += or -= when used outside of the type 'CameraPathAnimator'");
			}

			if (arg0.op == EventOp.Add)
			{
				CameraPathAnimator.AnimationStartedEventHandler ev = (CameraPathAnimator.AnimationStartedEventHandler)DelegateFactory.CreateDelegate(typeof(CameraPathAnimator.AnimationStartedEventHandler), arg0.func);
				obj.AnimationStartedEvent += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				CameraPathAnimator.AnimationStartedEventHandler ev = (CameraPathAnimator.AnimationStartedEventHandler)LuaMisc.GetEventHandler(obj, typeof(CameraPathAnimator), "AnimationStartedEvent");
				Delegate[] ds = ev.GetInvocationList();
				LuaState state = LuaState.Get(L);

				for (int i = 0; i < ds.Length; i++)
				{
					ev = (CameraPathAnimator.AnimationStartedEventHandler)ds[i];
					LuaDelegate ld = ev.Target as LuaDelegate;

					if (ld != null && ld.func == arg0.func)
					{
						obj.AnimationStartedEvent -= ev;
						state.DelayDispose(ld.func);
						break;
					}
				}

				arg0.func.Dispose();
			}

			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_AnimationPausedEvent(IntPtr L)
	{
		try
		{
			CameraPathAnimator obj = (CameraPathAnimator)ToLua.CheckObject(L, 1, typeof(CameraPathAnimator));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'CameraPathAnimator.AnimationPausedEvent' can only appear on the left hand side of += or -= when used outside of the type 'CameraPathAnimator'");
			}

			if (arg0.op == EventOp.Add)
			{
				CameraPathAnimator.AnimationPausedEventHandler ev = (CameraPathAnimator.AnimationPausedEventHandler)DelegateFactory.CreateDelegate(typeof(CameraPathAnimator.AnimationPausedEventHandler), arg0.func);
				obj.AnimationPausedEvent += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				CameraPathAnimator.AnimationPausedEventHandler ev = (CameraPathAnimator.AnimationPausedEventHandler)LuaMisc.GetEventHandler(obj, typeof(CameraPathAnimator), "AnimationPausedEvent");
				Delegate[] ds = ev.GetInvocationList();
				LuaState state = LuaState.Get(L);

				for (int i = 0; i < ds.Length; i++)
				{
					ev = (CameraPathAnimator.AnimationPausedEventHandler)ds[i];
					LuaDelegate ld = ev.Target as LuaDelegate;

					if (ld != null && ld.func == arg0.func)
					{
						obj.AnimationPausedEvent -= ev;
						state.DelayDispose(ld.func);
						break;
					}
				}

				arg0.func.Dispose();
			}

			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_AnimationStoppedEvent(IntPtr L)
	{
		try
		{
			CameraPathAnimator obj = (CameraPathAnimator)ToLua.CheckObject(L, 1, typeof(CameraPathAnimator));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'CameraPathAnimator.AnimationStoppedEvent' can only appear on the left hand side of += or -= when used outside of the type 'CameraPathAnimator'");
			}

			if (arg0.op == EventOp.Add)
			{
				CameraPathAnimator.AnimationStoppedEventHandler ev = (CameraPathAnimator.AnimationStoppedEventHandler)DelegateFactory.CreateDelegate(typeof(CameraPathAnimator.AnimationStoppedEventHandler), arg0.func);
				obj.AnimationStoppedEvent += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				CameraPathAnimator.AnimationStoppedEventHandler ev = (CameraPathAnimator.AnimationStoppedEventHandler)LuaMisc.GetEventHandler(obj, typeof(CameraPathAnimator), "AnimationStoppedEvent");
				Delegate[] ds = ev.GetInvocationList();
				LuaState state = LuaState.Get(L);

				for (int i = 0; i < ds.Length; i++)
				{
					ev = (CameraPathAnimator.AnimationStoppedEventHandler)ds[i];
					LuaDelegate ld = ev.Target as LuaDelegate;

					if (ld != null && ld.func == arg0.func)
					{
						obj.AnimationStoppedEvent -= ev;
						state.DelayDispose(ld.func);
						break;
					}
				}

				arg0.func.Dispose();
			}

			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_AnimationFinishedEvent(IntPtr L)
	{
		try
		{
			CameraPathAnimator obj = (CameraPathAnimator)ToLua.CheckObject(L, 1, typeof(CameraPathAnimator));
            LuaFunction func = ToLua.ToLuaFunction(L, 2);
            obj.AnimationFinishedEvent += () =>
            {
                if (func != null)
                {
                    func.Call();
                    func.Dispose();
                }
            };
            //EventObject arg0 = null;

            //if (LuaDLL.lua_isuserdata(L, 2) != 0)
            //{
            //    arg0 = (EventObject)ToLua.ToObject(L, 2);
            //}
            //else
            //{
            //    return LuaDLL.luaL_throw(L, "The event 'CameraPathAnimator.AnimationFinishedEvent' can only appear on the left hand side of += or -= when used outside of the type 'CameraPathAnimator'");
            //}

            //if (arg0.op == EventOp.Add)
            //{
            //    CameraPathAnimator.AnimationFinishedEventHandler ev = (CameraPathAnimator.AnimationFinishedEventHandler)DelegateFactory.CreateDelegate(typeof(CameraPathAnimator.AnimationFinishedEventHandler), arg0.func);
            //    obj.AnimationFinishedEvent += ev;
            //}
            //else if (arg0.op == EventOp.Sub)
            //{
            //    CameraPathAnimator.AnimationFinishedEventHandler ev = (CameraPathAnimator.AnimationFinishedEventHandler)LuaMisc.GetEventHandler(obj, typeof(CameraPathAnimator), "AnimationFinishedEvent");
            //    Delegate[] ds = ev.GetInvocationList();
            //    LuaState state = LuaState.Get(L);

            //    for (int i = 0; i < ds.Length; i++)
            //    {
            //        ev = (CameraPathAnimator.AnimationFinishedEventHandler)ds[i];
            //        LuaDelegate ld = ev.Target as LuaDelegate;

            //        if (ld != null && ld.func == arg0.func)
            //        {
            //            obj.AnimationFinishedEvent -= ev;
            //            state.DelayDispose(ld.func);
            //            break;
            //        }
            //    }

            //    arg0.func.Dispose();
            //}

			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_AnimationLoopedEvent(IntPtr L)
	{
		try
		{
			CameraPathAnimator obj = (CameraPathAnimator)ToLua.CheckObject(L, 1, typeof(CameraPathAnimator));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'CameraPathAnimator.AnimationLoopedEvent' can only appear on the left hand side of += or -= when used outside of the type 'CameraPathAnimator'");
			}

			if (arg0.op == EventOp.Add)
			{
				CameraPathAnimator.AnimationLoopedEventHandler ev = (CameraPathAnimator.AnimationLoopedEventHandler)DelegateFactory.CreateDelegate(typeof(CameraPathAnimator.AnimationLoopedEventHandler), arg0.func);
				obj.AnimationLoopedEvent += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				CameraPathAnimator.AnimationLoopedEventHandler ev = (CameraPathAnimator.AnimationLoopedEventHandler)LuaMisc.GetEventHandler(obj, typeof(CameraPathAnimator), "AnimationLoopedEvent");
				Delegate[] ds = ev.GetInvocationList();
				LuaState state = LuaState.Get(L);

				for (int i = 0; i < ds.Length; i++)
				{
					ev = (CameraPathAnimator.AnimationLoopedEventHandler)ds[i];
					LuaDelegate ld = ev.Target as LuaDelegate;

					if (ld != null && ld.func == arg0.func)
					{
						obj.AnimationLoopedEvent -= ev;
						state.DelayDispose(ld.func);
						break;
					}
				}

				arg0.func.Dispose();
			}

			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_AnimationPingPongEvent(IntPtr L)
	{
		try
		{
			CameraPathAnimator obj = (CameraPathAnimator)ToLua.CheckObject(L, 1, typeof(CameraPathAnimator));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'CameraPathAnimator.AnimationPingPongEvent' can only appear on the left hand side of += or -= when used outside of the type 'CameraPathAnimator'");
			}

			if (arg0.op == EventOp.Add)
			{
				CameraPathAnimator.AnimationPingPongEventHandler ev = (CameraPathAnimator.AnimationPingPongEventHandler)DelegateFactory.CreateDelegate(typeof(CameraPathAnimator.AnimationPingPongEventHandler), arg0.func);
				obj.AnimationPingPongEvent += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				CameraPathAnimator.AnimationPingPongEventHandler ev = (CameraPathAnimator.AnimationPingPongEventHandler)LuaMisc.GetEventHandler(obj, typeof(CameraPathAnimator), "AnimationPingPongEvent");
				Delegate[] ds = ev.GetInvocationList();
				LuaState state = LuaState.Get(L);

				for (int i = 0; i < ds.Length; i++)
				{
					ev = (CameraPathAnimator.AnimationPingPongEventHandler)ds[i];
					LuaDelegate ld = ev.Target as LuaDelegate;

					if (ld != null && ld.func == arg0.func)
					{
						obj.AnimationPingPongEvent -= ev;
						state.DelayDispose(ld.func);
						break;
					}
				}

				arg0.func.Dispose();
			}

			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_AnimationPointReachedEvent(IntPtr L)
	{
		try
		{
			CameraPathAnimator obj = (CameraPathAnimator)ToLua.CheckObject(L, 1, typeof(CameraPathAnimator));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'CameraPathAnimator.AnimationPointReachedEvent' can only appear on the left hand side of += or -= when used outside of the type 'CameraPathAnimator'");
			}

			if (arg0.op == EventOp.Add)
			{
				CameraPathAnimator.AnimationPointReachedEventHandler ev = (CameraPathAnimator.AnimationPointReachedEventHandler)DelegateFactory.CreateDelegate(typeof(CameraPathAnimator.AnimationPointReachedEventHandler), arg0.func);
				obj.AnimationPointReachedEvent += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				CameraPathAnimator.AnimationPointReachedEventHandler ev = (CameraPathAnimator.AnimationPointReachedEventHandler)LuaMisc.GetEventHandler(obj, typeof(CameraPathAnimator), "AnimationPointReachedEvent");
				Delegate[] ds = ev.GetInvocationList();
				LuaState state = LuaState.Get(L);

				for (int i = 0; i < ds.Length; i++)
				{
					ev = (CameraPathAnimator.AnimationPointReachedEventHandler)ds[i];
					LuaDelegate ld = ev.Target as LuaDelegate;

					if (ld != null && ld.func == arg0.func)
					{
						obj.AnimationPointReachedEvent -= ev;
						state.DelayDispose(ld.func);
						break;
					}
				}

				arg0.func.Dispose();
			}

			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_AnimationPointReachedWithNumberEvent(IntPtr L)
	{
		try
		{
			CameraPathAnimator obj = (CameraPathAnimator)ToLua.CheckObject(L, 1, typeof(CameraPathAnimator));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'CameraPathAnimator.AnimationPointReachedWithNumberEvent' can only appear on the left hand side of += or -= when used outside of the type 'CameraPathAnimator'");
			}

			if (arg0.op == EventOp.Add)
			{
				CameraPathAnimator.AnimationPointReachedWithNumberEventHandler ev = (CameraPathAnimator.AnimationPointReachedWithNumberEventHandler)DelegateFactory.CreateDelegate(typeof(CameraPathAnimator.AnimationPointReachedWithNumberEventHandler), arg0.func);
				obj.AnimationPointReachedWithNumberEvent += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				CameraPathAnimator.AnimationPointReachedWithNumberEventHandler ev = (CameraPathAnimator.AnimationPointReachedWithNumberEventHandler)LuaMisc.GetEventHandler(obj, typeof(CameraPathAnimator), "AnimationPointReachedWithNumberEvent");
				Delegate[] ds = ev.GetInvocationList();
				LuaState state = LuaState.Get(L);

				for (int i = 0; i < ds.Length; i++)
				{
					ev = (CameraPathAnimator.AnimationPointReachedWithNumberEventHandler)ds[i];
					LuaDelegate ld = ev.Target as LuaDelegate;

					if (ld != null && ld.func == arg0.func)
					{
						obj.AnimationPointReachedWithNumberEvent -= ev;
						state.DelayDispose(ld.func);
						break;
					}
				}

				arg0.func.Dispose();
			}

			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_AnimationCustomEvent(IntPtr L)
	{
		try
		{
			CameraPathAnimator obj = (CameraPathAnimator)ToLua.CheckObject(L, 1, typeof(CameraPathAnimator));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'CameraPathAnimator.AnimationCustomEvent' can only appear on the left hand side of += or -= when used outside of the type 'CameraPathAnimator'");
			}

			if (arg0.op == EventOp.Add)
			{
				CameraPathAnimator.AnimationCustomEventHandler ev = (CameraPathAnimator.AnimationCustomEventHandler)DelegateFactory.CreateDelegate(typeof(CameraPathAnimator.AnimationCustomEventHandler), arg0.func);
				obj.AnimationCustomEvent += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				CameraPathAnimator.AnimationCustomEventHandler ev = (CameraPathAnimator.AnimationCustomEventHandler)LuaMisc.GetEventHandler(obj, typeof(CameraPathAnimator), "AnimationCustomEvent");
				Delegate[] ds = ev.GetInvocationList();
				LuaState state = LuaState.Get(L);

				for (int i = 0; i < ds.Length; i++)
				{
					ev = (CameraPathAnimator.AnimationCustomEventHandler)ds[i];
					LuaDelegate ld = ev.Target as LuaDelegate;

					if (ld != null && ld.func == arg0.func)
					{
						obj.AnimationCustomEvent -= ev;
						state.DelayDispose(ld.func);
						break;
					}
				}

				arg0.func.Dispose();
			}

			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CameraPathAnimator_AnimationCustomEventHandler(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(CameraPathAnimator.AnimationCustomEventHandler), func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(CameraPathAnimator.AnimationCustomEventHandler), func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CameraPathAnimator_AnimationPointReachedWithNumberEventHandler(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(CameraPathAnimator.AnimationPointReachedWithNumberEventHandler), func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(CameraPathAnimator.AnimationPointReachedWithNumberEventHandler), func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CameraPathAnimator_AnimationPointReachedEventHandler(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(CameraPathAnimator.AnimationPointReachedEventHandler), func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(CameraPathAnimator.AnimationPointReachedEventHandler), func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CameraPathAnimator_AnimationPingPongEventHandler(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(CameraPathAnimator.AnimationPingPongEventHandler), func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(CameraPathAnimator.AnimationPingPongEventHandler), func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CameraPathAnimator_AnimationLoopedEventHandler(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(CameraPathAnimator.AnimationLoopedEventHandler), func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(CameraPathAnimator.AnimationLoopedEventHandler), func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CameraPathAnimator_AnimationFinishedEventHandler(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(CameraPathAnimator.AnimationFinishedEventHandler), func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(CameraPathAnimator.AnimationFinishedEventHandler), func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CameraPathAnimator_AnimationStoppedEventHandler(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(CameraPathAnimator.AnimationStoppedEventHandler), func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(CameraPathAnimator.AnimationStoppedEventHandler), func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CameraPathAnimator_AnimationPausedEventHandler(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(CameraPathAnimator.AnimationPausedEventHandler), func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(CameraPathAnimator.AnimationPausedEventHandler), func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CameraPathAnimator_AnimationStartedEventHandler(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(CameraPathAnimator.AnimationStartedEventHandler), func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(CameraPathAnimator.AnimationStartedEventHandler), func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

