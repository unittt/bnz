//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;
#if UNITY_EDITOR

public class UnityEditor_AnimationClipCurveDataWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UnityEditor.AnimationClipCurveData), typeof(System.Object));
		L.RegFunction("New", _CreateUnityEditor_AnimationClipCurveData);
		L.RegVar("path", get_path, set_path);
		L.RegVar("type", get_type, set_type);
		L.RegVar("propertyName", get_propertyName, set_propertyName);
		L.RegVar("curve", get_curve, set_curve);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateUnityEditor_AnimationClipCurveData(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				UnityEditor.AnimationClipCurveData obj = new UnityEditor.AnimationClipCurveData();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(UnityEditor.EditorCurveBinding)))
			{
				UnityEditor.EditorCurveBinding arg0 = (UnityEditor.EditorCurveBinding)ToLua.CheckObject(L, 1, typeof(UnityEditor.EditorCurveBinding));
				UnityEditor.AnimationClipCurveData obj = new UnityEditor.AnimationClipCurveData(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: UnityEditor.AnimationClipCurveData.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_path(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEditor.AnimationClipCurveData obj = (UnityEditor.AnimationClipCurveData)o;
			string ret = obj.path;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index path on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_type(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEditor.AnimationClipCurveData obj = (UnityEditor.AnimationClipCurveData)o;
			System.Type ret = obj.type;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index type on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_propertyName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEditor.AnimationClipCurveData obj = (UnityEditor.AnimationClipCurveData)o;
			string ret = obj.propertyName;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index propertyName on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_curve(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEditor.AnimationClipCurveData obj = (UnityEditor.AnimationClipCurveData)o;
			UnityEngine.AnimationCurve ret = obj.curve;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index curve on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_path(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEditor.AnimationClipCurveData obj = (UnityEditor.AnimationClipCurveData)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.path = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index path on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_type(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEditor.AnimationClipCurveData obj = (UnityEditor.AnimationClipCurveData)o;
			System.Type arg0 = (System.Type)ToLua.CheckObject(L, 2, typeof(System.Type));
			obj.type = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index type on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_propertyName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEditor.AnimationClipCurveData obj = (UnityEditor.AnimationClipCurveData)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.propertyName = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index propertyName on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_curve(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEditor.AnimationClipCurveData obj = (UnityEditor.AnimationClipCurveData)o;
			UnityEngine.AnimationCurve arg0 = (UnityEngine.AnimationCurve)ToLua.CheckObject(L, 2, typeof(UnityEngine.AnimationCurve));
			obj.curve = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index curve on a nil value" : e.Message);
		}
	}
}

#endif