//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UIWrapContentWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UIWrapContent), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("SortBasedOnScrollMovement", SortBasedOnScrollMovement);
		L.RegFunction("SortAlphabetically", SortAlphabetically);
		L.RegFunction("SortChilds", SortChilds);
		L.RegFunction("WrapContent", WrapContent);
		L.RegFunction("MoveRelative", MoveRelative);
		L.RegVar("itemSize", get_itemSize, set_itemSize);
		L.RegVar("cullContent", get_cullContent, set_cullContent);
		L.RegVar("minIndex", get_minIndex, set_minIndex);
		L.RegVar("maxIndex", get_maxIndex, set_maxIndex);
		L.RegVar("hideInactive", get_hideInactive, set_hideInactive);
		L.RegVar("onInitializeItem", get_onInitializeItem, set_onInitializeItem);
		L.RegVar("scrollView", get_scrollView, null);
		L.RegVar("horizontal", get_horizontal, null);
		L.RegVar("reuqiredItemCnt", get_reuqiredItemCnt, null);
		L.RegFunction("OnInitializeItem", UIWrapContent_OnInitializeItem);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SortBasedOnScrollMovement(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UIWrapContent obj = (UIWrapContent)ToLua.CheckObject(L, 1, typeof(UIWrapContent));
			obj.SortBasedOnScrollMovement();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SortAlphabetically(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UIWrapContent obj = (UIWrapContent)ToLua.CheckObject(L, 1, typeof(UIWrapContent));
			obj.SortAlphabetically();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SortChilds(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UIWrapContent obj = (UIWrapContent)ToLua.CheckObject(L, 1, typeof(UIWrapContent));
			obj.SortChilds();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WrapContent(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UIWrapContent obj = (UIWrapContent)ToLua.CheckObject(L, 1, typeof(UIWrapContent));
			obj.WrapContent();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MoveRelative(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIWrapContent obj = (UIWrapContent)ToLua.CheckObject(L, 1, typeof(UIWrapContent));
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			obj.MoveRelative(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_itemSize(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIWrapContent obj = (UIWrapContent)o;
			int ret = obj.itemSize;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index itemSize on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_cullContent(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIWrapContent obj = (UIWrapContent)o;
			bool ret = obj.cullContent;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index cullContent on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_minIndex(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIWrapContent obj = (UIWrapContent)o;
			int ret = obj.minIndex;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index minIndex on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_maxIndex(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIWrapContent obj = (UIWrapContent)o;
			int ret = obj.maxIndex;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index maxIndex on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_hideInactive(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIWrapContent obj = (UIWrapContent)o;
			bool ret = obj.hideInactive;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index hideInactive on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onInitializeItem(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIWrapContent obj = (UIWrapContent)o;
			UIWrapContent.OnInitializeItem ret = obj.onInitializeItem;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index onInitializeItem on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_scrollView(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIWrapContent obj = (UIWrapContent)o;
			UIScrollView ret = obj.scrollView;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index scrollView on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_horizontal(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIWrapContent obj = (UIWrapContent)o;
			bool ret = obj.horizontal;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index horizontal on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_reuqiredItemCnt(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIWrapContent obj = (UIWrapContent)o;
			int ret = obj.reuqiredItemCnt;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index reuqiredItemCnt on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_itemSize(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIWrapContent obj = (UIWrapContent)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.itemSize = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index itemSize on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_cullContent(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIWrapContent obj = (UIWrapContent)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.cullContent = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index cullContent on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_minIndex(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIWrapContent obj = (UIWrapContent)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.minIndex = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index minIndex on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_maxIndex(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIWrapContent obj = (UIWrapContent)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.maxIndex = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index maxIndex on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_hideInactive(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIWrapContent obj = (UIWrapContent)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.hideInactive = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index hideInactive on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onInitializeItem(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIWrapContent obj = (UIWrapContent)o;
			UIWrapContent.OnInitializeItem arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (UIWrapContent.OnInitializeItem)ToLua.CheckObject(L, 2, typeof(UIWrapContent.OnInitializeItem));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(UIWrapContent.OnInitializeItem), func) as UIWrapContent.OnInitializeItem;
			}

			obj.onInitializeItem = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index onInitializeItem on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UIWrapContent_OnInitializeItem(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(UIWrapContent.OnInitializeItem), func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(UIWrapContent.OnInitializeItem), func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

