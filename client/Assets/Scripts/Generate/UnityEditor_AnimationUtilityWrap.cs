//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;
#if UNITY_EDITOR

public class UnityEditor_AnimationUtilityWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UnityEditor.AnimationUtility), typeof(System.Object));
		L.RegFunction("GetAnimationClips", GetAnimationClips);
		L.RegFunction("SetAnimationClips", SetAnimationClips);
		L.RegFunction("GetAnimatableBindings", GetAnimatableBindings);
		L.RegFunction("GetFloatValue", GetFloatValue);
		L.RegFunction("GetEditorCurveValueType", GetEditorCurveValueType);
		L.RegFunction("GetObjectReferenceValue", GetObjectReferenceValue);
		L.RegFunction("GetAnimatedObject", GetAnimatedObject);
		L.RegFunction("PropertyModificationToEditorCurveBinding", PropertyModificationToEditorCurveBinding);
		L.RegFunction("GetCurveBindings", GetCurveBindings);
		L.RegFunction("GetObjectReferenceCurveBindings", GetObjectReferenceCurveBindings);
		L.RegFunction("GetObjectReferenceCurve", GetObjectReferenceCurve);
		L.RegFunction("GetEditorCurve", GetEditorCurve);
		L.RegFunction("SetEditorCurve", SetEditorCurve);
		L.RegFunction("SetObjectReferenceCurve", SetObjectReferenceCurve);
		L.RegFunction("SetKeyBroken", SetKeyBroken);
		L.RegFunction("SetKeyLeftTangentMode", SetKeyLeftTangentMode);
		L.RegFunction("SetKeyRightTangentMode", SetKeyRightTangentMode);
		L.RegFunction("GetAnimationEvents", GetAnimationEvents);
		L.RegFunction("SetAnimationEvents", SetAnimationEvents);
		L.RegFunction("CalculateTransformPath", CalculateTransformPath);
		L.RegFunction("GetAnimationClipSettings", GetAnimationClipSettings);
		L.RegFunction("SetAnimationClipSettings", SetAnimationClipSettings);
		L.RegFunction("SetAdditiveReferencePose", SetAdditiveReferencePose);
		L.RegFunction("IsValidPolynomialCurve", IsValidPolynomialCurve);
		L.RegFunction("ConstrainToPolynomialCurve", ConstrainToPolynomialCurve);
        L.RegFunction("GetAllCurves", GetAllCurves);
		L.RegFunction("New", _CreateUnityEditor_AnimationUtility);
		L.RegVar("onCurveWasModified", get_onCurveWasModified, set_onCurveWasModified);
		L.RegFunction("OnCurveWasModified", UnityEditor_AnimationUtility_OnCurveWasModified);
		L.EndClass();
	}

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int GetAllCurves(IntPtr L)
    {
        try
        {
            ToLua.CheckArgsCount(L, 1);
            UnityEngine.AnimationClip arg0 = (UnityEngine.AnimationClip)ToLua.CheckUnityObject(L, 1, typeof(UnityEngine.AnimationClip));
            UnityEditor.AnimationClipCurveData[] o = UnityEditor.AnimationUtility.GetAllCurves(arg0);
            ToLua.Push(L, o);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateUnityEditor_AnimationUtility(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				UnityEditor.AnimationUtility obj = new UnityEditor.AnimationUtility();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: UnityEditor.AnimationUtility.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAnimationClips(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckUnityObject(L, 1, typeof(UnityEngine.GameObject));
			UnityEngine.AnimationClip[] o = UnityEditor.AnimationUtility.GetAnimationClips(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetAnimationClips(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Animation arg0 = (UnityEngine.Animation)ToLua.CheckUnityObject(L, 1, typeof(UnityEngine.Animation));
			UnityEngine.AnimationClip[] arg1 = ToLua.CheckObjectArray<UnityEngine.AnimationClip>(L, 2);
			UnityEditor.AnimationUtility.SetAnimationClips(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAnimatableBindings(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckUnityObject(L, 1, typeof(UnityEngine.GameObject));
			UnityEngine.GameObject arg1 = (UnityEngine.GameObject)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.GameObject));
			UnityEditor.EditorCurveBinding[] o = UnityEditor.AnimationUtility.GetAnimatableBindings(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetFloatValue(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckUnityObject(L, 1, typeof(UnityEngine.GameObject));
			UnityEditor.EditorCurveBinding arg1 = (UnityEditor.EditorCurveBinding)ToLua.CheckObject(L, 2, typeof(UnityEditor.EditorCurveBinding));
			float arg2;
			bool o = UnityEditor.AnimationUtility.GetFloatValue(arg0, arg1, out arg2);
			LuaDLL.lua_pushboolean(L, o);
			LuaDLL.lua_pushnumber(L, arg2);
			return 2;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetEditorCurveValueType(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckUnityObject(L, 1, typeof(UnityEngine.GameObject));
			UnityEditor.EditorCurveBinding arg1 = (UnityEditor.EditorCurveBinding)ToLua.CheckObject(L, 2, typeof(UnityEditor.EditorCurveBinding));
			System.Type o = UnityEditor.AnimationUtility.GetEditorCurveValueType(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetObjectReferenceValue(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckUnityObject(L, 1, typeof(UnityEngine.GameObject));
			UnityEditor.EditorCurveBinding arg1 = (UnityEditor.EditorCurveBinding)ToLua.CheckObject(L, 2, typeof(UnityEditor.EditorCurveBinding));
			UnityEngine.Object arg2 = null;
			bool o = UnityEditor.AnimationUtility.GetObjectReferenceValue(arg0, arg1, out arg2);
			LuaDLL.lua_pushboolean(L, o);
			ToLua.Push(L, arg2);
			return 2;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAnimatedObject(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckUnityObject(L, 1, typeof(UnityEngine.GameObject));
			UnityEditor.EditorCurveBinding arg1 = (UnityEditor.EditorCurveBinding)ToLua.CheckObject(L, 2, typeof(UnityEditor.EditorCurveBinding));
			UnityEngine.Object o = UnityEditor.AnimationUtility.GetAnimatedObject(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PropertyModificationToEditorCurveBinding(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UnityEditor.PropertyModification arg0 = (UnityEditor.PropertyModification)ToLua.CheckObject(L, 1, typeof(UnityEditor.PropertyModification));
			UnityEngine.GameObject arg1 = (UnityEngine.GameObject)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.GameObject));
			UnityEditor.EditorCurveBinding arg2;
			System.Type o = UnityEditor.AnimationUtility.PropertyModificationToEditorCurveBinding(arg0, arg1, out arg2);
			ToLua.Push(L, o);
			ToLua.PushValue(L, arg2);
			return 2;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetCurveBindings(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.AnimationClip arg0 = (UnityEngine.AnimationClip)ToLua.CheckUnityObject(L, 1, typeof(UnityEngine.AnimationClip));
			UnityEditor.EditorCurveBinding[] o = UnityEditor.AnimationUtility.GetCurveBindings(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetObjectReferenceCurveBindings(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.AnimationClip arg0 = (UnityEngine.AnimationClip)ToLua.CheckUnityObject(L, 1, typeof(UnityEngine.AnimationClip));
			UnityEditor.EditorCurveBinding[] o = UnityEditor.AnimationUtility.GetObjectReferenceCurveBindings(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetObjectReferenceCurve(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.AnimationClip arg0 = (UnityEngine.AnimationClip)ToLua.CheckUnityObject(L, 1, typeof(UnityEngine.AnimationClip));
			UnityEditor.EditorCurveBinding arg1 = (UnityEditor.EditorCurveBinding)ToLua.CheckObject(L, 2, typeof(UnityEditor.EditorCurveBinding));
			UnityEditor.ObjectReferenceKeyframe[] o = UnityEditor.AnimationUtility.GetObjectReferenceCurve(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetEditorCurve(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.AnimationClip arg0 = (UnityEngine.AnimationClip)ToLua.CheckUnityObject(L, 1, typeof(UnityEngine.AnimationClip));
			UnityEditor.EditorCurveBinding arg1 = (UnityEditor.EditorCurveBinding)ToLua.CheckObject(L, 2, typeof(UnityEditor.EditorCurveBinding));
			UnityEngine.AnimationCurve o = UnityEditor.AnimationUtility.GetEditorCurve(arg0, arg1);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetEditorCurve(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UnityEngine.AnimationClip arg0 = (UnityEngine.AnimationClip)ToLua.CheckUnityObject(L, 1, typeof(UnityEngine.AnimationClip));
			UnityEditor.EditorCurveBinding arg1 = (UnityEditor.EditorCurveBinding)ToLua.CheckObject(L, 2, typeof(UnityEditor.EditorCurveBinding));
			UnityEngine.AnimationCurve arg2 = (UnityEngine.AnimationCurve)ToLua.CheckObject(L, 3, typeof(UnityEngine.AnimationCurve));
			UnityEditor.AnimationUtility.SetEditorCurve(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetObjectReferenceCurve(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UnityEngine.AnimationClip arg0 = (UnityEngine.AnimationClip)ToLua.CheckUnityObject(L, 1, typeof(UnityEngine.AnimationClip));
			UnityEditor.EditorCurveBinding arg1 = (UnityEditor.EditorCurveBinding)ToLua.CheckObject(L, 2, typeof(UnityEditor.EditorCurveBinding));
			UnityEditor.ObjectReferenceKeyframe[] arg2 = ToLua.CheckObjectArray<UnityEditor.ObjectReferenceKeyframe>(L, 3);
			UnityEditor.AnimationUtility.SetObjectReferenceCurve(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetKeyBroken(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UnityEngine.AnimationCurve arg0 = (UnityEngine.AnimationCurve)ToLua.CheckObject(L, 1, typeof(UnityEngine.AnimationCurve));
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			bool arg2 = LuaDLL.luaL_checkboolean(L, 3);
			UnityEditor.AnimationUtility.SetKeyBroken(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetKeyLeftTangentMode(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UnityEngine.AnimationCurve arg0 = (UnityEngine.AnimationCurve)ToLua.CheckObject(L, 1, typeof(UnityEngine.AnimationCurve));
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			UnityEditor.AnimationUtility.TangentMode arg2 = (UnityEditor.AnimationUtility.TangentMode)(int)LuaDLL.lua_tonumber(L, 3);
			UnityEditor.AnimationUtility.SetKeyLeftTangentMode(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetKeyRightTangentMode(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UnityEngine.AnimationCurve arg0 = (UnityEngine.AnimationCurve)ToLua.CheckObject(L, 1, typeof(UnityEngine.AnimationCurve));
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			UnityEditor.AnimationUtility.TangentMode arg2 = (UnityEditor.AnimationUtility.TangentMode)(int)LuaDLL.lua_tonumber(L, 3);
			UnityEditor.AnimationUtility.SetKeyRightTangentMode(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAnimationEvents(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.AnimationClip arg0 = (UnityEngine.AnimationClip)ToLua.CheckUnityObject(L, 1, typeof(UnityEngine.AnimationClip));
			UnityEngine.AnimationEvent[] o = UnityEditor.AnimationUtility.GetAnimationEvents(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetAnimationEvents(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.AnimationClip arg0 = (UnityEngine.AnimationClip)ToLua.CheckUnityObject(L, 1, typeof(UnityEngine.AnimationClip));
			UnityEngine.AnimationEvent[] arg1 = ToLua.CheckObjectArray<UnityEngine.AnimationEvent>(L, 2);
			UnityEditor.AnimationUtility.SetAnimationEvents(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CalculateTransformPath(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.CheckUnityObject(L, 1, typeof(UnityEngine.Transform));
			UnityEngine.Transform arg1 = (UnityEngine.Transform)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.Transform));
			string o = UnityEditor.AnimationUtility.CalculateTransformPath(arg0, arg1);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAnimationClipSettings(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.AnimationClip arg0 = (UnityEngine.AnimationClip)ToLua.CheckUnityObject(L, 1, typeof(UnityEngine.AnimationClip));
			UnityEditor.AnimationClipSettings o = UnityEditor.AnimationUtility.GetAnimationClipSettings(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetAnimationClipSettings(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.AnimationClip arg0 = (UnityEngine.AnimationClip)ToLua.CheckUnityObject(L, 1, typeof(UnityEngine.AnimationClip));
			UnityEditor.AnimationClipSettings arg1 = (UnityEditor.AnimationClipSettings)ToLua.CheckObject(L, 2, typeof(UnityEditor.AnimationClipSettings));
			UnityEditor.AnimationUtility.SetAnimationClipSettings(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetAdditiveReferencePose(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UnityEngine.AnimationClip arg0 = (UnityEngine.AnimationClip)ToLua.CheckUnityObject(L, 1, typeof(UnityEngine.AnimationClip));
			UnityEngine.AnimationClip arg1 = (UnityEngine.AnimationClip)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.AnimationClip));
			float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
			UnityEditor.AnimationUtility.SetAdditiveReferencePose(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsValidPolynomialCurve(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.AnimationCurve arg0 = (UnityEngine.AnimationCurve)ToLua.CheckObject(L, 1, typeof(UnityEngine.AnimationCurve));
			bool o = UnityEditor.AnimationUtility.IsValidPolynomialCurve(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ConstrainToPolynomialCurve(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.AnimationCurve arg0 = (UnityEngine.AnimationCurve)ToLua.CheckObject(L, 1, typeof(UnityEngine.AnimationCurve));
			UnityEditor.AnimationUtility.ConstrainToPolynomialCurve(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onCurveWasModified(IntPtr L)
	{
		try
		{
			ToLua.Push(L, UnityEditor.AnimationUtility.onCurveWasModified);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onCurveWasModified(IntPtr L)
	{
		try
		{
			UnityEditor.AnimationUtility.OnCurveWasModified arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (UnityEditor.AnimationUtility.OnCurveWasModified)ToLua.CheckObject(L, 2, typeof(UnityEditor.AnimationUtility.OnCurveWasModified));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(UnityEditor.AnimationUtility.OnCurveWasModified), func) as UnityEditor.AnimationUtility.OnCurveWasModified;
			}

			UnityEditor.AnimationUtility.onCurveWasModified = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnityEditor_AnimationUtility_OnCurveWasModified(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(UnityEditor.AnimationUtility.OnCurveWasModified), func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(UnityEditor.AnimationUtility.OnCurveWasModified), func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

#endif