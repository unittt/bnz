//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class PhotoReaderManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(PhotoReaderManager), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("DoApplicationQuit", DoApplicationQuit);
		L.RegFunction("ReadAndCropPhoto", ReadAndCropPhoto);
		L.RegFunction("ReadAndCompressPhoto", ReadAndCompressPhoto);
		L.RegFunction("PickImage", PickImage);
		L.RegFunction("SetCallback", SetCallback);
		L.RegVar("MaxSize", get_MaxSize, set_MaxSize);
		L.RegVar("Instance", get_Instance, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DoApplicationQuit(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			PhotoReaderManager obj = (PhotoReaderManager)ToLua.CheckObject(L, 1, typeof(PhotoReaderManager));
			obj.DoApplicationQuit();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadAndCropPhoto(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 5);
			PhotoReaderManager obj = (PhotoReaderManager)ToLua.CheckObject(L, 1, typeof(PhotoReaderManager));
			string arg0 = ToLua.CheckString(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
			LuaFunction arg3 = ToLua.CheckLuaFunction(L, 5);
			obj.ReadAndCropPhoto(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadAndCompressPhoto(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 5);
			PhotoReaderManager obj = (PhotoReaderManager)ToLua.CheckObject(L, 1, typeof(PhotoReaderManager));
			string arg0 = ToLua.CheckString(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
			LuaFunction arg3 = ToLua.CheckLuaFunction(L, 5);
			obj.ReadAndCompressPhoto(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PickImage(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 7);
			PhotoReaderManager obj = (PhotoReaderManager)ToLua.CheckObject(L, 1, typeof(PhotoReaderManager));
			string arg0 = ToLua.CheckString(L, 2);
			bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
			UnityEngine.Vector2 arg2 = ToLua.ToVector2(L, 4);
			bool arg3 = LuaDLL.luaL_checkboolean(L, 5);
			UnityEngine.Vector2 arg4 = ToLua.ToVector2(L, 6);
			LuaFunction arg5 = ToLua.CheckLuaFunction(L, 7);
			obj.PickImage(arg0, arg1, arg2, arg3, arg4, arg5);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetCallback(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PhotoReaderManager obj = (PhotoReaderManager)ToLua.CheckObject(L, 1, typeof(PhotoReaderManager));
			LuaFunction arg0 = ToLua.CheckLuaFunction(L, 2);
			obj.SetCallback(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MaxSize(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, PhotoReaderManager.MaxSize);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Instance(IntPtr L)
	{
		try
		{
			ToLua.Push(L, PhotoReaderManager.Instance);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_MaxSize(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			PhotoReaderManager.MaxSize = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

