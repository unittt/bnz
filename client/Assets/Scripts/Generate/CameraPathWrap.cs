//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class CameraPathWrap
{
    public static void Register(LuaState L)
    {
        L.BeginClass(typeof(CameraPath), typeof(UnityEngine.MonoBehaviour));
        L.RegFunction(".geti", get_Item);
        L.RegFunction("get_Item", get_Item);
        L.RegFunction("StoredArcLength", StoredArcLength);
        L.RegFunction("StoredValueIndex", StoredValueIndex);
        L.RegFunction("AddPoint", AddPoint);
        L.RegFunction("InsertPoint", InsertPoint);
        L.RegFunction("RemovePoint", RemovePoint);
        L.RegFunction("CalculateNormalisedPercentage", CalculateNormalisedPercentage);
        L.RegFunction("DeNormalisePercentage", DeNormalisePercentage);
        L.RegFunction("GetPointNumber", GetPointNumber);
        L.RegFunction("GetPathPosition", GetPathPosition);
        L.RegFunction("GetPathRotation", GetPathRotation);
        L.RegFunction("GetPathDirection", GetPathDirection);
        L.RegFunction("GetPathTilt", GetPathTilt);
        L.RegFunction("GetPathFOV", GetPathFOV);
        L.RegFunction("GetPathOrthographicSize", GetPathOrthographicSize);
        L.RegFunction("GetPathSpeed", GetPathSpeed);
        L.RegFunction("GetPathEase", GetPathEase);
        L.RegFunction("CheckEvents", CheckEvents);
        L.RegFunction("GetPathPercentage", GetPathPercentage);
        L.RegFunction("GetNearestPointIndex", GetNearestPointIndex);
        L.RegFunction("GetLastPointIndex", GetLastPointIndex);
        L.RegFunction("GetNextPointIndex", GetNextPointIndex);
        L.RegFunction("GetCurvePercentage", GetCurvePercentage);
        L.RegFunction("GetOutroEasePercentage", GetOutroEasePercentage);
        L.RegFunction("GetIntroEasePercentage", GetIntroEasePercentage);
        L.RegFunction("GetStoredPoint", GetStoredPoint);
        L.RegFunction("RecalculateStoredValues", RecalculateStoredValues);
        L.RegFunction("GetNearestPoint", GetNearestPoint);
        L.RegFunction("GetNearestPointNear", GetNearestPointNear);
        L.RegFunction("Clear", Clear);
        L.RegFunction("GetPoint", GetPoint);
        L.RegFunction("GetPointIndex", GetPointIndex);
        L.RegFunction("GetCurveIndex", GetCurveIndex);
        L.RegFunction("ToXML", ToXML);
        L.RegFunction("FromXML", FromXML);
        L.RegVar("this", _this, null);
        L.RegVar("CURRENT_VERSION_NUMBER", get_CURRENT_VERSION_NUMBER, set_CURRENT_VERSION_NUMBER);
        L.RegVar("version", get_version, set_version);
        L.RegVar("hermiteTension", get_hermiteTension, set_hermiteTension);
        L.RegVar("hermiteBias", get_hermiteBias, set_hermiteBias);
        L.RegVar("editorPreview", get_editorPreview, set_editorPreview);
        L.RegVar("selectedPoint", get_selectedPoint, set_selectedPoint);
        L.RegVar("pointMode", get_pointMode, set_pointMode);
        L.RegVar("addPointAtPercent", get_addPointAtPercent, set_addPointAtPercent);
        L.RegVar("showGizmos", get_showGizmos, set_showGizmos);
        L.RegVar("selectedPathColour", get_selectedPathColour, set_selectedPathColour);
        L.RegVar("unselectedPathColour", get_unselectedPathColour, set_unselectedPathColour);
        L.RegVar("selectedPointColour", get_selectedPointColour, set_selectedPointColour);
        L.RegVar("unselectedPointColour", get_unselectedPointColour, set_unselectedPointColour);
        L.RegVar("showOrientationIndicators", get_showOrientationIndicators, set_showOrientationIndicators);
        L.RegVar("orientationIndicatorUnitLength", get_orientationIndicatorUnitLength, set_orientationIndicatorUnitLength);
        L.RegVar("orientationIndicatorColours", get_orientationIndicatorColours, set_orientationIndicatorColours);
        L.RegVar("autoSetStoedPointRes", get_autoSetStoedPointRes, set_autoSetStoedPointRes);
        L.RegVar("enableUndo", get_enableUndo, set_enableUndo);
        L.RegVar("showPreview", get_showPreview, set_showPreview);
        L.RegVar("enablePreviews", get_enablePreviews, set_enablePreviews);
        L.RegVar("numberOfPoints", get_numberOfPoints, null);
        L.RegVar("realNumberOfPoints", get_realNumberOfPoints, null);
        L.RegVar("numberOfCurves", get_numberOfCurves, null);
        L.RegVar("loop", get_loop, set_loop);
        L.RegVar("pathLength", get_pathLength, null);
        L.RegVar("orientationList", get_orientationList, null);
        L.RegVar("fovList", get_fovList, null);
        L.RegVar("tiltList", get_tiltList, null);
        L.RegVar("speedList", get_speedList, null);
        L.RegVar("eventList", get_eventList, null);
        L.RegVar("delayList", get_delayList, null);
        L.RegVar("bounds", get_bounds, null);
        L.RegVar("storedValueArraySize", get_storedValueArraySize, null);
        L.RegVar("pointALink", get_pointALink, null);
        L.RegVar("pointBLink", get_pointBLink, null);
        L.RegVar("storedPoints", get_storedPoints, null);
        L.RegVar("normalised", get_normalised, set_normalised);
        L.RegVar("interpolation", get_interpolation, set_interpolation);
        L.RegVar("nextPath", get_nextPath, set_nextPath);
        L.RegVar("interpolateNextPath", get_interpolateNextPath, set_interpolateNextPath);
        L.RegVar("shouldInterpolateNextPath", get_shouldInterpolateNextPath, null);
        L.RegVar("storedPointResolution", get_storedPointResolution, set_storedPointResolution);
        L.RegVar("directionWidth", get_directionWidth, set_directionWidth);
        L.RegVar("RecalculateCurvesEvent", get_RecalculateCurvesEvent, set_RecalculateCurvesEvent);
        L.RegVar("PathPointAddedEvent", get_PathPointAddedEvent, set_PathPointAddedEvent);
        L.RegVar("PathPointRemovedEvent", get_PathPointRemovedEvent, set_PathPointRemovedEvent);
        L.RegVar("CheckStartPointCullEvent", get_CheckStartPointCullEvent, set_CheckStartPointCullEvent);
        L.RegVar("CheckEndPointCullEvent", get_CheckEndPointCullEvent, set_CheckEndPointCullEvent);
        L.RegVar("CleanUpListsEvent", get_CleanUpListsEvent, set_CleanUpListsEvent);
        L.RegFunction("CleanUpListsHandler", CameraPath_CleanUpListsHandler);
        L.RegFunction("CheckEndPointCullHandler", CameraPath_CheckEndPointCullHandler);
        L.RegFunction("CheckStartPointCullHandler", CameraPath_CheckStartPointCullHandler);
        L.RegFunction("PathPointRemovedHandler", CameraPath_PathPointRemovedHandler);
        L.RegFunction("PathPointAddedHandler", CameraPath_PathPointAddedHandler);
        L.RegFunction("RecalculateCurvesHandler", CameraPath_RecalculateCurvesHandler);
        L.EndClass();
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int _get_this(IntPtr L)
    {
        try
        {
            ToLua.CheckArgsCount(L, 2);
            CameraPath obj = (CameraPath)ToLua.CheckObject(L, 1, typeof(CameraPath));
            int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
            CameraPathControlPoint o = obj[arg0];
            ToLua.Push(L, o);
            return 1;

        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int _this(IntPtr L)
    {
        try
        {
            LuaDLL.lua_pushvalue(L, 1);
            LuaDLL.tolua_bindthis(L, _get_this, null);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int get_Item(IntPtr L)
    {
        try
        {
            ToLua.CheckArgsCount(L, 2);
            CameraPath obj = (CameraPath)ToLua.CheckObject(L, 1, typeof(CameraPath));
            int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
            CameraPathControlPoint o = obj[arg0];
            ToLua.Push(L, o);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int StoredArcLength(IntPtr L)
    {
        try
        {
            ToLua.CheckArgsCount(L, 2);
            CameraPath obj = (CameraPath)ToLua.CheckObject(L, 1, typeof(CameraPath));
            int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
            float o = obj.StoredArcLength(arg0);
            LuaDLL.lua_pushnumber(L, o);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int StoredValueIndex(IntPtr L)
    {
        try
        {
            ToLua.CheckArgsCount(L, 2);
            CameraPath obj = (CameraPath)ToLua.CheckObject(L, 1, typeof(CameraPath));
            float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
            int o = obj.StoredValueIndex(arg0);
            LuaDLL.lua_pushinteger(L, o);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int AddPoint(IntPtr L)
    {
        try
        {
            int count = LuaDLL.lua_gettop(L);

            if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(CameraPath), typeof(CameraPathControlPoint)))
            {
                CameraPath obj = (CameraPath)ToLua.ToObject(L, 1);
                CameraPathControlPoint arg0 = (CameraPathControlPoint)ToLua.ToObject(L, 2);
                obj.AddPoint(arg0);
                return 0;
            }
            else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(CameraPath), typeof(UnityEngine.Vector3)))
            {
                CameraPath obj = (CameraPath)ToLua.ToObject(L, 1);
                UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
                CameraPathControlPoint o = obj.AddPoint(arg0);
                ToLua.Push(L, o);
                return 1;
            }
            else
            {
                return LuaDLL.luaL_throw(L, "invalid arguments to method: CameraPath.AddPoint");
            }
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int InsertPoint(IntPtr L)
    {
        try
        {
            int count = LuaDLL.lua_gettop(L);

            if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(CameraPath), typeof(int)))
            {
                CameraPath obj = (CameraPath)ToLua.ToObject(L, 1);
                int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
                CameraPathControlPoint o = obj.InsertPoint(arg0);
                ToLua.Push(L, o);
                return 1;
            }
            else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(CameraPath), typeof(CameraPathControlPoint), typeof(int)))
            {
                CameraPath obj = (CameraPath)ToLua.ToObject(L, 1);
                CameraPathControlPoint arg0 = (CameraPathControlPoint)ToLua.ToObject(L, 2);
                int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
                obj.InsertPoint(arg0, arg1);
                return 0;
            }
            else
            {
                return LuaDLL.luaL_throw(L, "invalid arguments to method: CameraPath.InsertPoint");
            }
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int RemovePoint(IntPtr L)
    {
        try
        {
            int count = LuaDLL.lua_gettop(L);

            if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(CameraPath), typeof(UnityEngine.Vector3)))
            {
                CameraPath obj = (CameraPath)ToLua.ToObject(L, 1);
                UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
                obj.RemovePoint(arg0);
                return 0;
            }
            else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(CameraPath), typeof(CameraPathControlPoint)))
            {
                CameraPath obj = (CameraPath)ToLua.ToObject(L, 1);
                CameraPathControlPoint arg0 = (CameraPathControlPoint)ToLua.ToObject(L, 2);
                obj.RemovePoint(arg0);
                return 0;
            }
            else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(CameraPath), typeof(int)))
            {
                CameraPath obj = (CameraPath)ToLua.ToObject(L, 1);
                int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
                obj.RemovePoint(arg0);
                return 0;
            }
            else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(CameraPath), typeof(string)))
            {
                CameraPath obj = (CameraPath)ToLua.ToObject(L, 1);
                string arg0 = ToLua.ToString(L, 2);
                bool o = obj.RemovePoint(arg0);
                LuaDLL.lua_pushboolean(L, o);
                return 1;
            }
            else
            {
                return LuaDLL.luaL_throw(L, "invalid arguments to method: CameraPath.RemovePoint");
            }
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int CalculateNormalisedPercentage(IntPtr L)
    {
        try
        {
            ToLua.CheckArgsCount(L, 2);
            CameraPath obj = (CameraPath)ToLua.CheckObject(L, 1, typeof(CameraPath));
            float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
            float o = obj.CalculateNormalisedPercentage(arg0);
            LuaDLL.lua_pushnumber(L, o);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int DeNormalisePercentage(IntPtr L)
    {
        try
        {
            ToLua.CheckArgsCount(L, 2);
            CameraPath obj = (CameraPath)ToLua.CheckObject(L, 1, typeof(CameraPath));
            float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
            float o = obj.DeNormalisePercentage(arg0);
            LuaDLL.lua_pushnumber(L, o);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int GetPointNumber(IntPtr L)
    {
        try
        {
            ToLua.CheckArgsCount(L, 2);
            CameraPath obj = (CameraPath)ToLua.CheckObject(L, 1, typeof(CameraPath));
            float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
            int o = obj.GetPointNumber(arg0);
            LuaDLL.lua_pushinteger(L, o);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int GetPathPosition(IntPtr L)
    {
        try
        {
            int count = LuaDLL.lua_gettop(L);

            if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(CameraPath), typeof(float)))
            {
                CameraPath obj = (CameraPath)ToLua.ToObject(L, 1);
                float arg0 = (float)LuaDLL.lua_tonumber(L, 2);
                UnityEngine.Vector3 o = obj.GetPathPosition(arg0);
                ToLua.Push(L, o);
                return 1;
            }
            else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(CameraPath), typeof(float), typeof(bool)))
            {
                CameraPath obj = (CameraPath)ToLua.ToObject(L, 1);
                float arg0 = (float)LuaDLL.lua_tonumber(L, 2);
                bool arg1 = LuaDLL.lua_toboolean(L, 3);
                UnityEngine.Vector3 o = obj.GetPathPosition(arg0, arg1);
                ToLua.Push(L, o);
                return 1;
            }
            else
            {
                return LuaDLL.luaL_throw(L, "invalid arguments to method: CameraPath.GetPathPosition");
            }
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int GetPathRotation(IntPtr L)
    {
        try
        {
            ToLua.CheckArgsCount(L, 3);
            CameraPath obj = (CameraPath)ToLua.CheckObject(L, 1, typeof(CameraPath));
            float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
            bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
            UnityEngine.Quaternion o = obj.GetPathRotation(arg0, arg1);
            ToLua.Push(L, o);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int GetPathDirection(IntPtr L)
    {
        try
        {
            int count = LuaDLL.lua_gettop(L);

            if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(CameraPath), typeof(float)))
            {
                CameraPath obj = (CameraPath)ToLua.ToObject(L, 1);
                float arg0 = (float)LuaDLL.lua_tonumber(L, 2);
                UnityEngine.Vector3 o = obj.GetPathDirection(arg0);
                ToLua.Push(L, o);
                return 1;
            }
            else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(CameraPath), typeof(float), typeof(bool)))
            {
                CameraPath obj = (CameraPath)ToLua.ToObject(L, 1);
                float arg0 = (float)LuaDLL.lua_tonumber(L, 2);
                bool arg1 = LuaDLL.lua_toboolean(L, 3);
                UnityEngine.Vector3 o = obj.GetPathDirection(arg0, arg1);
                ToLua.Push(L, o);
                return 1;
            }
            else
            {
                return LuaDLL.luaL_throw(L, "invalid arguments to method: CameraPath.GetPathDirection");
            }
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int GetPathTilt(IntPtr L)
    {
        try
        {
            ToLua.CheckArgsCount(L, 2);
            CameraPath obj = (CameraPath)ToLua.CheckObject(L, 1, typeof(CameraPath));
            float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
            float o = obj.GetPathTilt(arg0);
            LuaDLL.lua_pushnumber(L, o);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int GetPathFOV(IntPtr L)
    {
        try
        {
            ToLua.CheckArgsCount(L, 2);
            CameraPath obj = (CameraPath)ToLua.CheckObject(L, 1, typeof(CameraPath));
            float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
            float o = obj.GetPathFOV(arg0);
            LuaDLL.lua_pushnumber(L, o);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int GetPathOrthographicSize(IntPtr L)
    {
        try
        {
            ToLua.CheckArgsCount(L, 2);
            CameraPath obj = (CameraPath)ToLua.CheckObject(L, 1, typeof(CameraPath));
            float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
            float o = obj.GetPathOrthographicSize(arg0);
            LuaDLL.lua_pushnumber(L, o);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int GetPathSpeed(IntPtr L)
    {
        try
        {
            ToLua.CheckArgsCount(L, 2);
            CameraPath obj = (CameraPath)ToLua.CheckObject(L, 1, typeof(CameraPath));
            float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
            float o = obj.GetPathSpeed(arg0);
            LuaDLL.lua_pushnumber(L, o);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int GetPathEase(IntPtr L)
    {
        try
        {
            ToLua.CheckArgsCount(L, 2);
            CameraPath obj = (CameraPath)ToLua.CheckObject(L, 1, typeof(CameraPath));
            float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
            float o = obj.GetPathEase(arg0);
            LuaDLL.lua_pushnumber(L, o);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int CheckEvents(IntPtr L)
    {
        try
        {
            ToLua.CheckArgsCount(L, 2);
            CameraPath obj = (CameraPath)ToLua.CheckObject(L, 1, typeof(CameraPath));
            float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
            obj.CheckEvents(arg0);
            return 0;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int GetPathPercentage(IntPtr L)
    {
        try
        {
            int count = LuaDLL.lua_gettop(L);

            if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(CameraPath), typeof(int)))
            {
                CameraPath obj = (CameraPath)ToLua.ToObject(L, 1);
                int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
                float o = obj.GetPathPercentage(arg0);
                LuaDLL.lua_pushnumber(L, o);
                return 1;
            }
            else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(CameraPath), typeof(CameraPathControlPoint)))
            {
                CameraPath obj = (CameraPath)ToLua.ToObject(L, 1);
                CameraPathControlPoint arg0 = (CameraPathControlPoint)ToLua.ToObject(L, 2);
                float o = obj.GetPathPercentage(arg0);
                LuaDLL.lua_pushnumber(L, o);
                return 1;
            }
            else if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(CameraPath), typeof(float), typeof(float), typeof(float)))
            {
                CameraPath obj = (CameraPath)ToLua.ToObject(L, 1);
                float arg0 = (float)LuaDLL.lua_tonumber(L, 2);
                float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
                float arg2 = (float)LuaDLL.lua_tonumber(L, 4);
                float o = obj.GetPathPercentage(arg0, arg1, arg2);
                LuaDLL.lua_pushnumber(L, o);
                return 1;
            }
            else if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(CameraPath), typeof(CameraPathControlPoint), typeof(CameraPathControlPoint), typeof(float)))
            {
                CameraPath obj = (CameraPath)ToLua.ToObject(L, 1);
                CameraPathControlPoint arg0 = (CameraPathControlPoint)ToLua.ToObject(L, 2);
                CameraPathControlPoint arg1 = (CameraPathControlPoint)ToLua.ToObject(L, 3);
                float arg2 = (float)LuaDLL.lua_tonumber(L, 4);
                float o = obj.GetPathPercentage(arg0, arg1, arg2);
                LuaDLL.lua_pushnumber(L, o);
                return 1;
            }
            else
            {
                return LuaDLL.luaL_throw(L, "invalid arguments to method: CameraPath.GetPathPercentage");
            }
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int GetNearestPointIndex(IntPtr L)
    {
        try
        {
            ToLua.CheckArgsCount(L, 2);
            CameraPath obj = (CameraPath)ToLua.CheckObject(L, 1, typeof(CameraPath));
            float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
            int o = obj.GetNearestPointIndex(arg0);
            LuaDLL.lua_pushinteger(L, o);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int GetLastPointIndex(IntPtr L)
    {
        try
        {
            ToLua.CheckArgsCount(L, 3);
            CameraPath obj = (CameraPath)ToLua.CheckObject(L, 1, typeof(CameraPath));
            float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
            bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
            int o = obj.GetLastPointIndex(arg0, arg1);
            LuaDLL.lua_pushinteger(L, o);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int GetNextPointIndex(IntPtr L)
    {
        try
        {
            ToLua.CheckArgsCount(L, 3);
            CameraPath obj = (CameraPath)ToLua.CheckObject(L, 1, typeof(CameraPath));
            float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
            bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
            int o = obj.GetNextPointIndex(arg0, arg1);
            LuaDLL.lua_pushinteger(L, o);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int GetCurvePercentage(IntPtr L)
    {
        try
        {
            int count = LuaDLL.lua_gettop(L);

            if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(CameraPath), typeof(CameraPathPoint)))
            {
                CameraPath obj = (CameraPath)ToLua.ToObject(L, 1);
                CameraPathPoint arg0 = (CameraPathPoint)ToLua.ToObject(L, 2);
                float o = obj.GetCurvePercentage(arg0);
                LuaDLL.lua_pushnumber(L, o);
                return 1;
            }
            else if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(CameraPath), typeof(CameraPathPoint), typeof(CameraPathPoint), typeof(float)))
            {
                CameraPath obj = (CameraPath)ToLua.ToObject(L, 1);
                CameraPathPoint arg0 = (CameraPathPoint)ToLua.ToObject(L, 2);
                CameraPathPoint arg1 = (CameraPathPoint)ToLua.ToObject(L, 3);
                float arg2 = (float)LuaDLL.lua_tonumber(L, 4);
                float o = obj.GetCurvePercentage(arg0, arg1, arg2);
                LuaDLL.lua_pushnumber(L, o);
                return 1;
            }
            else if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(CameraPath), typeof(CameraPathControlPoint), typeof(CameraPathControlPoint), typeof(float)))
            {
                CameraPath obj = (CameraPath)ToLua.ToObject(L, 1);
                CameraPathControlPoint arg0 = (CameraPathControlPoint)ToLua.ToObject(L, 2);
                CameraPathControlPoint arg1 = (CameraPathControlPoint)ToLua.ToObject(L, 3);
                float arg2 = (float)LuaDLL.lua_tonumber(L, 4);
                float o = obj.GetCurvePercentage(arg0, arg1, arg2);
                LuaDLL.lua_pushnumber(L, o);
                return 1;
            }
            else
            {
                return LuaDLL.luaL_throw(L, "invalid arguments to method: CameraPath.GetCurvePercentage");
            }
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int GetOutroEasePercentage(IntPtr L)
    {
        try
        {
            ToLua.CheckArgsCount(L, 2);
            CameraPath obj = (CameraPath)ToLua.CheckObject(L, 1, typeof(CameraPath));
            CameraPathDelay arg0 = (CameraPathDelay)ToLua.CheckUnityObject(L, 2, typeof(CameraPathDelay));
            float o = obj.GetOutroEasePercentage(arg0);
            LuaDLL.lua_pushnumber(L, o);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int GetIntroEasePercentage(IntPtr L)
    {
        try
        {
            ToLua.CheckArgsCount(L, 2);
            CameraPath obj = (CameraPath)ToLua.CheckObject(L, 1, typeof(CameraPath));
            CameraPathDelay arg0 = (CameraPathDelay)ToLua.CheckUnityObject(L, 2, typeof(CameraPathDelay));
            float o = obj.GetIntroEasePercentage(arg0);
            LuaDLL.lua_pushnumber(L, o);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int GetStoredPoint(IntPtr L)
    {
        try
        {
            ToLua.CheckArgsCount(L, 2);
            CameraPath obj = (CameraPath)ToLua.CheckObject(L, 1, typeof(CameraPath));
            float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
            int o = obj.GetStoredPoint(arg0);
            LuaDLL.lua_pushinteger(L, o);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int RecalculateStoredValues(IntPtr L)
    {
        try
        {
            ToLua.CheckArgsCount(L, 1);
            CameraPath obj = (CameraPath)ToLua.CheckObject(L, 1, typeof(CameraPath));
            obj.RecalculateStoredValues();
            return 0;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int GetNearestPoint(IntPtr L)
    {
        try
        {
            int count = LuaDLL.lua_gettop(L);

            if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(CameraPath), typeof(UnityEngine.Vector3)))
            {
                CameraPath obj = (CameraPath)ToLua.ToObject(L, 1);
                UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
                float o = obj.GetNearestPoint(arg0);
                LuaDLL.lua_pushnumber(L, o);
                return 1;
            }
            else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(CameraPath), typeof(UnityEngine.Vector3), typeof(bool)))
            {
                CameraPath obj = (CameraPath)ToLua.ToObject(L, 1);
                UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
                bool arg1 = LuaDLL.lua_toboolean(L, 3);
                float o = obj.GetNearestPoint(arg0, arg1);
                LuaDLL.lua_pushnumber(L, o);
                return 1;
            }
            else if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(CameraPath), typeof(UnityEngine.Vector3), typeof(bool), typeof(int)))
            {
                CameraPath obj = (CameraPath)ToLua.ToObject(L, 1);
                UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
                bool arg1 = LuaDLL.lua_toboolean(L, 3);
                int arg2 = (int)LuaDLL.lua_tonumber(L, 4);
                float o = obj.GetNearestPoint(arg0, arg1, arg2);
                LuaDLL.lua_pushnumber(L, o);
                return 1;
            }
            else
            {
                return LuaDLL.luaL_throw(L, "invalid arguments to method: CameraPath.GetNearestPoint");
            }
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int GetNearestPointNear(IntPtr L)
    {
        try
        {
            ToLua.CheckArgsCount(L, 6);
            CameraPath obj = (CameraPath)ToLua.CheckObject(L, 1, typeof(CameraPath));
            UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
            float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
            UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 4);
            bool arg3 = LuaDLL.luaL_checkboolean(L, 5);
            int arg4 = (int)LuaDLL.luaL_checknumber(L, 6);
            float o = obj.GetNearestPointNear(arg0, arg1, arg2, arg3, arg4);
            LuaDLL.lua_pushnumber(L, o);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int Clear(IntPtr L)
    {
        try
        {
            ToLua.CheckArgsCount(L, 1);
            CameraPath obj = (CameraPath)ToLua.CheckObject(L, 1, typeof(CameraPath));
            obj.Clear();
            return 0;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int GetPoint(IntPtr L)
    {
        try
        {
            ToLua.CheckArgsCount(L, 2);
            CameraPath obj = (CameraPath)ToLua.CheckObject(L, 1, typeof(CameraPath));
            int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
            CameraPathControlPoint o = obj.GetPoint(arg0);
            ToLua.Push(L, o);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int GetPointIndex(IntPtr L)
    {
        try
        {
            ToLua.CheckArgsCount(L, 2);
            CameraPath obj = (CameraPath)ToLua.CheckObject(L, 1, typeof(CameraPath));
            int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
            int o = obj.GetPointIndex(arg0);
            LuaDLL.lua_pushinteger(L, o);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int GetCurveIndex(IntPtr L)
    {
        try
        {
            ToLua.CheckArgsCount(L, 2);
            CameraPath obj = (CameraPath)ToLua.CheckObject(L, 1, typeof(CameraPath));
            int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
            int o = obj.GetCurveIndex(arg0);
            LuaDLL.lua_pushinteger(L, o);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int ToXML(IntPtr L)
    {
        try
        {
            ToLua.CheckArgsCount(L, 1);
            CameraPath obj = (CameraPath)ToLua.CheckObject(L, 1, typeof(CameraPath));
            string o = obj.ToXML();
            LuaDLL.lua_pushstring(L, o);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int FromXML(IntPtr L)
    {
        try
        {
            ToLua.CheckArgsCount(L, 2);
            CameraPath obj = (CameraPath)ToLua.CheckObject(L, 1, typeof(CameraPath));
            string arg0 = ToLua.CheckString(L, 2);
            obj.FromXML(arg0);
            return 0;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int get_CURRENT_VERSION_NUMBER(IntPtr L)
    {
        try
        {
            LuaDLL.lua_pushnumber(L, CameraPath.CURRENT_VERSION_NUMBER);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int get_version(IntPtr L)
    {
        object o = null;

        try
        {
            o = ToLua.ToObject(L, 1);
            CameraPath obj = (CameraPath)o;
            float ret = obj.version;
            LuaDLL.lua_pushnumber(L, ret);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index version on a nil value" : e.Message);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int get_hermiteTension(IntPtr L)
    {
        object o = null;

        try
        {
            o = ToLua.ToObject(L, 1);
            CameraPath obj = (CameraPath)o;
            float ret = obj.hermiteTension;
            LuaDLL.lua_pushnumber(L, ret);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index hermiteTension on a nil value" : e.Message);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int get_hermiteBias(IntPtr L)
    {
        object o = null;

        try
        {
            o = ToLua.ToObject(L, 1);
            CameraPath obj = (CameraPath)o;
            float ret = obj.hermiteBias;
            LuaDLL.lua_pushnumber(L, ret);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index hermiteBias on a nil value" : e.Message);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int get_editorPreview(IntPtr L)
    {
        object o = null;

        try
        {
            o = ToLua.ToObject(L, 1);
            CameraPath obj = (CameraPath)o;
            UnityEngine.GameObject ret = obj.editorPreview;
            ToLua.Push(L, ret);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index editorPreview on a nil value" : e.Message);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int get_selectedPoint(IntPtr L)
    {
        object o = null;

        try
        {
            o = ToLua.ToObject(L, 1);
            CameraPath obj = (CameraPath)o;
            int ret = obj.selectedPoint;
            LuaDLL.lua_pushinteger(L, ret);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index selectedPoint on a nil value" : e.Message);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int get_pointMode(IntPtr L)
    {
        object o = null;

        try
        {
            o = ToLua.ToObject(L, 1);
            CameraPath obj = (CameraPath)o;
            CameraPath.PointModes ret = obj.pointMode;
            ToLua.Push(L, ret);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index pointMode on a nil value" : e.Message);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int get_addPointAtPercent(IntPtr L)
    {
        object o = null;

        try
        {
            o = ToLua.ToObject(L, 1);
            CameraPath obj = (CameraPath)o;
            float ret = obj.addPointAtPercent;
            LuaDLL.lua_pushnumber(L, ret);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index addPointAtPercent on a nil value" : e.Message);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int get_showGizmos(IntPtr L)
    {
        object o = null;

        try
        {
            o = ToLua.ToObject(L, 1);
            CameraPath obj = (CameraPath)o;
            bool ret = obj.showGizmos;
            LuaDLL.lua_pushboolean(L, ret);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index showGizmos on a nil value" : e.Message);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int get_selectedPathColour(IntPtr L)
    {
        object o = null;

        try
        {
            o = ToLua.ToObject(L, 1);
            CameraPath obj = (CameraPath)o;
            UnityEngine.Color ret = obj.selectedPathColour;
            ToLua.Push(L, ret);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index selectedPathColour on a nil value" : e.Message);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int get_unselectedPathColour(IntPtr L)
    {
        object o = null;

        try
        {
            o = ToLua.ToObject(L, 1);
            CameraPath obj = (CameraPath)o;
            UnityEngine.Color ret = obj.unselectedPathColour;
            ToLua.Push(L, ret);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index unselectedPathColour on a nil value" : e.Message);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int get_selectedPointColour(IntPtr L)
    {
        object o = null;

        try
        {
            o = ToLua.ToObject(L, 1);
            CameraPath obj = (CameraPath)o;
            UnityEngine.Color ret = obj.selectedPointColour;
            ToLua.Push(L, ret);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index selectedPointColour on a nil value" : e.Message);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int get_unselectedPointColour(IntPtr L)
    {
        object o = null;

        try
        {
            o = ToLua.ToObject(L, 1);
            CameraPath obj = (CameraPath)o;
            UnityEngine.Color ret = obj.unselectedPointColour;
            ToLua.Push(L, ret);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index unselectedPointColour on a nil value" : e.Message);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int get_showOrientationIndicators(IntPtr L)
    {
        object o = null;

        try
        {
            o = ToLua.ToObject(L, 1);
            CameraPath obj = (CameraPath)o;
            bool ret = obj.showOrientationIndicators;
            LuaDLL.lua_pushboolean(L, ret);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index showOrientationIndicators on a nil value" : e.Message);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int get_orientationIndicatorUnitLength(IntPtr L)
    {
        object o = null;

        try
        {
            o = ToLua.ToObject(L, 1);
            CameraPath obj = (CameraPath)o;
            float ret = obj.orientationIndicatorUnitLength;
            LuaDLL.lua_pushnumber(L, ret);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index orientationIndicatorUnitLength on a nil value" : e.Message);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int get_orientationIndicatorColours(IntPtr L)
    {
        object o = null;

        try
        {
            o = ToLua.ToObject(L, 1);
            CameraPath obj = (CameraPath)o;
            UnityEngine.Color ret = obj.orientationIndicatorColours;
            ToLua.Push(L, ret);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index orientationIndicatorColours on a nil value" : e.Message);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int get_autoSetStoedPointRes(IntPtr L)
    {
        object o = null;

        try
        {
            o = ToLua.ToObject(L, 1);
            CameraPath obj = (CameraPath)o;
            bool ret = obj.autoSetStoedPointRes;
            LuaDLL.lua_pushboolean(L, ret);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index autoSetStoedPointRes on a nil value" : e.Message);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int get_enableUndo(IntPtr L)
    {
        object o = null;

        try
        {
            o = ToLua.ToObject(L, 1);
            CameraPath obj = (CameraPath)o;
            bool ret = obj.enableUndo;
            LuaDLL.lua_pushboolean(L, ret);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index enableUndo on a nil value" : e.Message);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int get_showPreview(IntPtr L)
    {
        object o = null;

        try
        {
            o = ToLua.ToObject(L, 1);
            CameraPath obj = (CameraPath)o;
            bool ret = obj.showPreview;
            LuaDLL.lua_pushboolean(L, ret);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index showPreview on a nil value" : e.Message);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int get_enablePreviews(IntPtr L)
    {
        object o = null;

        try
        {
            o = ToLua.ToObject(L, 1);
            CameraPath obj = (CameraPath)o;
            bool ret = obj.enablePreviews;
            LuaDLL.lua_pushboolean(L, ret);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index enablePreviews on a nil value" : e.Message);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int get_numberOfPoints(IntPtr L)
    {
        object o = null;

        try
        {
            o = ToLua.ToObject(L, 1);
            CameraPath obj = (CameraPath)o;
            int ret = obj.numberOfPoints;
            LuaDLL.lua_pushinteger(L, ret);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index numberOfPoints on a nil value" : e.Message);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int get_realNumberOfPoints(IntPtr L)
    {
        object o = null;

        try
        {
            o = ToLua.ToObject(L, 1);
            CameraPath obj = (CameraPath)o;
            int ret = obj.realNumberOfPoints;
            LuaDLL.lua_pushinteger(L, ret);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index realNumberOfPoints on a nil value" : e.Message);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int get_numberOfCurves(IntPtr L)
    {
        object o = null;

        try
        {
            o = ToLua.ToObject(L, 1);
            CameraPath obj = (CameraPath)o;
            int ret = obj.numberOfCurves;
            LuaDLL.lua_pushinteger(L, ret);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index numberOfCurves on a nil value" : e.Message);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int get_loop(IntPtr L)
    {
        object o = null;

        try
        {
            o = ToLua.ToObject(L, 1);
            CameraPath obj = (CameraPath)o;
            bool ret = obj.loop;
            LuaDLL.lua_pushboolean(L, ret);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index loop on a nil value" : e.Message);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int get_pathLength(IntPtr L)
    {
        object o = null;

        try
        {
            o = ToLua.ToObject(L, 1);
            CameraPath obj = (CameraPath)o;
            float ret = obj.pathLength;
            LuaDLL.lua_pushnumber(L, ret);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index pathLength on a nil value" : e.Message);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int get_orientationList(IntPtr L)
    {
        object o = null;

        try
        {
            o = ToLua.ToObject(L, 1);
            CameraPath obj = (CameraPath)o;
            CameraPathOrientationList ret = obj.orientationList;
            ToLua.Push(L, ret);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index orientationList on a nil value" : e.Message);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int get_fovList(IntPtr L)
    {
        object o = null;

        try
        {
            o = ToLua.ToObject(L, 1);
            CameraPath obj = (CameraPath)o;
            CameraPathFOVList ret = obj.fovList;
            ToLua.Push(L, ret);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index fovList on a nil value" : e.Message);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int get_tiltList(IntPtr L)
    {
        object o = null;

        try
        {
            o = ToLua.ToObject(L, 1);
            CameraPath obj = (CameraPath)o;
            CameraPathTiltList ret = obj.tiltList;
            ToLua.Push(L, ret);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index tiltList on a nil value" : e.Message);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int get_speedList(IntPtr L)
    {
        object o = null;

        try
        {
            o = ToLua.ToObject(L, 1);
            CameraPath obj = (CameraPath)o;
            CameraPathSpeedList ret = obj.speedList;
            ToLua.Push(L, ret);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index speedList on a nil value" : e.Message);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int get_eventList(IntPtr L)
    {
        object o = null;

        try
        {
            o = ToLua.ToObject(L, 1);
            CameraPath obj = (CameraPath)o;
            CameraPathEventList ret = obj.eventList;
            ToLua.Push(L, ret);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index eventList on a nil value" : e.Message);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int get_delayList(IntPtr L)
    {
        object o = null;

        try
        {
            o = ToLua.ToObject(L, 1);
            CameraPath obj = (CameraPath)o;
            CameraPathDelayList ret = obj.delayList;
            ToLua.Push(L, ret);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index delayList on a nil value" : e.Message);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int get_bounds(IntPtr L)
    {
        object o = null;

        try
        {
            o = ToLua.ToObject(L, 1);
            CameraPath obj = (CameraPath)o;
            UnityEngine.Bounds ret = obj.bounds;
            ToLua.Push(L, ret);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index bounds on a nil value" : e.Message);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int get_storedValueArraySize(IntPtr L)
    {
        object o = null;

        try
        {
            o = ToLua.ToObject(L, 1);
            CameraPath obj = (CameraPath)o;
            int ret = obj.storedValueArraySize;
            LuaDLL.lua_pushinteger(L, ret);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index storedValueArraySize on a nil value" : e.Message);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int get_pointALink(IntPtr L)
    {
        object o = null;

        try
        {
            o = ToLua.ToObject(L, 1);
            CameraPath obj = (CameraPath)o;
            CameraPathControlPoint[] ret = obj.pointALink;
            ToLua.Push(L, ret);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index pointALink on a nil value" : e.Message);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int get_pointBLink(IntPtr L)
    {
        object o = null;

        try
        {
            o = ToLua.ToObject(L, 1);
            CameraPath obj = (CameraPath)o;
            CameraPathControlPoint[] ret = obj.pointBLink;
            ToLua.Push(L, ret);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index pointBLink on a nil value" : e.Message);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int get_storedPoints(IntPtr L)
    {
        object o = null;

        try
        {
            o = ToLua.ToObject(L, 1);
            CameraPath obj = (CameraPath)o;
            UnityEngine.Vector3[] ret = obj.storedPoints;
            ToLua.Push(L, ret);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index storedPoints on a nil value" : e.Message);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int get_normalised(IntPtr L)
    {
        object o = null;

        try
        {
            o = ToLua.ToObject(L, 1);
            CameraPath obj = (CameraPath)o;
            bool ret = obj.normalised;
            LuaDLL.lua_pushboolean(L, ret);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index normalised on a nil value" : e.Message);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int get_interpolation(IntPtr L)
    {
        object o = null;

        try
        {
            o = ToLua.ToObject(L, 1);
            CameraPath obj = (CameraPath)o;
            CameraPath.Interpolation ret = obj.interpolation;
            ToLua.Push(L, ret);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index interpolation on a nil value" : e.Message);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int get_nextPath(IntPtr L)
    {
        object o = null;

        try
        {
            o = ToLua.ToObject(L, 1);
            CameraPath obj = (CameraPath)o;
            CameraPath ret = obj.nextPath;
            ToLua.Push(L, ret);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index nextPath on a nil value" : e.Message);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int get_interpolateNextPath(IntPtr L)
    {
        object o = null;

        try
        {
            o = ToLua.ToObject(L, 1);
            CameraPath obj = (CameraPath)o;
            bool ret = obj.interpolateNextPath;
            LuaDLL.lua_pushboolean(L, ret);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index interpolateNextPath on a nil value" : e.Message);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int get_shouldInterpolateNextPath(IntPtr L)
    {
        object o = null;

        try
        {
            o = ToLua.ToObject(L, 1);
            CameraPath obj = (CameraPath)o;
            bool ret = obj.shouldInterpolateNextPath;
            LuaDLL.lua_pushboolean(L, ret);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index shouldInterpolateNextPath on a nil value" : e.Message);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int get_storedPointResolution(IntPtr L)
    {
        object o = null;

        try
        {
            o = ToLua.ToObject(L, 1);
            CameraPath obj = (CameraPath)o;
            float ret = obj.storedPointResolution;
            LuaDLL.lua_pushnumber(L, ret);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index storedPointResolution on a nil value" : e.Message);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int get_directionWidth(IntPtr L)
    {
        object o = null;

        try
        {
            o = ToLua.ToObject(L, 1);
            CameraPath obj = (CameraPath)o;
            float ret = obj.directionWidth;
            LuaDLL.lua_pushnumber(L, ret);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index directionWidth on a nil value" : e.Message);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int get_RecalculateCurvesEvent(IntPtr L)
    {
        ToLua.Push(L, new EventObject("CameraPath.RecalculateCurvesEvent"));
        return 1;
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int get_PathPointAddedEvent(IntPtr L)
    {
        ToLua.Push(L, new EventObject("CameraPath.PathPointAddedEvent"));
        return 1;
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int get_PathPointRemovedEvent(IntPtr L)
    {
        ToLua.Push(L, new EventObject("CameraPath.PathPointRemovedEvent"));
        return 1;
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int get_CheckStartPointCullEvent(IntPtr L)
    {
        ToLua.Push(L, new EventObject("CameraPath.CheckStartPointCullEvent"));
        return 1;
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int get_CheckEndPointCullEvent(IntPtr L)
    {
        ToLua.Push(L, new EventObject("CameraPath.CheckEndPointCullEvent"));
        return 1;
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int get_CleanUpListsEvent(IntPtr L)
    {
        ToLua.Push(L, new EventObject("CameraPath.CleanUpListsEvent"));
        return 1;
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int set_CURRENT_VERSION_NUMBER(IntPtr L)
    {
        try
        {
            float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
            CameraPath.CURRENT_VERSION_NUMBER = arg0;
            return 0;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int set_version(IntPtr L)
    {
        object o = null;

        try
        {
            o = ToLua.ToObject(L, 1);
            CameraPath obj = (CameraPath)o;
            float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
            obj.version = arg0;
            return 0;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index version on a nil value" : e.Message);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int set_hermiteTension(IntPtr L)
    {
        object o = null;

        try
        {
            o = ToLua.ToObject(L, 1);
            CameraPath obj = (CameraPath)o;
            float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
            obj.hermiteTension = arg0;
            return 0;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index hermiteTension on a nil value" : e.Message);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int set_hermiteBias(IntPtr L)
    {
        object o = null;

        try
        {
            o = ToLua.ToObject(L, 1);
            CameraPath obj = (CameraPath)o;
            float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
            obj.hermiteBias = arg0;
            return 0;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index hermiteBias on a nil value" : e.Message);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int set_editorPreview(IntPtr L)
    {
        object o = null;

        try
        {
            o = ToLua.ToObject(L, 1);
            CameraPath obj = (CameraPath)o;
            UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.GameObject));
            obj.editorPreview = arg0;
            return 0;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index editorPreview on a nil value" : e.Message);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int set_selectedPoint(IntPtr L)
    {
        object o = null;

        try
        {
            o = ToLua.ToObject(L, 1);
            CameraPath obj = (CameraPath)o;
            int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
            obj.selectedPoint = arg0;
            return 0;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index selectedPoint on a nil value" : e.Message);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int set_pointMode(IntPtr L)
    {
        object o = null;

        try
        {
            o = ToLua.ToObject(L, 1);
            CameraPath obj = (CameraPath)o;
            CameraPath.PointModes arg0 = (CameraPath.PointModes)(int)LuaDLL.lua_tonumber(L, 2);
            obj.pointMode = arg0;
            return 0;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index pointMode on a nil value" : e.Message);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int set_addPointAtPercent(IntPtr L)
    {
        object o = null;

        try
        {
            o = ToLua.ToObject(L, 1);
            CameraPath obj = (CameraPath)o;
            float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
            obj.addPointAtPercent = arg0;
            return 0;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index addPointAtPercent on a nil value" : e.Message);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int set_showGizmos(IntPtr L)
    {
        object o = null;

        try
        {
            o = ToLua.ToObject(L, 1);
            CameraPath obj = (CameraPath)o;
            bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
            obj.showGizmos = arg0;
            return 0;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index showGizmos on a nil value" : e.Message);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int set_selectedPathColour(IntPtr L)
    {
        object o = null;

        try
        {
            o = ToLua.ToObject(L, 1);
            CameraPath obj = (CameraPath)o;
            UnityEngine.Color arg0 = ToLua.ToColor(L, 2);
            obj.selectedPathColour = arg0;
            return 0;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index selectedPathColour on a nil value" : e.Message);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int set_unselectedPathColour(IntPtr L)
    {
        object o = null;

        try
        {
            o = ToLua.ToObject(L, 1);
            CameraPath obj = (CameraPath)o;
            UnityEngine.Color arg0 = ToLua.ToColor(L, 2);
            obj.unselectedPathColour = arg0;
            return 0;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index unselectedPathColour on a nil value" : e.Message);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int set_selectedPointColour(IntPtr L)
    {
        object o = null;

        try
        {
            o = ToLua.ToObject(L, 1);
            CameraPath obj = (CameraPath)o;
            UnityEngine.Color arg0 = ToLua.ToColor(L, 2);
            obj.selectedPointColour = arg0;
            return 0;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index selectedPointColour on a nil value" : e.Message);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int set_unselectedPointColour(IntPtr L)
    {
        object o = null;

        try
        {
            o = ToLua.ToObject(L, 1);
            CameraPath obj = (CameraPath)o;
            UnityEngine.Color arg0 = ToLua.ToColor(L, 2);
            obj.unselectedPointColour = arg0;
            return 0;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index unselectedPointColour on a nil value" : e.Message);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int set_showOrientationIndicators(IntPtr L)
    {
        object o = null;

        try
        {
            o = ToLua.ToObject(L, 1);
            CameraPath obj = (CameraPath)o;
            bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
            obj.showOrientationIndicators = arg0;
            return 0;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index showOrientationIndicators on a nil value" : e.Message);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int set_orientationIndicatorUnitLength(IntPtr L)
    {
        object o = null;

        try
        {
            o = ToLua.ToObject(L, 1);
            CameraPath obj = (CameraPath)o;
            float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
            obj.orientationIndicatorUnitLength = arg0;
            return 0;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index orientationIndicatorUnitLength on a nil value" : e.Message);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int set_orientationIndicatorColours(IntPtr L)
    {
        object o = null;

        try
        {
            o = ToLua.ToObject(L, 1);
            CameraPath obj = (CameraPath)o;
            UnityEngine.Color arg0 = ToLua.ToColor(L, 2);
            obj.orientationIndicatorColours = arg0;
            return 0;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index orientationIndicatorColours on a nil value" : e.Message);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int set_autoSetStoedPointRes(IntPtr L)
    {
        object o = null;

        try
        {
            o = ToLua.ToObject(L, 1);
            CameraPath obj = (CameraPath)o;
            bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
            obj.autoSetStoedPointRes = arg0;
            return 0;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index autoSetStoedPointRes on a nil value" : e.Message);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int set_enableUndo(IntPtr L)
    {
        object o = null;

        try
        {
            o = ToLua.ToObject(L, 1);
            CameraPath obj = (CameraPath)o;
            bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
            obj.enableUndo = arg0;
            return 0;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index enableUndo on a nil value" : e.Message);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int set_showPreview(IntPtr L)
    {
        object o = null;

        try
        {
            o = ToLua.ToObject(L, 1);
            CameraPath obj = (CameraPath)o;
            bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
            obj.showPreview = arg0;
            return 0;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index showPreview on a nil value" : e.Message);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int set_enablePreviews(IntPtr L)
    {
        object o = null;

        try
        {
            o = ToLua.ToObject(L, 1);
            CameraPath obj = (CameraPath)o;
            bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
            obj.enablePreviews = arg0;
            return 0;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index enablePreviews on a nil value" : e.Message);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int set_loop(IntPtr L)
    {
        object o = null;

        try
        {
            o = ToLua.ToObject(L, 1);
            CameraPath obj = (CameraPath)o;
            bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
            obj.loop = arg0;
            return 0;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index loop on a nil value" : e.Message);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int set_normalised(IntPtr L)
    {
        object o = null;

        try
        {
            o = ToLua.ToObject(L, 1);
            CameraPath obj = (CameraPath)o;
            bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
            obj.normalised = arg0;
            return 0;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index normalised on a nil value" : e.Message);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int set_interpolation(IntPtr L)
    {
        object o = null;

        try
        {
            o = ToLua.ToObject(L, 1);
            CameraPath obj = (CameraPath)o;
            CameraPath.Interpolation arg0 = (CameraPath.Interpolation)(int)LuaDLL.lua_tonumber(L, 2);
            obj.interpolation = arg0;
            return 0;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index interpolation on a nil value" : e.Message);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int set_nextPath(IntPtr L)
    {
        object o = null;

        try
        {
            o = ToLua.ToObject(L, 1);
            CameraPath obj = (CameraPath)o;
            CameraPath arg0 = (CameraPath)ToLua.CheckUnityObject(L, 2, typeof(CameraPath));
            obj.nextPath = arg0;
            return 0;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index nextPath on a nil value" : e.Message);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int set_interpolateNextPath(IntPtr L)
    {
        object o = null;

        try
        {
            o = ToLua.ToObject(L, 1);
            CameraPath obj = (CameraPath)o;
            bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
            obj.interpolateNextPath = arg0;
            return 0;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index interpolateNextPath on a nil value" : e.Message);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int set_storedPointResolution(IntPtr L)
    {
        object o = null;

        try
        {
            o = ToLua.ToObject(L, 1);
            CameraPath obj = (CameraPath)o;
            float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
            obj.storedPointResolution = arg0;
            return 0;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index storedPointResolution on a nil value" : e.Message);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int set_directionWidth(IntPtr L)
    {
        object o = null;

        try
        {
            o = ToLua.ToObject(L, 1);
            CameraPath obj = (CameraPath)o;
            float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
            obj.directionWidth = arg0;
            return 0;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index directionWidth on a nil value" : e.Message);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int set_RecalculateCurvesEvent(IntPtr L)
    {
        try
        {
            CameraPath obj = (CameraPath)ToLua.CheckObject(L, 1, typeof(CameraPath));
            EventObject arg0 = null;

            if (LuaDLL.lua_isuserdata(L, 2) != 0)
            {
                arg0 = (EventObject)ToLua.ToObject(L, 2);
            }
            else
            {
                return LuaDLL.luaL_throw(L, "The event 'CameraPath.RecalculateCurvesEvent' can only appear on the left hand side of += or -= when used outside of the type 'CameraPath'");
            }

            if (arg0.op == EventOp.Add)
            {
                CameraPath.RecalculateCurvesHandler ev = (CameraPath.RecalculateCurvesHandler)DelegateFactory.CreateDelegate(typeof(CameraPath.RecalculateCurvesHandler), arg0.func);
                obj.RecalculateCurvesEvent += ev;
            }
            else if (arg0.op == EventOp.Sub)
            {
                CameraPath.RecalculateCurvesHandler ev = (CameraPath.RecalculateCurvesHandler)LuaMisc.GetEventHandler(obj, typeof(CameraPath), "RecalculateCurvesEvent");
                Delegate[] ds = ev.GetInvocationList();
                LuaState state = LuaState.Get(L);

                for (int i = 0; i < ds.Length; i++)
                {
                    ev = (CameraPath.RecalculateCurvesHandler)ds[i];
                    LuaDelegate ld = ev.Target as LuaDelegate;

                    if (ld != null && ld.func == arg0.func)
                    {
                        obj.RecalculateCurvesEvent -= ev;
                        state.DelayDispose(ld.func);
                        break;
                    }
                }

                arg0.func.Dispose();
            }

            return 0;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int set_PathPointAddedEvent(IntPtr L)
    {
        try
        {
            CameraPath obj = (CameraPath)ToLua.CheckObject(L, 1, typeof(CameraPath));
            EventObject arg0 = null;

            if (LuaDLL.lua_isuserdata(L, 2) != 0)
            {
                arg0 = (EventObject)ToLua.ToObject(L, 2);
            }
            else
            {
                return LuaDLL.luaL_throw(L, "The event 'CameraPath.PathPointAddedEvent' can only appear on the left hand side of += or -= when used outside of the type 'CameraPath'");
            }

            if (arg0.op == EventOp.Add)
            {
                CameraPath.PathPointAddedHandler ev = (CameraPath.PathPointAddedHandler)DelegateFactory.CreateDelegate(typeof(CameraPath.PathPointAddedHandler), arg0.func);
                obj.PathPointAddedEvent += ev;
            }
            else if (arg0.op == EventOp.Sub)
            {
                CameraPath.PathPointAddedHandler ev = (CameraPath.PathPointAddedHandler)LuaMisc.GetEventHandler(obj, typeof(CameraPath), "PathPointAddedEvent");
                Delegate[] ds = ev.GetInvocationList();
                LuaState state = LuaState.Get(L);

                for (int i = 0; i < ds.Length; i++)
                {
                    ev = (CameraPath.PathPointAddedHandler)ds[i];
                    LuaDelegate ld = ev.Target as LuaDelegate;

                    if (ld != null && ld.func == arg0.func)
                    {
                        obj.PathPointAddedEvent -= ev;
                        state.DelayDispose(ld.func);
                        break;
                    }
                }

                arg0.func.Dispose();
            }

            return 0;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int set_PathPointRemovedEvent(IntPtr L)
    {
        try
        {
            CameraPath obj = (CameraPath)ToLua.CheckObject(L, 1, typeof(CameraPath));
            EventObject arg0 = null;

            if (LuaDLL.lua_isuserdata(L, 2) != 0)
            {
                arg0 = (EventObject)ToLua.ToObject(L, 2);
            }
            else
            {
                return LuaDLL.luaL_throw(L, "The event 'CameraPath.PathPointRemovedEvent' can only appear on the left hand side of += or -= when used outside of the type 'CameraPath'");
            }

            if (arg0.op == EventOp.Add)
            {
                CameraPath.PathPointRemovedHandler ev = (CameraPath.PathPointRemovedHandler)DelegateFactory.CreateDelegate(typeof(CameraPath.PathPointRemovedHandler), arg0.func);
                obj.PathPointRemovedEvent += ev;
            }
            else if (arg0.op == EventOp.Sub)
            {
                CameraPath.PathPointRemovedHandler ev = (CameraPath.PathPointRemovedHandler)LuaMisc.GetEventHandler(obj, typeof(CameraPath), "PathPointRemovedEvent");
                Delegate[] ds = ev.GetInvocationList();
                LuaState state = LuaState.Get(L);

                for (int i = 0; i < ds.Length; i++)
                {
                    ev = (CameraPath.PathPointRemovedHandler)ds[i];
                    LuaDelegate ld = ev.Target as LuaDelegate;

                    if (ld != null && ld.func == arg0.func)
                    {
                        obj.PathPointRemovedEvent -= ev;
                        state.DelayDispose(ld.func);
                        break;
                    }
                }

                arg0.func.Dispose();
            }

            return 0;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int set_CheckStartPointCullEvent(IntPtr L)
    {
        try
        {
            CameraPath obj = (CameraPath)ToLua.CheckObject(L, 1, typeof(CameraPath));
            EventObject arg0 = null;

            if (LuaDLL.lua_isuserdata(L, 2) != 0)
            {
                arg0 = (EventObject)ToLua.ToObject(L, 2);
            }
            else
            {
                return LuaDLL.luaL_throw(L, "The event 'CameraPath.CheckStartPointCullEvent' can only appear on the left hand side of += or -= when used outside of the type 'CameraPath'");
            }

            if (arg0.op == EventOp.Add)
            {
                CameraPath.CheckStartPointCullHandler ev = (CameraPath.CheckStartPointCullHandler)DelegateFactory.CreateDelegate(typeof(CameraPath.CheckStartPointCullHandler), arg0.func);
                obj.CheckStartPointCullEvent += ev;
            }
            else if (arg0.op == EventOp.Sub)
            {
                CameraPath.CheckStartPointCullHandler ev = (CameraPath.CheckStartPointCullHandler)LuaMisc.GetEventHandler(obj, typeof(CameraPath), "CheckStartPointCullEvent");
                Delegate[] ds = ev.GetInvocationList();
                LuaState state = LuaState.Get(L);

                for (int i = 0; i < ds.Length; i++)
                {
                    ev = (CameraPath.CheckStartPointCullHandler)ds[i];
                    LuaDelegate ld = ev.Target as LuaDelegate;

                    if (ld != null && ld.func == arg0.func)
                    {
                        obj.CheckStartPointCullEvent -= ev;
                        state.DelayDispose(ld.func);
                        break;
                    }
                }

                arg0.func.Dispose();
            }

            return 0;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int set_CheckEndPointCullEvent(IntPtr L)
    {
        try
        {
            CameraPath obj = (CameraPath)ToLua.CheckObject(L, 1, typeof(CameraPath));
            EventObject arg0 = null;

            if (LuaDLL.lua_isuserdata(L, 2) != 0)
            {
                arg0 = (EventObject)ToLua.ToObject(L, 2);
            }
            else
            {
                return LuaDLL.luaL_throw(L, "The event 'CameraPath.CheckEndPointCullEvent' can only appear on the left hand side of += or -= when used outside of the type 'CameraPath'");
            }

            if (arg0.op == EventOp.Add)
            {
                CameraPath.CheckEndPointCullHandler ev = (CameraPath.CheckEndPointCullHandler)DelegateFactory.CreateDelegate(typeof(CameraPath.CheckEndPointCullHandler), arg0.func);
                obj.CheckEndPointCullEvent += ev;
            }
            else if (arg0.op == EventOp.Sub)
            {
                CameraPath.CheckEndPointCullHandler ev = (CameraPath.CheckEndPointCullHandler)LuaMisc.GetEventHandler(obj, typeof(CameraPath), "CheckEndPointCullEvent");
                Delegate[] ds = ev.GetInvocationList();
                LuaState state = LuaState.Get(L);

                for (int i = 0; i < ds.Length; i++)
                {
                    ev = (CameraPath.CheckEndPointCullHandler)ds[i];
                    LuaDelegate ld = ev.Target as LuaDelegate;

                    if (ld != null && ld.func == arg0.func)
                    {
                        obj.CheckEndPointCullEvent -= ev;
                        state.DelayDispose(ld.func);
                        break;
                    }
                }

                arg0.func.Dispose();
            }

            return 0;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int set_CleanUpListsEvent(IntPtr L)
    {
        try
        {
            CameraPath obj = (CameraPath)ToLua.CheckObject(L, 1, typeof(CameraPath));
            EventObject arg0 = null;

            if (LuaDLL.lua_isuserdata(L, 2) != 0)
            {
                arg0 = (EventObject)ToLua.ToObject(L, 2);
            }
            else
            {
                return LuaDLL.luaL_throw(L, "The event 'CameraPath.CleanUpListsEvent' can only appear on the left hand side of += or -= when used outside of the type 'CameraPath'");
            }

            if (arg0.op == EventOp.Add)
            {
                CameraPath.CleanUpListsHandler ev = (CameraPath.CleanUpListsHandler)DelegateFactory.CreateDelegate(typeof(CameraPath.CleanUpListsHandler), arg0.func);
                obj.CleanUpListsEvent += ev;
            }
            else if (arg0.op == EventOp.Sub)
            {
                CameraPath.CleanUpListsHandler ev = (CameraPath.CleanUpListsHandler)LuaMisc.GetEventHandler(obj, typeof(CameraPath), "CleanUpListsEvent");
                Delegate[] ds = ev.GetInvocationList();
                LuaState state = LuaState.Get(L);

                for (int i = 0; i < ds.Length; i++)
                {
                    ev = (CameraPath.CleanUpListsHandler)ds[i];
                    LuaDelegate ld = ev.Target as LuaDelegate;

                    if (ld != null && ld.func == arg0.func)
                    {
                        obj.CleanUpListsEvent -= ev;
                        state.DelayDispose(ld.func);
                        break;
                    }
                }

                arg0.func.Dispose();
            }

            return 0;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int CameraPath_CleanUpListsHandler(IntPtr L)
    {
        try
        {
            int count = LuaDLL.lua_gettop(L);
            LuaFunction func = ToLua.CheckLuaFunction(L, 1);

            if (count == 1)
            {
                Delegate arg1 = DelegateFactory.CreateDelegate(typeof(CameraPath.CleanUpListsHandler), func);
                ToLua.Push(L, arg1);
            }
            else
            {
                LuaTable self = ToLua.CheckLuaTable(L, 2);
                Delegate arg1 = DelegateFactory.CreateDelegate(typeof(CameraPath.CleanUpListsHandler), func, self);
                ToLua.Push(L, arg1);
            }
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int CameraPath_CheckEndPointCullHandler(IntPtr L)
    {
        try
        {
            int count = LuaDLL.lua_gettop(L);
            LuaFunction func = ToLua.CheckLuaFunction(L, 1);

            if (count == 1)
            {
                Delegate arg1 = DelegateFactory.CreateDelegate(typeof(CameraPath.CheckEndPointCullHandler), func);
                ToLua.Push(L, arg1);
            }
            else
            {
                LuaTable self = ToLua.CheckLuaTable(L, 2);
                Delegate arg1 = DelegateFactory.CreateDelegate(typeof(CameraPath.CheckEndPointCullHandler), func, self);
                ToLua.Push(L, arg1);
            }
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int CameraPath_CheckStartPointCullHandler(IntPtr L)
    {
        try
        {
            int count = LuaDLL.lua_gettop(L);
            LuaFunction func = ToLua.CheckLuaFunction(L, 1);

            if (count == 1)
            {
                Delegate arg1 = DelegateFactory.CreateDelegate(typeof(CameraPath.CheckStartPointCullHandler), func);
                ToLua.Push(L, arg1);
            }
            else
            {
                LuaTable self = ToLua.CheckLuaTable(L, 2);
                Delegate arg1 = DelegateFactory.CreateDelegate(typeof(CameraPath.CheckStartPointCullHandler), func, self);
                ToLua.Push(L, arg1);
            }
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int CameraPath_PathPointRemovedHandler(IntPtr L)
    {
        try
        {
            int count = LuaDLL.lua_gettop(L);
            LuaFunction func = ToLua.CheckLuaFunction(L, 1);

            if (count == 1)
            {
                Delegate arg1 = DelegateFactory.CreateDelegate(typeof(CameraPath.PathPointRemovedHandler), func);
                ToLua.Push(L, arg1);
            }
            else
            {
                LuaTable self = ToLua.CheckLuaTable(L, 2);
                Delegate arg1 = DelegateFactory.CreateDelegate(typeof(CameraPath.PathPointRemovedHandler), func, self);
                ToLua.Push(L, arg1);
            }
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int CameraPath_PathPointAddedHandler(IntPtr L)
    {
        try
        {
            int count = LuaDLL.lua_gettop(L);
            LuaFunction func = ToLua.CheckLuaFunction(L, 1);

            if (count == 1)
            {
                Delegate arg1 = DelegateFactory.CreateDelegate(typeof(CameraPath.PathPointAddedHandler), func);
                ToLua.Push(L, arg1);
            }
            else
            {
                LuaTable self = ToLua.CheckLuaTable(L, 2);
                Delegate arg1 = DelegateFactory.CreateDelegate(typeof(CameraPath.PathPointAddedHandler), func, self);
                ToLua.Push(L, arg1);
            }
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int CameraPath_RecalculateCurvesHandler(IntPtr L)
    {
        try
        {
            int count = LuaDLL.lua_gettop(L);
            LuaFunction func = ToLua.CheckLuaFunction(L, 1);

            if (count == 1)
            {
                Delegate arg1 = DelegateFactory.CreateDelegate(typeof(CameraPath.RecalculateCurvesHandler), func);
                ToLua.Push(L, arg1);
            }
            else
            {
                LuaTable self = ToLua.CheckLuaTable(L, 2);
                Delegate arg1 = DelegateFactory.CreateDelegate(typeof(CameraPath.RecalculateCurvesHandler), func, self);
                ToLua.Push(L, arg1);
            }
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }
}

