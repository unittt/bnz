//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class ScreenResizeManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(ScreenResizeManager), typeof(System.Object));
		L.RegFunction("SetOnOrientationChangedCallback", SetOnOrientationChangedCallback);
		L.RegFunction("GetRect", GetRect);
		L.RegFunction("IsOrientationRight", IsOrientationRight);
		L.RegFunction("IsNeedResize", IsNeedResize);
		L.RegFunction("ResizePanel", ResizePanel);
		L.RegFunction("ForceScreenSize", ForceScreenSize);
		L.RegFunction("ScreenFilling", ScreenFilling);
		L.RegFunction("GetScreenOrientation", GetScreenOrientation);
		L.RegFunction("GetPhoneState", GetPhoneState);
		L.RegFunction("SetScreenOrientation", SetScreenOrientation);
		L.RegFunction("SetPhoneState", SetPhoneState);
		L.RegFunction("New", _CreateScreenResizeManager);
		L.RegVar("luaOnOrientationChanged", get_luaOnOrientationChanged, set_luaOnOrientationChanged);
		L.RegVar("Instance", get_Instance, null);
		L.RegVar("OnOrientationChanged", get_OnOrientationChanged, set_OnOrientationChanged);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateScreenResizeManager(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				ScreenResizeManager obj = new ScreenResizeManager();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: ScreenResizeManager.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetOnOrientationChangedCallback(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ScreenResizeManager obj = (ScreenResizeManager)ToLua.CheckObject(L, 1, typeof(ScreenResizeManager));
			LuaFunction arg0 = ToLua.CheckLuaFunction(L, 2);
			obj.SetOnOrientationChangedCallback(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetRect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ScreenResizeManager obj = (ScreenResizeManager)ToLua.CheckObject(L, 1, typeof(ScreenResizeManager));
			ScreenResizeManager.Rect o = obj.GetRect();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsOrientationRight(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ScreenResizeManager obj = (ScreenResizeManager)ToLua.CheckObject(L, 1, typeof(ScreenResizeManager));
			bool o = obj.IsOrientationRight();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsNeedResize(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ScreenResizeManager obj = (ScreenResizeManager)ToLua.CheckObject(L, 1, typeof(ScreenResizeManager));
			bool o = obj.IsNeedResize();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ResizePanel(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			ScreenResizeManager obj = (ScreenResizeManager)ToLua.CheckObject(L, 1, typeof(ScreenResizeManager));
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.GameObject));
			bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
			obj.ResizePanel(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForceScreenSize(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ScreenResizeManager obj = (ScreenResizeManager)ToLua.CheckObject(L, 1, typeof(ScreenResizeManager));
			UIWidget arg0 = (UIWidget)ToLua.CheckUnityObject(L, 2, typeof(UIWidget));
			obj.ForceScreenSize(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ScreenFilling(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			ScreenResizeManager obj = (ScreenResizeManager)ToLua.CheckObject(L, 1, typeof(ScreenResizeManager));
			UIWidget arg0 = (UIWidget)ToLua.CheckUnityObject(L, 2, typeof(UIWidget));
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			obj.ScreenFilling(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetScreenOrientation(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			UnityEngine.ScreenOrientation o = ScreenResizeManager.GetScreenOrientation();
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetPhoneState(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			ScreenResizeManager.PhoneState o = ScreenResizeManager.GetPhoneState();
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetScreenOrientation(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.ScreenOrientation arg0 = (UnityEngine.ScreenOrientation)(int)LuaDLL.lua_tonumber(L, 1);
			ScreenResizeManager.SetScreenOrientation(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetPhoneState(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ScreenResizeManager.PhoneState arg0 = (ScreenResizeManager.PhoneState)(int)LuaDLL.lua_tonumber(L, 1);
			ScreenResizeManager.SetPhoneState(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_luaOnOrientationChanged(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ScreenResizeManager obj = (ScreenResizeManager)o;
			LuaInterface.LuaFunction ret = obj.luaOnOrientationChanged;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index luaOnOrientationChanged on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Instance(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, ScreenResizeManager.Instance);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnOrientationChanged(IntPtr L)
	{
		ToLua.Push(L, new EventObject("ScreenResizeManager.OnOrientationChanged"));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_luaOnOrientationChanged(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ScreenResizeManager obj = (ScreenResizeManager)o;
			LuaFunction arg0 = ToLua.CheckLuaFunction(L, 2);
			obj.luaOnOrientationChanged = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index luaOnOrientationChanged on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnOrientationChanged(IntPtr L)
	{
		try
		{
			ScreenResizeManager obj = (ScreenResizeManager)ToLua.CheckObject(L, 1, typeof(ScreenResizeManager));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'ScreenResizeManager.OnOrientationChanged' can only appear on the left hand side of += or -= when used outside of the type 'ScreenResizeManager'");
			}

			if (arg0.op == EventOp.Add)
			{
				System.Action ev = (System.Action)DelegateFactory.CreateDelegate(typeof(System.Action), arg0.func);
				obj.OnOrientationChanged += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				System.Action ev = (System.Action)LuaMisc.GetEventHandler(obj, typeof(ScreenResizeManager), "OnOrientationChanged");
				Delegate[] ds = ev.GetInvocationList();
				LuaState state = LuaState.Get(L);

				for (int i = 0; i < ds.Length; i++)
				{
					ev = (System.Action)ds[i];
					LuaDelegate ld = ev.Target as LuaDelegate;

					if (ld != null && ld.func == arg0.func)
					{
						obj.OnOrientationChanged -= ev;
						state.DelayDispose(ld.func);
						break;
					}
				}

				arg0.func.Dispose();
			}

			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

