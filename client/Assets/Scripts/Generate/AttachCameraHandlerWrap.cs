//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class AttachCameraHandlerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(AttachCameraHandler), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("NewAttachCamera", NewAttachCamera);
		L.RegFunction("SetRect", SetRect);
		L.RegFunction("SetEnabled", SetEnabled);
		L.RegFunction("SetFieldOfView", SetFieldOfView);
		L.RegFunction("SetBackgroudColor", SetBackgroudColor);
		L.RegFunction("GetBackgroundColor", GetBackgroundColor);
		L.RegVar("camera", get_camera, set_camera);
		L.RegVar("bgCamera", get_bgCamera, set_bgCamera);
		L.RegVar("attachCameras", get_attachCameras, set_attachCameras);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int NewAttachCamera(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			AttachCameraHandler obj = (AttachCameraHandler)ToLua.CheckObject(L, 1, typeof(AttachCameraHandler));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			UnityEngine.Camera o = obj.NewAttachCamera(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetRect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			AttachCameraHandler obj = (AttachCameraHandler)ToLua.CheckObject(L, 1, typeof(AttachCameraHandler));
			UnityEngine.Rect arg0 = (UnityEngine.Rect)ToLua.CheckObject(L, 2, typeof(UnityEngine.Rect));
			obj.SetRect(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetEnabled(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			AttachCameraHandler obj = (AttachCameraHandler)ToLua.CheckObject(L, 1, typeof(AttachCameraHandler));
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.SetEnabled(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetFieldOfView(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			AttachCameraHandler obj = (AttachCameraHandler)ToLua.CheckObject(L, 1, typeof(AttachCameraHandler));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.SetFieldOfView(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetBackgroudColor(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			AttachCameraHandler obj = (AttachCameraHandler)ToLua.CheckObject(L, 1, typeof(AttachCameraHandler));
			UnityEngine.Color arg0 = ToLua.ToColor(L, 2);
			obj.SetBackgroudColor(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBackgroundColor(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			AttachCameraHandler obj = (AttachCameraHandler)ToLua.CheckObject(L, 1, typeof(AttachCameraHandler));
			UnityEngine.Color o = obj.GetBackgroundColor();
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_camera(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AttachCameraHandler obj = (AttachCameraHandler)o;
			UnityEngine.Camera ret = obj.camera;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index camera on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_bgCamera(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AttachCameraHandler obj = (AttachCameraHandler)o;
			UnityEngine.Camera ret = obj.bgCamera;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index bgCamera on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_attachCameras(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AttachCameraHandler obj = (AttachCameraHandler)o;
			System.Collections.Generic.List<UnityEngine.Camera> ret = obj.attachCameras;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index attachCameras on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_camera(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AttachCameraHandler obj = (AttachCameraHandler)o;
			UnityEngine.Camera arg0 = (UnityEngine.Camera)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.Camera));
			obj.camera = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index camera on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_bgCamera(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AttachCameraHandler obj = (AttachCameraHandler)o;
			UnityEngine.Camera arg0 = (UnityEngine.Camera)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.Camera));
			obj.bgCamera = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index bgCamera on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_attachCameras(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AttachCameraHandler obj = (AttachCameraHandler)o;
			System.Collections.Generic.List<UnityEngine.Camera> arg0 = (System.Collections.Generic.List<UnityEngine.Camera>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<UnityEngine.Camera>));
			obj.attachCameras = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index attachCameras on a nil value" : e.Message);
		}
	}
}

