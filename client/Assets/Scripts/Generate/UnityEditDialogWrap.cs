//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UnityEditDialogWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UnityEditDialog), typeof(System.Object));
		L.RegFunction("Update", Update);
		L.RegFunction("Release", Release);
		L.RegFunction("Show", Show);
		L.RegFunction("Hide", Hide);
		L.RegFunction("SetText", SetText);
		L.RegFunction("IsProcessing", IsProcessing);
		L.RegFunction("OnDialogShow", OnDialogShow);
		L.RegFunction("OnDialogHide", OnDialogHide);
		L.RegFunction("OnInputTextChanged", OnInputTextChanged);
		L.RegFunction("OnInputReturn", OnInputReturn);
		L.RegFunction("InputValidate", InputValidate);
		L.RegFunction("OnSoftInputHeight", OnSoftInputHeight);
		L.RegFunction("New", _CreateUnityEditDialog);
		L.RegVar("onInputCover", get_onInputCover, set_onInputCover);
		L.RegVar("onInputTextChanged", get_onInputTextChanged, set_onInputTextChanged);
		L.RegVar("onInputReturn", get_onInputReturn, set_onInputReturn);
		L.RegVar("onInputFinish", get_onInputFinish, set_onInputFinish);
		L.RegVar("onInputValidate", get_onInputValidate, set_onInputValidate);
		L.RegFunction("OnInputValidateDelegate", UnityEditDialog_OnInputValidateDelegate);
		L.RegFunction("OnInputFinishDelegate", UnityEditDialog_OnInputFinishDelegate);
		L.RegFunction("OnInputReturnDelegate", UnityEditDialog_OnInputReturnDelegate);
		L.RegFunction("OnInputTextChangedDelegate", UnityEditDialog_OnInputTextChangedDelegate);
		L.RegFunction("OnInputCoverDelegate", UnityEditDialog_OnInputCoverDelegate);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateUnityEditDialog(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				UnityEditDialog obj = new UnityEditDialog();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: UnityEditDialog.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Update(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			UnityEditDialog.Update();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Release(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			UnityEditDialog.Release();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Show(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UIInput arg0 = (UIInput)ToLua.CheckUnityObject(L, 1, typeof(UIInput));
			string arg1 = ToLua.CheckString(L, 2);
			UnityEditTextStyle arg2 = (UnityEditTextStyle)ToLua.CheckObject(L, 3, typeof(UnityEditTextStyle));
			UnityEditDialog.Show(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Hide(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			UnityEditDialog.Hide();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetText(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			UnityEditDialog.SetText(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsProcessing(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UIInput arg0 = (UIInput)ToLua.CheckUnityObject(L, 1, typeof(UIInput));
			bool o = UnityEditDialog.IsProcessing(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnDialogShow(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			UnityEditDialog.OnDialogShow();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnDialogHide(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			UnityEditDialog.OnDialogHide();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnInputTextChanged(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			UnityEditDialog.OnInputTextChanged(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnInputReturn(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			UnityEditDialog.OnInputReturn();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int InputValidate(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			string o = UnityEditDialog.InputValidate(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnSoftInputHeight(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			UnityEditDialog.OnSoftInputHeight(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onInputCover(IntPtr L)
	{
		try
		{
			ToLua.Push(L, UnityEditDialog.onInputCover);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onInputTextChanged(IntPtr L)
	{
		try
		{
			ToLua.Push(L, UnityEditDialog.onInputTextChanged);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onInputReturn(IntPtr L)
	{
		try
		{
			ToLua.Push(L, UnityEditDialog.onInputReturn);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onInputFinish(IntPtr L)
	{
		try
		{
			ToLua.Push(L, UnityEditDialog.onInputFinish);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onInputValidate(IntPtr L)
	{
		try
		{
			ToLua.Push(L, UnityEditDialog.onInputValidate);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onInputCover(IntPtr L)
	{
		try
		{
			UnityEditDialog.OnInputCoverDelegate arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (UnityEditDialog.OnInputCoverDelegate)ToLua.CheckObject(L, 2, typeof(UnityEditDialog.OnInputCoverDelegate));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(UnityEditDialog.OnInputCoverDelegate), func) as UnityEditDialog.OnInputCoverDelegate;
			}

			UnityEditDialog.onInputCover = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onInputTextChanged(IntPtr L)
	{
		try
		{
			UnityEditDialog.OnInputTextChangedDelegate arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (UnityEditDialog.OnInputTextChangedDelegate)ToLua.CheckObject(L, 2, typeof(UnityEditDialog.OnInputTextChangedDelegate));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(UnityEditDialog.OnInputTextChangedDelegate), func) as UnityEditDialog.OnInputTextChangedDelegate;
			}

			UnityEditDialog.onInputTextChanged = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onInputReturn(IntPtr L)
	{
		try
		{
			UnityEditDialog.OnInputReturnDelegate arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (UnityEditDialog.OnInputReturnDelegate)ToLua.CheckObject(L, 2, typeof(UnityEditDialog.OnInputReturnDelegate));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(UnityEditDialog.OnInputReturnDelegate), func) as UnityEditDialog.OnInputReturnDelegate;
			}

			UnityEditDialog.onInputReturn = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onInputFinish(IntPtr L)
	{
		try
		{
			UnityEditDialog.OnInputFinishDelegate arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (UnityEditDialog.OnInputFinishDelegate)ToLua.CheckObject(L, 2, typeof(UnityEditDialog.OnInputFinishDelegate));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(UnityEditDialog.OnInputFinishDelegate), func) as UnityEditDialog.OnInputFinishDelegate;
			}

			UnityEditDialog.onInputFinish = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onInputValidate(IntPtr L)
	{
		try
		{
			UnityEditDialog.OnInputValidateDelegate arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (UnityEditDialog.OnInputValidateDelegate)ToLua.CheckObject(L, 2, typeof(UnityEditDialog.OnInputValidateDelegate));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(UnityEditDialog.OnInputValidateDelegate), func) as UnityEditDialog.OnInputValidateDelegate;
			}

			UnityEditDialog.onInputValidate = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnityEditDialog_OnInputValidateDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(UnityEditDialog.OnInputValidateDelegate), func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(UnityEditDialog.OnInputValidateDelegate), func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnityEditDialog_OnInputFinishDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(UnityEditDialog.OnInputFinishDelegate), func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(UnityEditDialog.OnInputFinishDelegate), func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnityEditDialog_OnInputReturnDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(UnityEditDialog.OnInputReturnDelegate), func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(UnityEditDialog.OnInputReturnDelegate), func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnityEditDialog_OnInputTextChangedDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(UnityEditDialog.OnInputTextChangedDelegate), func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(UnityEditDialog.OnInputTextChangedDelegate), func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnityEditDialog_OnInputCoverDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(UnityEditDialog.OnInputCoverDelegate), func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(UnityEditDialog.OnInputCoverDelegate), func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

