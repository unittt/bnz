//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class SPSDKWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(SPSDK), typeof(System.Object));
		L.RegFunction("Setup", Setup);
		L.RegFunction("SetShenhe", SetShenhe);
		L.RegFunction("Init", Init);
		L.RegFunction("Login", Login);
		L.RegFunction("SwitchAccount", SwitchAccount);
		L.RegFunction("Bind", Bind);
		L.RegFunction("IsSupportLogout", IsSupportLogout);
		L.RegFunction("Logout", Logout);
		L.RegFunction("DoExiter", DoExiter);
		L.RegFunction("Exit", Exit);
		L.RegFunction("Regster", Regster);
		L.RegFunction("UpdateUserInfo", UpdateUserInfo);
		L.RegFunction("SubmitRoleData", SubmitRoleData);
		L.RegFunction("GainGameCoin", GainGameCoin);
		L.RegFunction("ConsumeGameCoin", ConsumeGameCoin);
		L.RegFunction("GetChannelId", GetChannelId);
		L.RegFunction("GetSubChannelId", GetSubChannelId);
		L.RegFunction("GetMutilPackageId", GetMutilPackageId);
		L.RegFunction("GetGameId", GetGameId);
		L.RegFunction("GetAppName", GetAppName);
		L.RegFunction("IsSupportUserCenter", IsSupportUserCenter);
		L.RegFunction("EnterUserCenter", EnterUserCenter);
		L.RegFunction("IsSupportBBS", IsSupportBBS);
		L.RegFunction("EnterSdkBBS", EnterSdkBBS);
		L.RegFunction("IsSupportShowOrHideToolbar", IsSupportShowOrHideToolbar);
		L.RegFunction("ShowFloatToolBar", ShowFloatToolBar);
		L.RegFunction("HideFloatToolBar", HideFloatToolBar);
		L.RegFunction("DoPay", DoPay);
		L.RegFunction("SetLuaCallback", SetLuaCallback);
		L.RegFunction("OnSdkCallback", OnSdkCallback);
		L.RegFunction("DoIosWechatAliPay", DoIosWechatAliPay);
		L.RegFunction("New", _CreateSPSDK);
		L.RegVar("luaCallback", get_luaCallback, set_luaCallback);
		L.RegVar("ChannelAreaFlag", get_ChannelAreaFlag, set_ChannelAreaFlag);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateSPSDK(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				SPSDK obj = new SPSDK();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: SPSDK.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Setup(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			SPSDK.Setup();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetShenhe(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 1);
			SPSDK.SetShenhe(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Init(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			SPSDK.Init();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Login(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			SPSDK.Login();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SwitchAccount(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			SPSDK.SwitchAccount();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Bind(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			SPSDK.Bind();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsSupportLogout(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			bool o = SPSDK.IsSupportLogout();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Logout(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			bool o = SPSDK.Logout();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DoExiter(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			bool o = SPSDK.DoExiter();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Exit(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			SPSDK.Exit();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Regster(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			SPSDK.Regster(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UpdateUserInfo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			SPSDK.UpdateUserInfo(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SubmitRoleData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			SPSDK.SubmitRoleData(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GainGameCoin(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			SPSDK.GainGameCoin(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ConsumeGameCoin(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			SPSDK.ConsumeGameCoin(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetChannelId(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			string o = SPSDK.GetChannelId();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetSubChannelId(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			string o = SPSDK.GetSubChannelId();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetMutilPackageId(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			string o = SPSDK.GetMutilPackageId();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetGameId(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			string o = SPSDK.GetGameId();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAppName(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			string o = SPSDK.GetAppName();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsSupportUserCenter(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			bool o = SPSDK.IsSupportUserCenter();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EnterUserCenter(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			SPSDK.EnterUserCenter();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsSupportBBS(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			bool o = SPSDK.IsSupportBBS();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EnterSdkBBS(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			SPSDK.EnterSdkBBS();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsSupportShowOrHideToolbar(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			bool o = SPSDK.IsSupportShowOrHideToolbar();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ShowFloatToolBar(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			SPSDK.ShowFloatToolBar();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int HideFloatToolBar(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			SPSDK.HideFloatToolBar();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DoPay(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			SPSDK.DoPay(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetLuaCallback(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LuaFunction arg0 = ToLua.CheckLuaFunction(L, 1);
			SPSDK.SetLuaCallback(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnSdkCallback(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			SPSDK.OnSdkCallback(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DoIosWechatAliPay(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			SPSDK.DoIosWechatAliPay(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_luaCallback(IntPtr L)
	{
		try
		{
			ToLua.Push(L, SPSDK.luaCallback);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ChannelAreaFlag(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, SPSDK.ChannelAreaFlag);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_luaCallback(IntPtr L)
	{
		try
		{
			LuaFunction arg0 = ToLua.CheckLuaFunction(L, 2);
			SPSDK.luaCallback = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ChannelAreaFlag(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			SPSDK.ChannelAreaFlag = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

