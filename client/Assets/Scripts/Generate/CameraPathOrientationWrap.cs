//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class CameraPathOrientationWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(CameraPathOrientation), typeof(CameraPathPoint));
		L.RegFunction("ToXML", ToXML);
		L.RegFunction("FromXML", FromXML);
		L.RegVar("rotation", get_rotation, set_rotation);
		L.RegVar("lookAt", get_lookAt, set_lookAt);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToXML(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			CameraPathOrientation obj = (CameraPathOrientation)ToLua.CheckObject(L, 1, typeof(CameraPathOrientation));
			string o = obj.ToXML();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FromXML(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			CameraPathOrientation obj = (CameraPathOrientation)ToLua.CheckObject(L, 1, typeof(CameraPathOrientation));
			System.Xml.XmlNode arg0 = (System.Xml.XmlNode)ToLua.CheckObject(L, 2, typeof(System.Xml.XmlNode));
			CameraPath arg1 = (CameraPath)ToLua.CheckUnityObject(L, 3, typeof(CameraPath));
			obj.FromXML(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_rotation(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CameraPathOrientation obj = (CameraPathOrientation)o;
			UnityEngine.Quaternion ret = obj.rotation;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index rotation on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_lookAt(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CameraPathOrientation obj = (CameraPathOrientation)o;
			UnityEngine.Transform ret = obj.lookAt;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index lookAt on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_rotation(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CameraPathOrientation obj = (CameraPathOrientation)o;
			UnityEngine.Quaternion arg0 = ToLua.ToQuaternion(L, 2);
			obj.rotation = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index rotation on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_lookAt(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CameraPathOrientation obj = (CameraPathOrientation)o;
			UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.Transform));
			obj.lookAt = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index lookAt on a nil value" : e.Message);
		}
	}
}

