//this source code was auto-generated by tolua#, do not modify it

using System;
using LuaInterface;
using UnityEngine;

public class UtilsWrap
{
    public static void Register(LuaState L)
    {
        L.BeginClass(typeof(Utils), typeof(System.Object));
        L.RegFunction("ByteToString", ByteToString);
        L.RegFunction("StringToByte", StringToByte);
        L.RegFunction("LoadProto", LoadProto);
        L.RegFunction("IsObjectExist", IsObjectExist);
        L.RegFunction("ShowLuaObjectInfo", ShowLuaObjectInfo);
        L.RegFunction("HideGameLoading", HideGameLoading);
        L.RegFunction("GetNetworkType", GetNetworkType);
        L.RegFunction("GetWifiSignal", GetWifiSignal);
        L.RegFunction("GetBatteryLevel", GetBatteryLevel);
        L.RegFunction("IsBattleCharging", IsBattleCharging);
        L.RegFunction("NewGuid", NewGuid);
        L.RegFunction("GetDeviceUID", GetDeviceUID);
        L.RegFunction("GetDeviceName", GetDeviceName);
        L.RegFunction("GetDeviceMac", GetDeviceMac);
        L.RegFunction("FindShader", FindShader);
        L.RegFunction("SetWindowTitle", SetWindowTitle);
        L.RegFunction("GetResVersion", GetResVersion);
        L.RegFunction("GetAppVersion", GetAppVersion);
        L.RegFunction("GetSvnVersion", GetSvnVersion);
        L.RegFunction("SetClipBoardText", SetClipBoardText);
        L.RegFunction("GetClipBoardText", GetClipBoardText);
        L.RegFunction("ReleaseCSharpObjects", ReleaseCSharpObjects);
        L.RegFunction("SetGlobalEventHanlder", SetGlobalEventHanlder);
        L.RegFunction("SetLogLevel", SetLogLevel);
        L.RegFunction("DumpLuaDataFile", DumpLuaDataFile);
        L.RegFunction("Vibrate", Vibrate);
        L.RegFunction("GetStaticConfigUrl", GetStaticConfigUrl);
        L.RegFunction("LogError", LogError);
        L.RegFunction("GetAndroidMeta", GetAndroidMeta);
        L.RegFunction("GetYeSDKExtraMeta", GetYeSDKExtraMeta);
        L.RegFunction("GetYeSDKChannelIdMeta", GetYeSDKChannelIdMeta);
        L.RegFunction("GetScreenBrightness", GetScreenBrightness);
        L.RegFunction("SetBrightness", SetBrightness);
		L.RegFunction("GetResourcesData", GetResourcesData);
		L.RegFunction("ExitGame", ExitGame);
		L.RegFunction("SetTcpParerXorKey", SetTcpParerXorKey);
        L.RegFunction("GetBanhao", GetBanhao);
        L.RegFunction("GetAppID", GetAppID);
		L.RegFunction("GetAppName", GetAppName);
        L.RegFunction("__tostring", ToLua.op_ToString);
        L.EndClass();
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int StringToByte(IntPtr L)
    {
        try
        {
            ToLua.CheckArgsCount(L, 1);
            byte[] data = LuaDLL.lua_tobytearray(L, 1);
            ToLua.Push(L, data);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int ByteToString(IntPtr L)
    {
        try
        {
            ToLua.CheckArgsCount(L, 1);
            byte[] array = ToLua.CheckByteBuffer(L, 1);
            LuaDLL.lua_pushlstring(L, array, array.Length);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int LoadProto(IntPtr L)
    {
        try
        {
            ToLua.CheckArgsCount(L, 1);
            string file = ToLua.CheckString(L, 1);
            byte[] array = LuaFileUtils.Instance.ReadProto(file);
            ToLua.PushByteBuffer(L, array);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int IsObjectExist(IntPtr L)
    {
        try
        {
            int udata = LuaDLL.tolua_rawnetobj(L, 1);
            ObjectTranslator translator = ObjectTranslator.Get(L);

            object obj = translator.GetObject(udata);
            if (obj != null)
            {
                UnityEngine.Object uObj = obj as UnityEngine.Object;
                //Debug.Log("IsObjectExist " + obj + " " + uObj);
                if (uObj != null)
                {
                    ToLua.Push(L, true);
                    return 1;
                }
            }

            ToLua.Push(L, false);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }


    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int ShowLuaObjectInfo(IntPtr L)
    {
        try
        {
            ObjectTranslator translator = ObjectTranslator.Get(L);
            UnityEngine.Debug.Log("objectsBackMap  count " + translator.objectsBackMap.Count);
            UnityEngine.Debug.Log("LuaObjectPool count  " + translator.objects.GetCount());
            return 0;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int HideGameLoading(IntPtr L)
    {
        try
        {
            if (GameLauncher.Instance != null)
            {
                GameLauncher.Instance.DestroyGameLoader();
            }
            return 0;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int GetNetworkType(IntPtr L)
    {
        try
        {
            string type = PlatformAPI.getNetworkType();
            ToLua.Push(L, type);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }


    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int GetWifiSignal(IntPtr L)
    {
        try
        {
            int value = PlatformAPI.getWifiSignal();
            ToLua.Push(L, value);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int GetBatteryLevel(IntPtr L)
    {
        try
        {
            int value = PlatformAPI.GetBatteryLevel();
            ToLua.Push(L, value);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }


    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int IsBattleCharging(IntPtr L)
    {
        try
        {
            bool value = PlatformAPI.IsBattleCharging();
            ToLua.Push(L, value);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int NewGuid(IntPtr L)
    {
        try
        {
            ToLua.Push(L, System.Guid.NewGuid().ToString());
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int GetDeviceUID(IntPtr L)
    {
        try
        {
            string uid = PlatformAPI.GetDeviceUID();
            ToLua.Push(L, uid);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int GetDeviceName(IntPtr L)
    {
        try
        {
            string name = PlatformAPI.GetDeviceName();
            ToLua.Push(L, name);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int GetDeviceMac(IntPtr L)
    {
        try
        {
            ToLua.CheckArgsCount(L, 0);
            string o = PlatformAPI.getLocalMacAddress();
            LuaDLL.lua_pushstring(L, o);
            return 1;
        }
        catch(Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int FindShader(IntPtr L)
    {
        try
        {
            string name = ToLua.CheckString(L, 1);
            Shader shader = ShaderHelper.Find(name);
            ToLua.Push(L, shader);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int SetWindowTitle(IntPtr L)
    {
        try
        {
            string name = ToLua.CheckString(L, 1);
#if UNITY_STANDALONE_WIN
            WinAPI.SetWindowTitle(name);
#endif
            return 0;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int GetAppVersion(IntPtr L)
    {
        try
        {
            string version = GameVersion.AppVersion;
            string[] vers = version.Split('.');
            for (int i = 0; i < vers.Length; i++)
            {
                ToLua.Push(L, int.Parse(vers[i]));
            }
            return vers.Length;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int GetResVersion(IntPtr L)
    {
        try
        {
			string version = GameVersion.ResVersion;
			string[] vers = version.Split('.');
			for (int i = 0; i < vers.Length; i++)
			{
				ToLua.Push(L, int.Parse(vers[i]));
			}
			return vers.Length;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int GetSvnVersion(IntPtr L)
    {
        try
        {
            ToLua.Push(L, GameVersion.ConfigSvnVersion);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }


    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int SetClipBoardText(IntPtr L)
    {
        try
        {
            string text = ToLua.CheckString(L, 1);
            PlatformAPI.SetClipBoardText(text);
            return 0;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int GetClipBoardText(IntPtr L)
    {
        try
        {
            string text = PlatformAPI.GetClipBoardText();
            ToLua.Push(L, text);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int ReleaseCSharpObjects(IntPtr L)
    {
        try
        {
            ObjectTranslator translator = ObjectTranslator.Get(L);
            LuaDLL.lua_pushnil(L);
            while (LuaDLL.lua_next(L, 1) != 0)
            {
                int udata = LuaDLL.tolua_rawnetobj(L, -1);
                LuaDLL.lua_pop(L, 1);
                translator.Destroy(udata);
                LuaDLL.lua_settop(L, 0);
            }
            //translator.Destroy(udata);

            return 0;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int SetGlobalEventHanlder(IntPtr L)
    {
        try
        {
            LuaFunction calback = ToLua.CheckLuaFunction(L, 1);
            if (GlobalEventHanlder.luaGlobalCallback != null)
            {
                GlobalEventHanlder.luaGlobalCallback.Dispose();
            }
            GlobalEventHanlder.luaGlobalCallback = calback;
            return 0;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }


    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int SetLogLevel(IntPtr L)
    {
        try
        {
            int level = LuaDLL.lua_tointeger(L, 1);
            GameDebug.SetLogLevel(level);
            return 0;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }


    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int DumpLuaDataFile(IntPtr L)
    {
        try
        {
            LuaZip.DumpAllFile();
            return 0;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int Vibrate(IntPtr L)
    {
        try
        {
#if UNITY_ANDROID || UNITY_IOS 
            Handheld.Vibrate();
#endif
            return 0;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int GetStaticConfigUrl(IntPtr L)
    {
        try
        {
            ToLua.Push(L, GameSetting.CONFIG_SERVER + "/servers/");
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int GetAndroidMeta(IntPtr L)
    {
        try
        {
            string text = ToLua.CheckString(L, 1);
            ToLua.Push(L, AndroidAPI.getMetaData(text));
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int GetYeSDKExtraMeta(IntPtr L)
    {
        try
        {
            ToLua.Push(L, AndroidAPI.getYeSDKExtra());
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int GetYeSDKChannelIdMeta(IntPtr L)
    {
        try
        {
            ToLua.Push(L, AndroidAPI.getYeSDKChannelId());
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int LogError(IntPtr L)
    {
        try
        {
            string msg = ToLua.CheckString(L, 1);
            GameDebug.LogError(msg);
            return 0;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetTcpParerXorKey(IntPtr L)
    {
        try
        {
			string key = ToLua.CheckString(L, 1);
			TcpParser.SetXorKey(key);
			return 0;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int GetScreenBrightness(IntPtr L)
    {
        try
        {
            int brightness = PlatformAPI.getScreenBrightness();
            ToLua.Push(L, brightness);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int SetBrightness(IntPtr L)
    {
        try
        {
            int brightness = LuaDLL.lua_tointeger(L, 1);
            PlatformAPI.setBrightness(brightness); 
            return 0;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
	}
	
	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetResourcesData(IntPtr L)
	{
		try
		{
			string path = ToLua.CheckString(L, 1);
			ToLua.Push(L, Resources.Load(path));
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
	
	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ExitGame(IntPtr L)
	{
		try
		{
			Application.Quit();
			
#if UNITY_EDITOR
//			EditorApplication.isPlaying = false;
#endif
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int GetBanhao(IntPtr L)
    {
        try
        {
            string banhao = ProjectIconSetting.BanhaoData;
            ToLua.Push(L, banhao);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
	}
	
	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAppID(IntPtr L)
	{
		try
		{
			int appid = GameSetting.APP_ID;
			ToLua.Push(L, appid);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
	
	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAppName(IntPtr L)
	{
		try
		{
			string appname = GameSetting.GameName;
			ToLua.Push(L, appname);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

