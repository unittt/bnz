//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class TimerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Timer), typeof(System.Object));
        //L.RegFunction("AddTimer", AddTimer);
        //L.RegFunction("DelTimer", DelTimer);
		L.RegFunction("GetTickS", GetTickS);
		L.RegFunction("GetTickMS", GetTickMS);
		L.RegFunction("GetTicks", GetTicks);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

    //[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    //static int AddTimer(IntPtr L)
    //{
    //    try
    //    {
    //        ToLua.CheckArgsCount(L, 3);
    //        LuaFunction arg1 = ToLua.CheckLuaFunction(L, 1);
    //        double interval = LuaDLL.luaL_checknumber(L, 2);
    //        double dealy = LuaDLL.luaL_checknumber(L, 3);
    //        int o = Timer.Instance.AddTimer(arg1, interval, dealy);
    //        LuaDLL.lua_pushinteger(L, o); 
    //        return 1;
    //    }
    //    catch(Exception e)
    //    {
    //        return LuaDLL.toluaL_exception(L, e);
    //    }
    //}

    //[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    //static int DelTimer(IntPtr L)
    //{
    //    try
    //    {
    //        ToLua.CheckArgsCount(L, 1);
    //        int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
    //        Timer.Instance.DelTimer(arg0);
    //        return 0;
    //    }
    //    catch(Exception e)
    //    {
    //        return LuaDLL.toluaL_exception(L, e);
    //    }
    //}

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int GetTickS(IntPtr L)
    {
        try
        {
            LuaDLL.lua_pushnumber(L, DateTime.Now.Ticks / 10000000);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int GetTickMS(IntPtr L)
    {
        try
        {
            LuaDLL.lua_pushnumber(L, DateTime.Now.Ticks / 10000);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }
	

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTicks(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushnumber(L, DateTime.Now.Ticks);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

}

