//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class HotkeyHandlerWrap
{
    public static void Register(LuaState L)
    {
        L.BeginClass(typeof(HotkeyHandler), typeof(System.Object));
        L.RegFunction("SetKeyUpCallback", SetKeyUpCallback);
        L.RegFunction("SetKeyDownCallback", SetKeyDownCallback);
        L.RegFunction("AddHotKey", AddHotKey);
        L.RegFunction("DelHotKey", DelHotKey);
        L.RegVar("Instance", get_Instance, null);
        L.EndClass();
    }

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetKeyUpCallback(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			HotkeyHandler obj = (HotkeyHandler)ToLua.CheckObject(L, 1, typeof(HotkeyHandler));
			LuaFunction arg0 = ToLua.CheckLuaFunction(L, 2);
            obj.SetKeyUpCallback(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetKeyDownCallback(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			HotkeyHandler obj = (HotkeyHandler)ToLua.CheckObject(L, 1, typeof(HotkeyHandler));
			LuaFunction arg0 = ToLua.CheckLuaFunction(L, 2);
			obj.SetKeyDownCallback(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddHotKey(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			HotkeyHandler obj = (HotkeyHandler)ToLua.CheckObject(L, 1, typeof(HotkeyHandler));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.AddHotKey(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DelHotKey(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			HotkeyHandler obj = (HotkeyHandler)ToLua.CheckObject(L, 1, typeof(HotkeyHandler));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.DelHotKey(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Instance(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, HotkeyHandler.Instance);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

