//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Map2DCameraWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Map2DCamera), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("Follow", Follow);
		L.RegFunction("SyncTargetPos", SyncTargetPos);
		L.RegFunction("CallLateUpdate", CallLateUpdate);
		L.RegFunction("SetCurMap", SetCurMap);
		L.RegFunction("UpdateCameraSize", UpdateCameraSize);
		L.RegFunction("SetCameraOffsetY", SetCameraOffsetY);
		L.RegFunction("Reset", Reset);
		L.RegVar("target", get_target, set_target);
		L.RegVar("followTarget", get_followTarget, set_followTarget);
		L.RegVar("isSmooth", get_isSmooth, set_isSmooth);
		L.RegVar("damping", get_damping, set_damping);
		L.RegVar("xMin", get_xMin, set_xMin);
		L.RegVar("xMax", get_xMax, set_xMax);
		L.RegVar("yMin", get_yMin, set_yMin);
		L.RegVar("yMax", get_yMax, set_yMax);
		L.RegVar("curMap", get_curMap, set_curMap);
		L.RegVar("lastCachePos", get_lastCachePos, set_lastCachePos);
		L.RegVar("speedUpTime", get_speedUpTime, set_speedUpTime);
		L.RegVar("Instance", get_Instance, null);
		L.RegVar("cacheTrans", get_cacheTrans, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Follow(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Map2DCamera obj = (Map2DCamera)ToLua.CheckObject(L, 1, typeof(Map2DCamera));
			UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.Transform));
			obj.Follow(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SyncTargetPos(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Map2DCamera obj = (Map2DCamera)ToLua.CheckObject(L, 1, typeof(Map2DCamera));
			obj.SyncTargetPos();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CallLateUpdate(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Map2DCamera obj = (Map2DCamera)ToLua.CheckObject(L, 1, typeof(Map2DCamera));
			obj.CallLateUpdate();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetCurMap(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Map2DCamera obj = (Map2DCamera)ToLua.CheckObject(L, 1, typeof(Map2DCamera));
			Map2D arg0 = (Map2D)ToLua.CheckUnityObject(L, 2, typeof(Map2D));
			obj.SetCurMap(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UpdateCameraSize(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Map2DCamera obj = (Map2DCamera)ToLua.CheckObject(L, 1, typeof(Map2DCamera));
			obj.UpdateCameraSize();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetCameraOffsetY(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			Map2DCamera obj = (Map2DCamera)ToLua.CheckObject(L, 1, typeof(Map2DCamera));
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			bool arg1 = (bool)LuaDLL.luaL_checkboolean(L, 3);
			float arg2 = (float)LuaDLL.luaL_checknumber(L, 4);
			obj.SetCameraOffsetY(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Reset(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Map2DCamera obj = (Map2DCamera)ToLua.CheckObject(L, 1, typeof(Map2DCamera));
			obj.Reset();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_target(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Map2DCamera obj = (Map2DCamera)o;
			UnityEngine.Transform ret = obj.target;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index target on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_followTarget(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Map2DCamera obj = (Map2DCamera)o;
			bool ret = obj.followTarget;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index followTarget on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isSmooth(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Map2DCamera obj = (Map2DCamera)o;
			bool ret = obj.isSmooth;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index isSmooth on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_damping(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Map2DCamera obj = (Map2DCamera)o;
			float ret = obj.damping;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index damping on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_xMin(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Map2DCamera obj = (Map2DCamera)o;
			float ret = obj.xMin;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index xMin on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_xMax(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Map2DCamera obj = (Map2DCamera)o;
			float ret = obj.xMax;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index xMax on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_yMin(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Map2DCamera obj = (Map2DCamera)o;
			float ret = obj.yMin;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index yMin on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_yMax(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Map2DCamera obj = (Map2DCamera)o;
			float ret = obj.yMax;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index yMax on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_curMap(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Map2DCamera obj = (Map2DCamera)o;
			Map2D ret = obj.curMap;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index curMap on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_lastCachePos(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Map2DCamera obj = (Map2DCamera)o;
			UnityEngine.Vector3 ret = obj.lastCachePos;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index lastCachePos on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_speedUpTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Map2DCamera obj = (Map2DCamera)o;
			float ret = obj.speedUpTime;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index speedUpTime on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Instance(IntPtr L)
	{
		try
		{
			ToLua.Push(L, Map2DCamera.Instance);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_cacheTrans(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Map2DCamera obj = (Map2DCamera)o;
			UnityEngine.Transform ret = obj.cacheTrans;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index cacheTrans on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_target(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Map2DCamera obj = (Map2DCamera)o;
			UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.Transform));
			obj.target = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index target on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_followTarget(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Map2DCamera obj = (Map2DCamera)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.followTarget = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index followTarget on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_isSmooth(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Map2DCamera obj = (Map2DCamera)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.isSmooth = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index isSmooth on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_damping(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Map2DCamera obj = (Map2DCamera)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.damping = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index damping on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_xMin(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Map2DCamera obj = (Map2DCamera)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.xMin = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index xMin on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_xMax(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Map2DCamera obj = (Map2DCamera)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.xMax = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index xMax on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_yMin(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Map2DCamera obj = (Map2DCamera)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.yMin = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index yMin on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_yMax(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Map2DCamera obj = (Map2DCamera)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.yMax = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index yMax on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_curMap(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Map2DCamera obj = (Map2DCamera)o;
			Map2D arg0 = (Map2D)ToLua.CheckUnityObject(L, 2, typeof(Map2D));
			obj.curMap = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index curMap on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_lastCachePos(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Map2DCamera obj = (Map2DCamera)o;
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			obj.lastCachePos = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index lastCachePos on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_speedUpTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Map2DCamera obj = (Map2DCamera)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.speedUpTime = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index speedUpTime on a nil value" : e.Message);
		}
	}
}

