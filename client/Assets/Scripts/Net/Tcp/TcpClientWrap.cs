//this source code was auto-generated by tolua#, do not modify it
using System;
using System.Runtime.InteropServices;
using LuaInterface;

public class TcpClientWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(TcpClient), typeof(System.Object));
		L.RegFunction("Update", Update);
		L.RegFunction("SetCallback", SetCallback);
		L.RegFunction("IsConnected", IsConnected);
		L.RegFunction("Connect", Connect);
		L.RegFunction("Send", Send);
		L.RegFunction("Close", Close);
		L.RegFunction("Release", Release);
		L.RegFunction("New", _CreateTcpClient);
        L.RegVar("frameProcessCount", get_frameProcessCount, set_frameProcessCount);
		L.RegVar("serverIp", get_serverIp, null);
		L.RegVar("serverPort", get_serverPort, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateTcpClient(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				TcpClient obj = new TcpClient();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: TcpClient.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Update(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			TcpClient obj = (TcpClient)ToLua.CheckObject(L, 1, typeof(TcpClient));
			obj.Update();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetCallback(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			TcpClient obj = (TcpClient)ToLua.CheckObject(L, 1, typeof(TcpClient));
			LuaFunction arg0 = ToLua.CheckLuaFunction(L, 2);
			obj.SetCallback(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsConnected(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			TcpClient obj = (TcpClient)ToLua.CheckObject(L, 1, typeof(TcpClient));
            bool o = obj.isConnected;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Connect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			TcpClient obj = (TcpClient)ToLua.CheckObject(L, 1, typeof(TcpClient));
			string arg0 = ToLua.CheckString(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			string o = obj.Connect(arg0, arg1);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Send(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			TcpClient obj = (TcpClient)ToLua.CheckObject(L, 1, typeof(TcpClient));

            int len;
            IntPtr ptr = LuaDLL.lua_tolstring(L, 2, out len);
            if (ptr == IntPtr.Zero || len <= 0)
            {
                UnityEngine.Debug.Log("TCP Send Error ! data = null");
            }
            else
            {
               obj.Send(ptr, len);
            }
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}


	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Close(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			TcpClient obj = (TcpClient)ToLua.CheckObject(L, 1, typeof(TcpClient));
			obj.Close();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Release(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			TcpClient obj = (TcpClient)ToLua.CheckObject(L, 1, typeof(TcpClient));
			obj.Release();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
    

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int get_frameProcessCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			TcpClient obj = (TcpClient)o;
			int ret = obj.frameProcessCount;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index maxProcess on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_serverIp(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			TcpClient obj = (TcpClient)o;
			string ret = obj.serverIp;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index serverIp on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_serverPort(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			TcpClient obj = (TcpClient)o;
			int ret = obj.serverPort;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index serverPort on a nil value" : e.Message);
		}
	}


    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int set_frameProcessCount(IntPtr L)
    {
        object o = null;

        try
        {
            o = ToLua.ToObject(L, 1);
            TcpClient obj = (TcpClient)o;
            int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
            obj.frameProcessCount = arg0;
            return 0;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index maxProcess on a nil value" : e.Message);
        }
    }
}

