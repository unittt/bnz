1.图集压缩
2.动作文件压缩
2.fbx开启optimal


图集压缩
图集关注3个选项，首先选择Advanced模式可查看
举个例子，一张A图1024*1024的RGBA32颜色内存 = 1024*1024*32/8 = 4Mb

1.关闭read/write enabled
打开后表示可以直接加载这张图并且可读可取，比如读取里面某个像素，比如重新保存成为另外的文件。大部分情况下只会在Editor中使用，使用的的时候开启，使用完关闭，由代码控制。开启这个选项会使内存增加一倍，比如A图内存 = 8mb

2.关闭Generate Mip Map选项
Mip Map是指会从原图产生宽度和高度都是原来1/2,1/4,1/8。。。等等的图，比如你一张1024*1024的图，实际内存里面另外已经生成一张512*512,256*256,128*128,64*64,32*32,16*16的图。作用是根据你显示这个图片的控制大小，找到合适的区间进行差值计算。比如UI大小是700*700，那么从512*512和1024*1024中间进行计算，如果显示的是200*200，那么从256*256和128*128进行计算。如果直接从1024*1024缩小到200*200，那么精度就会很差。这个选项主要在3D中使用，越远的物体显示越小，UI的都可以忽略。开了这个选项，内存会变成1+1/4+1/16。。。最后就是变成1.333倍内存。上面A图集会变成5.333mb

3.Format选项就是压缩设置
比如1024*1024大小
在RGBA32 = 1024 * 1024 * 32 /8  = 4MB
在RGB = 1024 * 1024 * 24 /8  = 3MB
在RGBA16 = 1024 * 1024 * 16 /8  = 2MB
移动平台有各自硬件支持的纹理格式，Win的叫DXT1和DXT5，Android叫ETC1和ETC2，IOS叫PVRTC1和PVRTC2
默认选择auto compressed就可以，基本上大小都是原图的1/4大小
比如1024*1024改成auto compressed，在pc上面就变成DXT5，内存大小变成1MB
同样的，他会会是质量下降，但是内存优化非常明显。所以除了必要的图集，默认都应该选择压缩

Texture压缩
和图集压缩一致。主要注意选择压缩的话，只有2的幂大小才能生效，图集必然是2的幂，但是其他贴图不是
如果可以做成2的幂，首先让美术改掉
如果不是，关注里面有个选项non power of2，选择后会主动去拉伸或小所以，强制变成2的幂大小，但是同样的直接获取图片的大小或者UI上Snap也是改了，就要关注在UI上显示是否正常的问题了
1.如果用的地方，在UI上主要通过自己拉伸去适应的话，那问题不大，可以改成power of 2然后compress
2.如果图片本身比较大，但是使用的地方统一，可以通过代码配控制的，也可以改成power of 2然后compress
3.不好处理的话，可以选择RGBA16看下效果

